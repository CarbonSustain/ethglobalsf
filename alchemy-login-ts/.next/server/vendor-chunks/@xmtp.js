/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@xmtp";
exports.ids = ["vendor-chunks/@xmtp"];
exports.modules = {

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   b64Decode: () => (/* binding */ b64Decode),\n/* harmony export */   b64Encode: () => (/* binding */ b64Encode),\n/* harmony export */   fetchReq: () => (/* binding */ fetchReq),\n/* harmony export */   fetchStreamingRequest: () => (/* binding */ fetchStreamingRequest),\n/* harmony export */   renderURLSearchParams: () => (/* binding */ renderURLSearchParams),\n/* harmony export */   replacer: () => (/* binding */ replacer)\n/* harmony export */ });\n/* eslint-disable */\n// @ts-nocheck\n/*\n* This file is a generated Typescript file for GRPC Gateway, DO NOT MODIFY\n*/\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/**\n * base64 encoder and decoder\n * Copied and adapted from https://github.com/protobufjs/protobuf.js/blob/master/lib/base64/index.js\n */\n// Base64 encoding table\nconst b64 = new Array(64);\n// Base64 decoding table\nconst s64 = new Array(123);\n// 65..90, 97..122, 48..57, 43, 47\nfor (let i = 0; i < 64;)\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\nfunction b64Encode(buffer, start, end) {\n    let parts = null;\n    const chunk = [];\n    let i = 0, // output index\n    j = 0, // goto index\n    t; // temporary\n    while (start < end) {\n        const b = buffer[start++];\n        switch (j) {\n            case 0:\n                chunk[i++] = b64[b >> 2];\n                t = (b & 3) << 4;\n                j = 1;\n                break;\n            case 1:\n                chunk[i++] = b64[t | b >> 4];\n                t = (b & 15) << 2;\n                j = 2;\n                break;\n            case 2:\n                chunk[i++] = b64[t | b >> 6];\n                chunk[i++] = b64[b & 63];\n                j = 0;\n                break;\n        }\n        if (i > 8191) {\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n            i = 0;\n        }\n    }\n    if (j) {\n        chunk[i++] = b64[t];\n        chunk[i++] = 61;\n        if (j === 1)\n            chunk[i++] = 61;\n    }\n    if (parts) {\n        if (i)\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\n}\nconst invalidEncoding = \"invalid encoding\";\nfunction b64Decode(s) {\n    const buffer = [];\n    let offset = 0;\n    let j = 0, // goto index\n    t; // temporary\n    for (let i = 0; i < s.length;) {\n        let c = s.charCodeAt(i++);\n        if (c === 61 && j > 1)\n            break;\n        if ((c = s64[c]) === undefined)\n            throw Error(invalidEncoding);\n        switch (j) {\n            case 0:\n                t = c;\n                j = 1;\n                break;\n            case 1:\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\n                t = c;\n                j = 2;\n                break;\n            case 2:\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\n                t = c;\n                j = 3;\n                break;\n            case 3:\n                buffer[offset++] = (t & 3) << 6 | c;\n                j = 0;\n                break;\n        }\n    }\n    if (j === 1)\n        throw Error(invalidEncoding);\n    return new Uint8Array(buffer);\n}\nfunction b64Test(s) {\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(s);\n}\nfunction replacer(key, value) {\n    if (value && value.constructor === Uint8Array) {\n        return b64Encode(value, 0, value.length);\n    }\n    return value;\n}\nfunction fetchReq(path, init) {\n    const _a = init || {}, { pathPrefix } = _a, req = __rest(_a, [\"pathPrefix\"]);\n    const url = pathPrefix ? `${pathPrefix}${path}` : path;\n    return fetch(url, req).then(r => r.json().then((body) => {\n        if (!r.ok) {\n            throw body;\n        }\n        return body;\n    }));\n}\n/**\n * fetchStreamingRequest is able to handle grpc-gateway server side streaming call\n * it takes NotifyStreamEntityArrival that lets users respond to entity arrival during the call\n * all entities will be returned as an array after the call finishes.\n **/\nfunction fetchStreamingRequest(path, callback, init) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const _a = init || {}, { pathPrefix } = _a, req = __rest(_a, [\"pathPrefix\"]);\n        const url = pathPrefix ? `${pathPrefix}${path}` : path;\n        const result = yield fetch(url, req);\n        // needs to use the .ok to check the status of HTTP status code\n        // http other than 200 will not throw an error, instead the .ok will become false.\n        // see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#\n        if (!result.ok) {\n            const resp = yield result.json();\n            const errMsg = resp.error && resp.error.message ? resp.error.message : \"\";\n            throw new Error(errMsg);\n        }\n        if (!result.body) {\n            throw new Error(\"response doesnt have a body\");\n        }\n        yield result.body\n            .pipeThrough(new TextDecoderStream())\n            .pipeThrough(getNewLineDelimitedJSONDecodingStream())\n            .pipeTo(getNotifyEntityArrivalSink((e) => {\n            if (callback) {\n                callback(e);\n            }\n        }));\n        // wait for the streaming to finish and return the success respond\n        return;\n    });\n}\n/**\n * getNewLineDelimitedJSONDecodingStream returns a TransformStream that's able to handle new line delimited json stream content into parsed entities\n */\nfunction getNewLineDelimitedJSONDecodingStream() {\n    return new TransformStream({\n        start(controller) {\n            controller.buf = '';\n            controller.pos = 0;\n        },\n        transform(chunk, controller) {\n            if (controller.buf === undefined) {\n                controller.buf = '';\n            }\n            if (controller.pos === undefined) {\n                controller.pos = 0;\n            }\n            controller.buf += chunk;\n            while (controller.pos < controller.buf.length) {\n                if (controller.buf[controller.pos] === '\\n') {\n                    const line = controller.buf.substring(0, controller.pos);\n                    const response = JSON.parse(line);\n                    controller.enqueue(response.result);\n                    controller.buf = controller.buf.substring(controller.pos + 1);\n                    controller.pos = 0;\n                }\n                else {\n                    ++controller.pos;\n                }\n            }\n        }\n    });\n}\n/**\n * getNotifyEntityArrivalSink takes the NotifyStreamEntityArrival callback and return\n * a sink that will call the callback on entity arrival\n * @param notifyCallback\n */\nfunction getNotifyEntityArrivalSink(notifyCallback) {\n    return new WritableStream({\n        write(entity) {\n            notifyCallback(entity);\n        }\n    });\n}\n/**\n * Checks if given value is a plain object\n * Logic copied and adapted from below source:\n * https://github.com/char0n/ramda-adjunct/blob/master/src/isPlainObj.js\n * @param  {unknown} value\n * @return {boolean}\n */\nfunction isPlainObject(value) {\n    const isObject = Object.prototype.toString.call(value).slice(8, -1) === \"Object\";\n    const isObjLike = value !== null && isObject;\n    if (!isObjLike || !isObject) {\n        return false;\n    }\n    const proto = Object.getPrototypeOf(value);\n    const hasObjectConstructor = typeof proto === \"object\" &&\n        proto.constructor === Object.prototype.constructor;\n    return hasObjectConstructor;\n}\n/**\n * Checks if given value is of a primitive type\n * @param  {unknown} value\n * @return {boolean}\n */\nfunction isPrimitive(value) {\n    return [\"string\", \"number\", \"boolean\"].some(t => typeof value === t);\n}\n/**\n * Checks if given primitive is zero-value\n * @param  {Primitive} value\n * @return {boolean}\n */\nfunction isZeroValuePrimitive(value) {\n    return value === false || value === 0 || value === \"\";\n}\n/**\n * Flattens a deeply nested request payload and returns an object\n * with only primitive values and non-empty array of primitive values\n * as per https://github.com/googleapis/googleapis/blob/master/google/api/http.proto\n * @param  {RequestPayload} requestPayload\n * @param  {String} path\n * @return {FlattenedRequestPayload>}\n */\nfunction flattenRequestPayload(requestPayload, path = \"\") {\n    return Object.keys(requestPayload).reduce((acc, key) => {\n        const value = requestPayload[key];\n        const newPath = path ? [path, key].join(\".\") : key;\n        const isNonEmptyPrimitiveArray = Array.isArray(value) &&\n            value.every(v => isPrimitive(v)) &&\n            value.length > 0;\n        const isNonZeroValuePrimitive = isPrimitive(value) && !isZeroValuePrimitive(value);\n        let objectToMerge = {};\n        if (isPlainObject(value)) {\n            objectToMerge = flattenRequestPayload(value, newPath);\n        }\n        else if (isNonZeroValuePrimitive || isNonEmptyPrimitiveArray) {\n            objectToMerge = { [newPath]: value };\n        }\n        return Object.assign(Object.assign({}, acc), objectToMerge);\n    }, {});\n}\n/**\n * Renders a deeply nested request payload into a string of URL search\n * parameters by first flattening the request payload and then removing keys\n * which are already present in the URL path.\n * @param  {RequestPayload} requestPayload\n * @param  {string[]} urlPathParams\n * @return {string}\n */\nfunction renderURLSearchParams(requestPayload, urlPathParams = []) {\n    const flattenedRequestPayload = flattenRequestPayload(requestPayload);\n    const urlSearchParams = Object.keys(flattenedRequestPayload).reduce((acc, key) => {\n        // key should not be present in the url path as a parameter\n        const value = flattenedRequestPayload[key];\n        if (urlPathParams.find(f => f === key)) {\n            return acc;\n        }\n        return Array.isArray(value)\n            ? [...acc, ...value.map(m => [key, m.toString()])]\n            : (acc = [...acc, [key, value.toString()]]);\n    }, []);\n    return new URLSearchParams(urlSearchParams).toString();\n}\n//# sourceMappingURL=fetch.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authn: () => (/* reexport module object */ _message_api_v1_authn_pb__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   ciphertext: () => (/* reexport module object */ _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_11__),\n/* harmony export */   composite: () => (/* reexport module object */ _message_contents_composite_pb__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   contact: () => (/* reexport module object */ _message_contents_contact_pb__WEBPACK_IMPORTED_MODULE_12__),\n/* harmony export */   content: () => (/* reexport module object */ _message_contents_content_pb__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   conversationReference: () => (/* reexport module object */ _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   ecies: () => (/* reexport module object */ _message_contents_ecies_pb__WEBPACK_IMPORTED_MODULE_17__),\n/* harmony export */   fetcher: () => (/* reexport module object */ _fetch_pb__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   frames: () => (/* reexport module object */ _message_contents_frames_pb__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   invitation: () => (/* reexport module object */ _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_13__),\n/* harmony export */   keystore: () => (/* reexport module object */ _keystore_api_v1_keystore_pb__WEBPACK_IMPORTED_MODULE_14__),\n/* harmony export */   message: () => (/* reexport module object */ _message_contents_message_pb__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   messageApi: () => (/* reexport module object */ _message_api_v1_message_api_pb__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   privateKey: () => (/* reexport module object */ _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   privatePreferences: () => (/* reexport module object */ _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_15__),\n/* harmony export */   publicKey: () => (/* reexport module object */ _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_9__),\n/* harmony export */   signature: () => (/* reexport module object */ _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   signedPayload: () => (/* reexport module object */ _message_contents_signed_payload_pb__WEBPACK_IMPORTED_MODULE_16__)\n/* harmony export */ });\n/* harmony import */ var _message_api_v1_message_api_pb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./message_api/v1/message_api.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/message_api.pb.js\");\n/* harmony import */ var _fetch_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fetch.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js\");\n/* harmony import */ var _message_api_v1_authn_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./message_api/v1/authn.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/authn.pb.js\");\n/* harmony import */ var _message_contents_message_pb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message_contents/message.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/message.pb.js\");\n/* harmony import */ var _message_contents_content_pb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./message_contents/content.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js\");\n/* harmony import */ var _message_contents_frames_pb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./message_contents/frames.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/frames.pb.js\");\n/* harmony import */ var _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./message_contents/conversation_reference.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js\");\n/* harmony import */ var _message_contents_composite_pb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./message_contents/composite.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/composite.pb.js\");\n/* harmony import */ var _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./message_contents/private_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js\");\n/* harmony import */ var _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./message_contents/public_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./message_contents/signature.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./message_contents/ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var _message_contents_contact_pb__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./message_contents/contact.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/contact.pb.js\");\n/* harmony import */ var _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./message_contents/invitation.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js\");\n/* harmony import */ var _keystore_api_v1_keystore_pb__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./keystore_api/v1/keystore.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/keystore_api/v1/keystore.pb.js\");\n/* harmony import */ var _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./message_contents/private_preferences.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_preferences.pb.js\");\n/* harmony import */ var _message_contents_signed_payload_pb__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./message_contents/signed_payload.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signed_payload.pb.js\");\n/* harmony import */ var _message_contents_ecies_pb__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./message_contents/ecies.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ecies.pb.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29uc2VudC1wcm9vZi1zaWduYXR1cmUvbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4RDtBQUN4QjtBQUNhO0FBQ007QUFDQTtBQUNGO0FBQytCO0FBQ3pCO0FBQ0c7QUFDRjtBQUNEO0FBQ0U7QUFDTjtBQUNNO0FBQ0w7QUFDc0I7QUFDVjtBQUNqQjtBQUNyRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL2NvbnNlbnQtcHJvb2Ytc2lnbmF0dXJlL25vZGVfbW9kdWxlcy9AeG10cC9wcm90by90cy9kaXN0L2VzbS9pbmRleC5qcz84YTM1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGFzIG1lc3NhZ2VBcGkgZnJvbSBcIi4vbWVzc2FnZV9hcGkvdjEvbWVzc2FnZV9hcGkucGJcIjtcbmV4cG9ydCAqIGFzIGZldGNoZXIgZnJvbSBcIi4vZmV0Y2gucGJcIjtcbmV4cG9ydCAqIGFzIGF1dGhuIGZyb20gXCIuL21lc3NhZ2VfYXBpL3YxL2F1dGhuLnBiXCI7XG5leHBvcnQgKiBhcyBtZXNzYWdlIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvbWVzc2FnZS5wYlwiO1xuZXhwb3J0ICogYXMgY29udGVudCBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL2NvbnRlbnQucGJcIjtcbmV4cG9ydCAqIGFzIGZyYW1lcyBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL2ZyYW1lcy5wYlwiO1xuZXhwb3J0ICogYXMgY29udmVyc2F0aW9uUmVmZXJlbmNlIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvY29udmVyc2F0aW9uX3JlZmVyZW5jZS5wYlwiO1xuZXhwb3J0ICogYXMgY29tcG9zaXRlIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvY29tcG9zaXRlLnBiXCI7XG5leHBvcnQgKiBhcyBwcml2YXRlS2V5IGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvcHJpdmF0ZV9rZXkucGJcIjtcbmV4cG9ydCAqIGFzIHB1YmxpY0tleSBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL3B1YmxpY19rZXkucGJcIjtcbmV4cG9ydCAqIGFzIHNpZ25hdHVyZSBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL3NpZ25hdHVyZS5wYlwiO1xuZXhwb3J0ICogYXMgY2lwaGVydGV4dCBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL2NpcGhlcnRleHQucGJcIjtcbmV4cG9ydCAqIGFzIGNvbnRhY3QgZnJvbSBcIi4vbWVzc2FnZV9jb250ZW50cy9jb250YWN0LnBiXCI7XG5leHBvcnQgKiBhcyBpbnZpdGF0aW9uIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvaW52aXRhdGlvbi5wYlwiO1xuZXhwb3J0ICogYXMga2V5c3RvcmUgZnJvbSBcIi4va2V5c3RvcmVfYXBpL3YxL2tleXN0b3JlLnBiXCI7XG5leHBvcnQgKiBhcyBwcml2YXRlUHJlZmVyZW5jZXMgZnJvbSBcIi4vbWVzc2FnZV9jb250ZW50cy9wcml2YXRlX3ByZWZlcmVuY2VzLnBiXCI7XG5leHBvcnQgKiBhcyBzaWduZWRQYXlsb2FkIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvc2lnbmVkX3BheWxvYWQucGJcIjtcbmV4cG9ydCAqIGFzIGVjaWVzIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvZWNpZXMucGJcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/keystore_api/v1/keystore.pb.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/keystore_api/v1/keystore.pb.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreateAuthTokenRequest: () => (/* binding */ CreateAuthTokenRequest),\n/* harmony export */   CreateInviteRequest: () => (/* binding */ CreateInviteRequest),\n/* harmony export */   CreateInviteResponse: () => (/* binding */ CreateInviteResponse),\n/* harmony export */   DecryptResponse: () => (/* binding */ DecryptResponse),\n/* harmony export */   DecryptResponse_Response: () => (/* binding */ DecryptResponse_Response),\n/* harmony export */   DecryptResponse_Response_Success: () => (/* binding */ DecryptResponse_Response_Success),\n/* harmony export */   DecryptV1Request: () => (/* binding */ DecryptV1Request),\n/* harmony export */   DecryptV1Request_Request: () => (/* binding */ DecryptV1Request_Request),\n/* harmony export */   DecryptV2Request: () => (/* binding */ DecryptV2Request),\n/* harmony export */   DecryptV2Request_Request: () => (/* binding */ DecryptV2Request_Request),\n/* harmony export */   EncryptResponse: () => (/* binding */ EncryptResponse),\n/* harmony export */   EncryptResponse_Response: () => (/* binding */ EncryptResponse_Response),\n/* harmony export */   EncryptResponse_Response_Success: () => (/* binding */ EncryptResponse_Response_Success),\n/* harmony export */   EncryptV1Request: () => (/* binding */ EncryptV1Request),\n/* harmony export */   EncryptV1Request_Request: () => (/* binding */ EncryptV1Request_Request),\n/* harmony export */   EncryptV2Request: () => (/* binding */ EncryptV2Request),\n/* harmony export */   EncryptV2Request_Request: () => (/* binding */ EncryptV2Request_Request),\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   GetConversationHmacKeysRequest: () => (/* binding */ GetConversationHmacKeysRequest),\n/* harmony export */   GetConversationHmacKeysResponse: () => (/* binding */ GetConversationHmacKeysResponse),\n/* harmony export */   GetConversationHmacKeysResponse_HmacKeyData: () => (/* binding */ GetConversationHmacKeysResponse_HmacKeyData),\n/* harmony export */   GetConversationHmacKeysResponse_HmacKeys: () => (/* binding */ GetConversationHmacKeysResponse_HmacKeys),\n/* harmony export */   GetConversationHmacKeysResponse_HmacKeysEntry: () => (/* binding */ GetConversationHmacKeysResponse_HmacKeysEntry),\n/* harmony export */   GetConversationsResponse: () => (/* binding */ GetConversationsResponse),\n/* harmony export */   GetKeystoreStatusRequest: () => (/* binding */ GetKeystoreStatusRequest),\n/* harmony export */   GetKeystoreStatusResponse: () => (/* binding */ GetKeystoreStatusResponse),\n/* harmony export */   GetKeystoreStatusResponse_KeystoreStatus: () => (/* binding */ GetKeystoreStatusResponse_KeystoreStatus),\n/* harmony export */   GetPrivatePreferencesTopicIdentifierResponse: () => (/* binding */ GetPrivatePreferencesTopicIdentifierResponse),\n/* harmony export */   GetRefreshJobRequest: () => (/* binding */ GetRefreshJobRequest),\n/* harmony export */   GetRefreshJobResponse: () => (/* binding */ GetRefreshJobResponse),\n/* harmony export */   InitKeystoreRequest: () => (/* binding */ InitKeystoreRequest),\n/* harmony export */   InitKeystoreResponse: () => (/* binding */ InitKeystoreResponse),\n/* harmony export */   JobType: () => (/* binding */ JobType),\n/* harmony export */   KeystoreError: () => (/* binding */ KeystoreError),\n/* harmony export */   SaveInvitesRequest: () => (/* binding */ SaveInvitesRequest),\n/* harmony export */   SaveInvitesRequest_Request: () => (/* binding */ SaveInvitesRequest_Request),\n/* harmony export */   SaveInvitesResponse: () => (/* binding */ SaveInvitesResponse),\n/* harmony export */   SaveInvitesResponse_Response: () => (/* binding */ SaveInvitesResponse_Response),\n/* harmony export */   SaveInvitesResponse_Response_Success: () => (/* binding */ SaveInvitesResponse_Response_Success),\n/* harmony export */   SaveV1ConversationsRequest: () => (/* binding */ SaveV1ConversationsRequest),\n/* harmony export */   SaveV1ConversationsResponse: () => (/* binding */ SaveV1ConversationsResponse),\n/* harmony export */   SelfDecryptRequest: () => (/* binding */ SelfDecryptRequest),\n/* harmony export */   SelfDecryptRequest_Request: () => (/* binding */ SelfDecryptRequest_Request),\n/* harmony export */   SelfEncryptRequest: () => (/* binding */ SelfEncryptRequest),\n/* harmony export */   SelfEncryptRequest_Request: () => (/* binding */ SelfEncryptRequest_Request),\n/* harmony export */   SelfEncryptResponse: () => (/* binding */ SelfEncryptResponse),\n/* harmony export */   SelfEncryptResponse_Response: () => (/* binding */ SelfEncryptResponse_Response),\n/* harmony export */   SelfEncryptResponse_Response_Success: () => (/* binding */ SelfEncryptResponse_Response_Success),\n/* harmony export */   SetRefeshJobRequest: () => (/* binding */ SetRefeshJobRequest),\n/* harmony export */   SetRefreshJobResponse: () => (/* binding */ SetRefreshJobResponse),\n/* harmony export */   SignDigestRequest: () => (/* binding */ SignDigestRequest),\n/* harmony export */   TopicMap: () => (/* binding */ TopicMap),\n/* harmony export */   TopicMap_TopicData: () => (/* binding */ TopicMap_TopicData),\n/* harmony export */   TopicMap_TopicsEntry: () => (/* binding */ TopicMap_TopicsEntry),\n/* harmony export */   errorCodeFromJSON: () => (/* binding */ errorCodeFromJSON),\n/* harmony export */   errorCodeToJSON: () => (/* binding */ errorCodeToJSON),\n/* harmony export */   getKeystoreStatusResponse_KeystoreStatusFromJSON: () => (/* binding */ getKeystoreStatusResponse_KeystoreStatusFromJSON),\n/* harmony export */   getKeystoreStatusResponse_KeystoreStatusToJSON: () => (/* binding */ getKeystoreStatusResponse_KeystoreStatusToJSON),\n/* harmony export */   jobTypeFromJSON: () => (/* binding */ jobTypeFromJSON),\n/* harmony export */   jobTypeToJSON: () => (/* binding */ jobTypeToJSON),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../message_contents/ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../message_contents/public_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../message_contents/invitation.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js\");\n/* harmony import */ var _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../message_contents/conversation_reference.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js\");\n/* harmony import */ var _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../message_contents/private_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6__);\n/* eslint-disable */\n\n\n\n\n\n\n\nconst protobufPackage = \"xmtp.keystore_api.v1\";\n/** Message content encoding structures */\n/** Application-specific error codes for the Keystore API. */\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[ErrorCode[\"ERROR_CODE_UNSPECIFIED\"] = 0] = \"ERROR_CODE_UNSPECIFIED\";\n    ErrorCode[ErrorCode[\"ERROR_CODE_INVALID_INPUT\"] = 1] = \"ERROR_CODE_INVALID_INPUT\";\n    ErrorCode[ErrorCode[\"ERROR_CODE_NO_MATCHING_PREKEY\"] = 2] = \"ERROR_CODE_NO_MATCHING_PREKEY\";\n    ErrorCode[ErrorCode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ErrorCode || (ErrorCode = {}));\nfunction errorCodeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"ERROR_CODE_UNSPECIFIED\":\n            return ErrorCode.ERROR_CODE_UNSPECIFIED;\n        case 1:\n        case \"ERROR_CODE_INVALID_INPUT\":\n            return ErrorCode.ERROR_CODE_INVALID_INPUT;\n        case 2:\n        case \"ERROR_CODE_NO_MATCHING_PREKEY\":\n            return ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ErrorCode.UNRECOGNIZED;\n    }\n}\nfunction errorCodeToJSON(object) {\n    switch (object) {\n        case ErrorCode.ERROR_CODE_UNSPECIFIED:\n            return \"ERROR_CODE_UNSPECIFIED\";\n        case ErrorCode.ERROR_CODE_INVALID_INPUT:\n            return \"ERROR_CODE_INVALID_INPUT\";\n        case ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY:\n            return \"ERROR_CODE_NO_MATCHING_PREKEY\";\n        case ErrorCode.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\n/** JobType is used to specify the type of job the caller would like info on */\nvar JobType;\n(function (JobType) {\n    JobType[JobType[\"JOB_TYPE_UNSPECIFIED\"] = 0] = \"JOB_TYPE_UNSPECIFIED\";\n    JobType[JobType[\"JOB_TYPE_REFRESH_V1\"] = 1] = \"JOB_TYPE_REFRESH_V1\";\n    JobType[JobType[\"JOB_TYPE_REFRESH_V2\"] = 2] = \"JOB_TYPE_REFRESH_V2\";\n    JobType[JobType[\"JOB_TYPE_REFRESH_PPPP\"] = 3] = \"JOB_TYPE_REFRESH_PPPP\";\n    JobType[JobType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(JobType || (JobType = {}));\nfunction jobTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"JOB_TYPE_UNSPECIFIED\":\n            return JobType.JOB_TYPE_UNSPECIFIED;\n        case 1:\n        case \"JOB_TYPE_REFRESH_V1\":\n            return JobType.JOB_TYPE_REFRESH_V1;\n        case 2:\n        case \"JOB_TYPE_REFRESH_V2\":\n            return JobType.JOB_TYPE_REFRESH_V2;\n        case 3:\n        case \"JOB_TYPE_REFRESH_PPPP\":\n            return JobType.JOB_TYPE_REFRESH_PPPP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return JobType.UNRECOGNIZED;\n    }\n}\nfunction jobTypeToJSON(object) {\n    switch (object) {\n        case JobType.JOB_TYPE_UNSPECIFIED:\n            return \"JOB_TYPE_UNSPECIFIED\";\n        case JobType.JOB_TYPE_REFRESH_V1:\n            return \"JOB_TYPE_REFRESH_V1\";\n        case JobType.JOB_TYPE_REFRESH_V2:\n            return \"JOB_TYPE_REFRESH_V2\";\n        case JobType.JOB_TYPE_REFRESH_PPPP:\n            return \"JOB_TYPE_REFRESH_PPPP\";\n        case JobType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\n/** Status of the Keystore for the specified wallet address */\nvar GetKeystoreStatusResponse_KeystoreStatus;\n(function (GetKeystoreStatusResponse_KeystoreStatus) {\n    GetKeystoreStatusResponse_KeystoreStatus[GetKeystoreStatusResponse_KeystoreStatus[\"KEYSTORE_STATUS_UNSPECIFIED\"] = 0] = \"KEYSTORE_STATUS_UNSPECIFIED\";\n    GetKeystoreStatusResponse_KeystoreStatus[GetKeystoreStatusResponse_KeystoreStatus[\"KEYSTORE_STATUS_UNINITIALIZED\"] = 1] = \"KEYSTORE_STATUS_UNINITIALIZED\";\n    GetKeystoreStatusResponse_KeystoreStatus[GetKeystoreStatusResponse_KeystoreStatus[\"KEYSTORE_STATUS_INITIALIZED\"] = 2] = \"KEYSTORE_STATUS_INITIALIZED\";\n    GetKeystoreStatusResponse_KeystoreStatus[GetKeystoreStatusResponse_KeystoreStatus[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(GetKeystoreStatusResponse_KeystoreStatus || (GetKeystoreStatusResponse_KeystoreStatus = {}));\nfunction getKeystoreStatusResponse_KeystoreStatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"KEYSTORE_STATUS_UNSPECIFIED\":\n            return GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_UNSPECIFIED;\n        case 1:\n        case \"KEYSTORE_STATUS_UNINITIALIZED\":\n            return GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_UNINITIALIZED;\n        case 2:\n        case \"KEYSTORE_STATUS_INITIALIZED\":\n            return GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_INITIALIZED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return GetKeystoreStatusResponse_KeystoreStatus.UNRECOGNIZED;\n    }\n}\nfunction getKeystoreStatusResponse_KeystoreStatusToJSON(object) {\n    switch (object) {\n        case GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_UNSPECIFIED:\n            return \"KEYSTORE_STATUS_UNSPECIFIED\";\n        case GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_UNINITIALIZED:\n            return \"KEYSTORE_STATUS_UNINITIALIZED\";\n        case GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_INITIALIZED:\n            return \"KEYSTORE_STATUS_INITIALIZED\";\n        case GetKeystoreStatusResponse_KeystoreStatus.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseKeystoreError() {\n    return { message: \"\", code: 0 };\n}\nconst KeystoreError = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.message !== \"\") {\n            writer.uint32(10).string(message.message);\n        }\n        if (message.code !== 0) {\n            writer.uint32(16).int32(message.code);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseKeystoreError();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                case 2:\n                    message.code = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            message: isSet(object.message) ? String(object.message) : \"\",\n            code: isSet(object.code) ? errorCodeFromJSON(object.code) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.message !== undefined && (obj.message = message.message);\n        message.code !== undefined && (obj.code = errorCodeToJSON(message.code));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseKeystoreError();\n        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : \"\";\n        message.code = (_b = object.code) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction createBaseDecryptV1Request() {\n    return { requests: [] };\n}\nconst DecryptV1Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.requests) {\n            DecryptV1Request_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptV1Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(DecryptV1Request_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => DecryptV1Request_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? DecryptV1Request_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDecryptV1Request();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => DecryptV1Request_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseDecryptV1Request_Request() {\n    return {\n        payload: undefined,\n        peerKeys: undefined,\n        headerBytes: new Uint8Array(),\n        isSender: false,\n    };\n}\nconst DecryptV1Request_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.payload !== undefined) {\n            _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.encode(message.payload, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.peerKeys !== undefined) {\n            _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.encode(message.peerKeys, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(26).bytes(message.headerBytes);\n        }\n        if (message.isSender === true) {\n            writer.uint32(32).bool(message.isSender);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptV1Request_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.peerKeys = _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 4:\n                    message.isSender = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromJSON(object.payload)\n                : undefined,\n            peerKeys: isSet(object.peerKeys)\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.fromJSON(object.peerKeys)\n                : undefined,\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            isSender: isSet(object.isSender) ? Boolean(object.isSender) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = message.payload\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.toJSON(message.payload)\n                : undefined);\n        message.peerKeys !== undefined &&\n            (obj.peerKeys = message.peerKeys\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.toJSON(message.peerKeys)\n                : undefined);\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.isSender !== undefined && (obj.isSender = message.isSender);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDecryptV1Request_Request();\n        message.payload =\n            object.payload !== undefined && object.payload !== null\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromPartial(object.payload)\n                : undefined;\n        message.peerKeys =\n            object.peerKeys !== undefined && object.peerKeys !== null\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.fromPartial(object.peerKeys)\n                : undefined;\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.isSender = (_b = object.isSender) !== null && _b !== void 0 ? _b : false;\n        return message;\n    },\n};\nfunction createBaseDecryptResponse() {\n    return { responses: [] };\n}\nconst DecryptResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.responses) {\n            DecryptResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(DecryptResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => DecryptResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? DecryptResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDecryptResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => DecryptResponse_Response.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseDecryptResponse_Response() {\n    return { result: undefined, error: undefined };\n}\nconst DecryptResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.result !== undefined) {\n            DecryptResponse_Response_Success.encode(message.result, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = DecryptResponse_Response_Success.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            result: isSet(object.result)\n                ? DecryptResponse_Response_Success.fromJSON(object.result)\n                : undefined,\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = message.result\n                ? DecryptResponse_Response_Success.toJSON(message.result)\n                : undefined);\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseDecryptResponse_Response();\n        message.result =\n            object.result !== undefined && object.result !== null\n                ? DecryptResponse_Response_Success.fromPartial(object.result)\n                : undefined;\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseDecryptResponse_Response_Success() {\n    return { decrypted: new Uint8Array() };\n}\nconst DecryptResponse_Response_Success = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.decrypted.length !== 0) {\n            writer.uint32(10).bytes(message.decrypted);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptResponse_Response_Success();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.decrypted = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            decrypted: isSet(object.decrypted)\n                ? bytesFromBase64(object.decrypted)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.decrypted !== undefined &&\n            (obj.decrypted = base64FromBytes(message.decrypted !== undefined ? message.decrypted : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDecryptResponse_Response_Success();\n        message.decrypted = (_a = object.decrypted) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseDecryptV2Request() {\n    return { requests: [] };\n}\nconst DecryptV2Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.requests) {\n            DecryptV2Request_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptV2Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(DecryptV2Request_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => DecryptV2Request_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? DecryptV2Request_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDecryptV2Request();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => DecryptV2Request_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseDecryptV2Request_Request() {\n    return {\n        payload: undefined,\n        headerBytes: new Uint8Array(),\n        contentTopic: \"\",\n    };\n}\nconst DecryptV2Request_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.payload !== undefined) {\n            _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.encode(message.payload, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(18).bytes(message.headerBytes);\n        }\n        if (message.contentTopic !== \"\") {\n            writer.uint32(26).string(message.contentTopic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptV2Request_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 3:\n                    message.contentTopic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromJSON(object.payload)\n                : undefined,\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            contentTopic: isSet(object.contentTopic)\n                ? String(object.contentTopic)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = message.payload\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.toJSON(message.payload)\n                : undefined);\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.contentTopic !== undefined &&\n            (obj.contentTopic = message.contentTopic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDecryptV2Request_Request();\n        message.payload =\n            object.payload !== undefined && object.payload !== null\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromPartial(object.payload)\n                : undefined;\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.contentTopic = (_b = object.contentTopic) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseEncryptV1Request() {\n    return { requests: [] };\n}\nconst EncryptV1Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.requests) {\n            EncryptV1Request_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptV1Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(EncryptV1Request_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => EncryptV1Request_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? EncryptV1Request_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptV1Request();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => EncryptV1Request_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseEncryptV1Request_Request() {\n    return {\n        recipient: undefined,\n        payload: new Uint8Array(),\n        headerBytes: new Uint8Array(),\n    };\n}\nconst EncryptV1Request_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.recipient !== undefined) {\n            _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.encode(message.recipient, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(18).bytes(message.payload);\n        }\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(26).bytes(message.headerBytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptV1Request_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.recipient = _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.payload = reader.bytes();\n                    break;\n                case 3:\n                    message.headerBytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            recipient: isSet(object.recipient)\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.fromJSON(object.recipient)\n                : undefined,\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.recipient !== undefined &&\n            (obj.recipient = message.recipient\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.toJSON(message.recipient)\n                : undefined);\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseEncryptV1Request_Request();\n        message.recipient =\n            object.recipient !== undefined && object.recipient !== null\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.fromPartial(object.recipient)\n                : undefined;\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.headerBytes = (_b = object.headerBytes) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseEncryptResponse() {\n    return { responses: [] };\n}\nconst EncryptResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.responses) {\n            EncryptResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(EncryptResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => EncryptResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? EncryptResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => EncryptResponse_Response.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseEncryptResponse_Response() {\n    return { result: undefined, error: undefined };\n}\nconst EncryptResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.result !== undefined) {\n            EncryptResponse_Response_Success.encode(message.result, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = EncryptResponse_Response_Success.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            result: isSet(object.result)\n                ? EncryptResponse_Response_Success.fromJSON(object.result)\n                : undefined,\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = message.result\n                ? EncryptResponse_Response_Success.toJSON(message.result)\n                : undefined);\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseEncryptResponse_Response();\n        message.result =\n            object.result !== undefined && object.result !== null\n                ? EncryptResponse_Response_Success.fromPartial(object.result)\n                : undefined;\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseEncryptResponse_Response_Success() {\n    return { encrypted: undefined, senderHmac: new Uint8Array() };\n}\nconst EncryptResponse_Response_Success = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.encrypted !== undefined) {\n            _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.encode(message.encrypted, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.senderHmac.length !== 0) {\n            writer.uint32(18).bytes(message.senderHmac);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptResponse_Response_Success();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.encrypted = _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.senderHmac = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            encrypted: isSet(object.encrypted)\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromJSON(object.encrypted)\n                : undefined,\n            senderHmac: isSet(object.senderHmac)\n                ? bytesFromBase64(object.senderHmac)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.encrypted !== undefined &&\n            (obj.encrypted = message.encrypted\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.toJSON(message.encrypted)\n                : undefined);\n        message.senderHmac !== undefined &&\n            (obj.senderHmac = base64FromBytes(message.senderHmac !== undefined ? message.senderHmac : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptResponse_Response_Success();\n        message.encrypted =\n            object.encrypted !== undefined && object.encrypted !== null\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromPartial(object.encrypted)\n                : undefined;\n        message.senderHmac = (_a = object.senderHmac) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseEncryptV2Request() {\n    return { requests: [] };\n}\nconst EncryptV2Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.requests) {\n            EncryptV2Request_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptV2Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(EncryptV2Request_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => EncryptV2Request_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? EncryptV2Request_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptV2Request();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => EncryptV2Request_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseEncryptV2Request_Request() {\n    return {\n        payload: new Uint8Array(),\n        headerBytes: new Uint8Array(),\n        contentTopic: \"\",\n    };\n}\nconst EncryptV2Request_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(18).bytes(message.headerBytes);\n        }\n        if (message.contentTopic !== \"\") {\n            writer.uint32(26).string(message.contentTopic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptV2Request_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                case 2:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 3:\n                    message.contentTopic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            contentTopic: isSet(object.contentTopic)\n                ? String(object.contentTopic)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.contentTopic !== undefined &&\n            (obj.contentTopic = message.contentTopic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseEncryptV2Request_Request();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.headerBytes = (_b = object.headerBytes) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.contentTopic = (_c = object.contentTopic) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseSelfEncryptRequest() {\n    return { requests: [] };\n}\nconst SelfEncryptRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.requests) {\n            SelfEncryptRequest_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(SelfEncryptRequest_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => SelfEncryptRequest_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? SelfEncryptRequest_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfEncryptRequest();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => SelfEncryptRequest_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseSelfEncryptRequest_Request() {\n    return { payload: new Uint8Array() };\n}\nconst SelfEncryptRequest_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptRequest_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfEncryptRequest_Request();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSelfEncryptResponse() {\n    return { responses: [] };\n}\nconst SelfEncryptResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.responses) {\n            SelfEncryptResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(SelfEncryptResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => SelfEncryptResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? SelfEncryptResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfEncryptResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => SelfEncryptResponse_Response.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSelfEncryptResponse_Response() {\n    return { result: undefined, error: undefined };\n}\nconst SelfEncryptResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.result !== undefined) {\n            SelfEncryptResponse_Response_Success.encode(message.result, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = SelfEncryptResponse_Response_Success.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            result: isSet(object.result)\n                ? SelfEncryptResponse_Response_Success.fromJSON(object.result)\n                : undefined,\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = message.result\n                ? SelfEncryptResponse_Response_Success.toJSON(message.result)\n                : undefined);\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSelfEncryptResponse_Response();\n        message.result =\n            object.result !== undefined && object.result !== null\n                ? SelfEncryptResponse_Response_Success.fromPartial(object.result)\n                : undefined;\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSelfEncryptResponse_Response_Success() {\n    return { encrypted: new Uint8Array() };\n}\nconst SelfEncryptResponse_Response_Success = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.encrypted.length !== 0) {\n            writer.uint32(10).bytes(message.encrypted);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptResponse_Response_Success();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.encrypted = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            encrypted: isSet(object.encrypted)\n                ? bytesFromBase64(object.encrypted)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.encrypted !== undefined &&\n            (obj.encrypted = base64FromBytes(message.encrypted !== undefined ? message.encrypted : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfEncryptResponse_Response_Success();\n        message.encrypted = (_a = object.encrypted) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSelfDecryptRequest() {\n    return { requests: [] };\n}\nconst SelfDecryptRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.requests) {\n            SelfDecryptRequest_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfDecryptRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(SelfDecryptRequest_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => SelfDecryptRequest_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? SelfDecryptRequest_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfDecryptRequest();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => SelfDecryptRequest_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseSelfDecryptRequest_Request() {\n    return { payload: new Uint8Array() };\n}\nconst SelfDecryptRequest_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfDecryptRequest_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfDecryptRequest_Request();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseGetPrivatePreferencesTopicIdentifierResponse() {\n    return { identifier: \"\" };\n}\nconst GetPrivatePreferencesTopicIdentifierResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.identifier !== \"\") {\n            writer.uint32(10).string(message.identifier);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetPrivatePreferencesTopicIdentifierResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identifier = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identifier: isSet(object.identifier) ? String(object.identifier) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identifier !== undefined && (obj.identifier = message.identifier);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetPrivatePreferencesTopicIdentifierResponse();\n        message.identifier = (_a = object.identifier) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseCreateInviteRequest() {\n    return {\n        context: undefined,\n        recipient: undefined,\n        createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        consentProof: undefined,\n    };\n}\nconst CreateInviteRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.context !== undefined) {\n            _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.encode(message.context, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.recipient !== undefined) {\n            _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.encode(message.recipient, writer.uint32(18).fork()).ldelim();\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(24).uint64(message.createdNs);\n        }\n        if (message.consentProof !== undefined) {\n            _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.encode(message.consentProof, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateInviteRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.context = _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.recipient = _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 4:\n                    message.consentProof = _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            context: isSet(object.context)\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.fromJSON(object.context)\n                : undefined,\n            recipient: isSet(object.recipient)\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.fromJSON(object.recipient)\n                : undefined,\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            consentProof: isSet(object.consentProof)\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.fromJSON(object.consentProof)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.context !== undefined &&\n            (obj.context = message.context\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.toJSON(message.context)\n                : undefined);\n        message.recipient !== undefined &&\n            (obj.recipient = message.recipient\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.toJSON(message.recipient)\n                : undefined);\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.consentProof !== undefined &&\n            (obj.consentProof = message.consentProof\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.toJSON(message.consentProof)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseCreateInviteRequest();\n        message.context =\n            object.context !== undefined && object.context !== null\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.fromPartial(object.context)\n                : undefined;\n        message.recipient =\n            object.recipient !== undefined && object.recipient !== null\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.fromPartial(object.recipient)\n                : undefined;\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.consentProof =\n            object.consentProof !== undefined && object.consentProof !== null\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.fromPartial(object.consentProof)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseCreateInviteResponse() {\n    return { conversation: undefined, payload: new Uint8Array() };\n}\nconst CreateInviteResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.conversation !== undefined) {\n            _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.encode(message.conversation, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(18).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateInviteResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversation = _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversation: isSet(object.conversation)\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromJSON(object.conversation)\n                : undefined,\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.conversation !== undefined &&\n            (obj.conversation = message.conversation\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.toJSON(message.conversation)\n                : undefined);\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseCreateInviteResponse();\n        message.conversation =\n            object.conversation !== undefined && object.conversation !== null\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromPartial(object.conversation)\n                : undefined;\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSaveInvitesRequest() {\n    return { requests: [] };\n}\nconst SaveInvitesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.requests) {\n            SaveInvitesRequest_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(SaveInvitesRequest_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => SaveInvitesRequest_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? SaveInvitesRequest_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSaveInvitesRequest();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => SaveInvitesRequest_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseSaveInvitesRequest_Request() {\n    return {\n        contentTopic: \"\",\n        timestampNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        payload: new Uint8Array(),\n    };\n}\nconst SaveInvitesRequest_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.contentTopic !== \"\") {\n            writer.uint32(10).string(message.contentTopic);\n        }\n        if (!message.timestampNs.isZero()) {\n            writer.uint32(16).uint64(message.timestampNs);\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(26).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesRequest_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.contentTopic = reader.string();\n                    break;\n                case 2:\n                    message.timestampNs = reader.uint64();\n                    break;\n                case 3:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            contentTopic: isSet(object.contentTopic)\n                ? String(object.contentTopic)\n                : \"\",\n            timestampNs: isSet(object.timestampNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.contentTopic !== undefined &&\n            (obj.contentTopic = message.contentTopic);\n        message.timestampNs !== undefined &&\n            (obj.timestampNs = (message.timestampNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSaveInvitesRequest_Request();\n        message.contentTopic = (_a = object.contentTopic) !== null && _a !== void 0 ? _a : \"\";\n        message.timestampNs =\n            object.timestampNs !== undefined && object.timestampNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.payload = (_b = object.payload) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSaveInvitesResponse() {\n    return { responses: [] };\n}\nconst SaveInvitesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.responses) {\n            SaveInvitesResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(SaveInvitesResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => SaveInvitesResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? SaveInvitesResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSaveInvitesResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => SaveInvitesResponse_Response.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSaveInvitesResponse_Response() {\n    return { result: undefined, error: undefined };\n}\nconst SaveInvitesResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.result !== undefined) {\n            SaveInvitesResponse_Response_Success.encode(message.result, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = SaveInvitesResponse_Response_Success.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            result: isSet(object.result)\n                ? SaveInvitesResponse_Response_Success.fromJSON(object.result)\n                : undefined,\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = message.result\n                ? SaveInvitesResponse_Response_Success.toJSON(message.result)\n                : undefined);\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSaveInvitesResponse_Response();\n        message.result =\n            object.result !== undefined && object.result !== null\n                ? SaveInvitesResponse_Response_Success.fromPartial(object.result)\n                : undefined;\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSaveInvitesResponse_Response_Success() {\n    return { conversation: undefined };\n}\nconst SaveInvitesResponse_Response_Success = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.conversation !== undefined) {\n            _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.encode(message.conversation, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesResponse_Response_Success();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversation = _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversation: isSet(object.conversation)\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromJSON(object.conversation)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.conversation !== undefined &&\n            (obj.conversation = message.conversation\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.toJSON(message.conversation)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSaveInvitesResponse_Response_Success();\n        message.conversation =\n            object.conversation !== undefined && object.conversation !== null\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromPartial(object.conversation)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseCreateAuthTokenRequest() {\n    return { timestampNs: undefined };\n}\nconst CreateAuthTokenRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.timestampNs !== undefined) {\n            writer.uint32(8).uint64(message.timestampNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateAuthTokenRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.timestampNs = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            timestampNs: isSet(object.timestampNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.timestampNs !== undefined &&\n            (obj.timestampNs = (message.timestampNs || undefined).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseCreateAuthTokenRequest();\n        message.timestampNs =\n            object.timestampNs !== undefined && object.timestampNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSaveV1ConversationsRequest() {\n    return { conversations: [] };\n}\nconst SaveV1ConversationsRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.conversations) {\n            _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveV1ConversationsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversations.push(_message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversations: Array.isArray(object === null || object === void 0 ? void 0 : object.conversations)\n                ? object.conversations.map((e) => _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.conversations) {\n            obj.conversations = message.conversations.map((e) => e ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.toJSON(e) : undefined);\n        }\n        else {\n            obj.conversations = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSaveV1ConversationsRequest();\n        message.conversations =\n            ((_a = object.conversations) === null || _a === void 0 ? void 0 : _a.map((e) => _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseSaveV1ConversationsResponse() {\n    return {};\n}\nconst SaveV1ConversationsResponse = {\n    encode(_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveV1ConversationsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseSaveV1ConversationsResponse();\n        return message;\n    },\n};\nfunction createBaseGetConversationsResponse() {\n    return { conversations: [] };\n}\nconst GetConversationsResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.conversations) {\n            _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversations.push(_message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversations: Array.isArray(object === null || object === void 0 ? void 0 : object.conversations)\n                ? object.conversations.map((e) => _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.conversations) {\n            obj.conversations = message.conversations.map((e) => e ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.toJSON(e) : undefined);\n        }\n        else {\n            obj.conversations = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationsResponse();\n        message.conversations =\n            ((_a = object.conversations) === null || _a === void 0 ? void 0 : _a.map((e) => _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseGetKeystoreStatusRequest() {\n    return { walletAddress: \"\" };\n}\nconst GetKeystoreStatusRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.walletAddress !== \"\") {\n            writer.uint32(10).string(message.walletAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetKeystoreStatusRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletAddress: isSet(object.walletAddress)\n                ? String(object.walletAddress)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.walletAddress !== undefined &&\n            (obj.walletAddress = message.walletAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetKeystoreStatusRequest();\n        message.walletAddress = (_a = object.walletAddress) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseGetKeystoreStatusResponse() {\n    return { status: 0 };\n}\nconst GetKeystoreStatusResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.status !== 0) {\n            writer.uint32(8).int32(message.status);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetKeystoreStatusResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            status: isSet(object.status)\n                ? getKeystoreStatusResponse_KeystoreStatusFromJSON(object.status)\n                : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.status !== undefined &&\n            (obj.status = getKeystoreStatusResponse_KeystoreStatusToJSON(message.status));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetKeystoreStatusResponse();\n        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    },\n};\nfunction createBaseInitKeystoreRequest() {\n    return { v1: undefined };\n}\nconst InitKeystoreRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInitKeystoreRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseInitKeystoreRequest();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseInitKeystoreResponse() {\n    return { error: undefined };\n}\nconst InitKeystoreResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInitKeystoreResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseInitKeystoreResponse();\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignDigestRequest() {\n    return {\n        digest: new Uint8Array(),\n        identityKey: undefined,\n        prekeyIndex: undefined,\n    };\n}\nconst SignDigestRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.digest.length !== 0) {\n            writer.uint32(10).bytes(message.digest);\n        }\n        if (message.identityKey !== undefined) {\n            writer.uint32(16).bool(message.identityKey);\n        }\n        if (message.prekeyIndex !== undefined) {\n            writer.uint32(24).uint32(message.prekeyIndex);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignDigestRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.digest = reader.bytes();\n                    break;\n                case 2:\n                    message.identityKey = reader.bool();\n                    break;\n                case 3:\n                    message.prekeyIndex = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            digest: isSet(object.digest)\n                ? bytesFromBase64(object.digest)\n                : new Uint8Array(),\n            identityKey: isSet(object.identityKey)\n                ? Boolean(object.identityKey)\n                : undefined,\n            prekeyIndex: isSet(object.prekeyIndex)\n                ? Number(object.prekeyIndex)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.digest !== undefined &&\n            (obj.digest = base64FromBytes(message.digest !== undefined ? message.digest : new Uint8Array()));\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey);\n        message.prekeyIndex !== undefined &&\n            (obj.prekeyIndex = Math.round(message.prekeyIndex));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseSignDigestRequest();\n        message.digest = (_a = object.digest) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.identityKey = (_b = object.identityKey) !== null && _b !== void 0 ? _b : undefined;\n        message.prekeyIndex = (_c = object.prekeyIndex) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    },\n};\nfunction createBaseGetRefreshJobRequest() {\n    return { jobType: 0 };\n}\nconst GetRefreshJobRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.jobType !== 0) {\n            writer.uint32(8).int32(message.jobType);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetRefreshJobRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.jobType = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            jobType: isSet(object.jobType) ? jobTypeFromJSON(object.jobType) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.jobType !== undefined &&\n            (obj.jobType = jobTypeToJSON(message.jobType));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetRefreshJobRequest();\n        message.jobType = (_a = object.jobType) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    },\n};\nfunction createBaseGetRefreshJobResponse() {\n    return { lastRunNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO };\n}\nconst GetRefreshJobResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (!message.lastRunNs.isZero()) {\n            writer.uint32(8).int64(message.lastRunNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetRefreshJobResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.lastRunNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            lastRunNs: isSet(object.lastRunNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.lastRunNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.lastRunNs !== undefined &&\n            (obj.lastRunNs = (message.lastRunNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseGetRefreshJobResponse();\n        message.lastRunNs =\n            object.lastRunNs !== undefined && object.lastRunNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.lastRunNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO;\n        return message;\n    },\n};\nfunction createBaseSetRefeshJobRequest() {\n    return { jobType: 0, lastRunNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO };\n}\nconst SetRefeshJobRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.jobType !== 0) {\n            writer.uint32(8).int32(message.jobType);\n        }\n        if (!message.lastRunNs.isZero()) {\n            writer.uint32(16).int64(message.lastRunNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSetRefeshJobRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.jobType = reader.int32();\n                    break;\n                case 2:\n                    message.lastRunNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            jobType: isSet(object.jobType) ? jobTypeFromJSON(object.jobType) : 0,\n            lastRunNs: isSet(object.lastRunNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.lastRunNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.jobType !== undefined &&\n            (obj.jobType = jobTypeToJSON(message.jobType));\n        message.lastRunNs !== undefined &&\n            (obj.lastRunNs = (message.lastRunNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSetRefeshJobRequest();\n        message.jobType = (_a = object.jobType) !== null && _a !== void 0 ? _a : 0;\n        message.lastRunNs =\n            object.lastRunNs !== undefined && object.lastRunNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.lastRunNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO;\n        return message;\n    },\n};\nfunction createBaseSetRefreshJobResponse() {\n    return {};\n}\nconst SetRefreshJobResponse = {\n    encode(_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSetRefreshJobResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseSetRefreshJobResponse();\n        return message;\n    },\n};\nfunction createBaseTopicMap() {\n    return { topics: {} };\n}\nconst TopicMap = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        Object.entries(message.topics).forEach(([key, value]) => {\n            TopicMap_TopicsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTopicMap();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    const entry1 = TopicMap_TopicsEntry.decode(reader, reader.uint32());\n                    if (entry1.value !== undefined) {\n                        message.topics[entry1.key] = entry1.value;\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            topics: isObject(object.topics)\n                ? Object.entries(object.topics).reduce((acc, [key, value]) => {\n                    acc[key] = TopicMap_TopicData.fromJSON(value);\n                    return acc;\n                }, {})\n                : {},\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        obj.topics = {};\n        if (message.topics) {\n            Object.entries(message.topics).forEach(([k, v]) => {\n                obj.topics[k] = TopicMap_TopicData.toJSON(v);\n            });\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseTopicMap();\n        message.topics = Object.entries((_a = object.topics) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = TopicMap_TopicData.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    },\n};\nfunction createBaseTopicMap_TopicData() {\n    return { createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, peerAddress: \"\", invitation: undefined };\n}\nconst TopicMap_TopicData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (!message.createdNs.isZero()) {\n            writer.uint32(8).uint64(message.createdNs);\n        }\n        if (message.peerAddress !== \"\") {\n            writer.uint32(18).string(message.peerAddress);\n        }\n        if (message.invitation !== undefined) {\n            _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.encode(message.invitation, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTopicMap_TopicData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 2:\n                    message.peerAddress = reader.string();\n                    break;\n                case 3:\n                    message.invitation = _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            peerAddress: isSet(object.peerAddress) ? String(object.peerAddress) : \"\",\n            invitation: isSet(object.invitation)\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.fromJSON(object.invitation)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.peerAddress !== undefined &&\n            (obj.peerAddress = message.peerAddress);\n        message.invitation !== undefined &&\n            (obj.invitation = message.invitation\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.toJSON(message.invitation)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseTopicMap_TopicData();\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.peerAddress = (_a = object.peerAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.invitation =\n            object.invitation !== undefined && object.invitation !== null\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.fromPartial(object.invitation)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseTopicMap_TopicsEntry() {\n    return { key: \"\", value: undefined };\n}\nconst TopicMap_TopicsEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            TopicMap_TopicData.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTopicMap_TopicsEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = TopicMap_TopicData.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value)\n                ? TopicMap_TopicData.fromJSON(object.value)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined &&\n            (obj.value = message.value\n                ? TopicMap_TopicData.toJSON(message.value)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseTopicMap_TopicsEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value =\n            object.value !== undefined && object.value !== null\n                ? TopicMap_TopicData.fromPartial(object.value)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysRequest() {\n    return { topics: [] };\n}\nconst GetConversationHmacKeysRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.topics) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.topics.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            topics: Array.isArray(object === null || object === void 0 ? void 0 : object.topics)\n                ? object.topics.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.topics) {\n            obj.topics = message.topics.map((e) => e);\n        }\n        else {\n            obj.topics = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationHmacKeysRequest();\n        message.topics = ((_a = object.topics) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysResponse() {\n    return { hmacKeys: {} };\n}\nconst GetConversationHmacKeysResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        Object.entries(message.hmacKeys).forEach(([key, value]) => {\n            GetConversationHmacKeysResponse_HmacKeysEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    const entry1 = GetConversationHmacKeysResponse_HmacKeysEntry.decode(reader, reader.uint32());\n                    if (entry1.value !== undefined) {\n                        message.hmacKeys[entry1.key] = entry1.value;\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            hmacKeys: isObject(object.hmacKeys)\n                ? Object.entries(object.hmacKeys).reduce((acc, [key, value]) => {\n                    acc[key] = GetConversationHmacKeysResponse_HmacKeys.fromJSON(value);\n                    return acc;\n                }, {})\n                : {},\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        obj.hmacKeys = {};\n        if (message.hmacKeys) {\n            Object.entries(message.hmacKeys).forEach(([k, v]) => {\n                obj.hmacKeys[k] = GetConversationHmacKeysResponse_HmacKeys.toJSON(v);\n            });\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationHmacKeysResponse();\n        message.hmacKeys = Object.entries((_a = object.hmacKeys) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = GetConversationHmacKeysResponse_HmacKeys.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysResponse_HmacKeyData() {\n    return { thirtyDayPeriodsSinceEpoch: 0, hmacKey: new Uint8Array() };\n}\nconst GetConversationHmacKeysResponse_HmacKeyData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.thirtyDayPeriodsSinceEpoch !== 0) {\n            writer.uint32(8).int32(message.thirtyDayPeriodsSinceEpoch);\n        }\n        if (message.hmacKey.length !== 0) {\n            writer.uint32(18).bytes(message.hmacKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeyData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.thirtyDayPeriodsSinceEpoch = reader.int32();\n                    break;\n                case 2:\n                    message.hmacKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            thirtyDayPeriodsSinceEpoch: isSet(object.thirtyDayPeriodsSinceEpoch)\n                ? Number(object.thirtyDayPeriodsSinceEpoch)\n                : 0,\n            hmacKey: isSet(object.hmacKey)\n                ? bytesFromBase64(object.hmacKey)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.thirtyDayPeriodsSinceEpoch !== undefined &&\n            (obj.thirtyDayPeriodsSinceEpoch = Math.round(message.thirtyDayPeriodsSinceEpoch));\n        message.hmacKey !== undefined &&\n            (obj.hmacKey = base64FromBytes(message.hmacKey !== undefined ? message.hmacKey : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeyData();\n        message.thirtyDayPeriodsSinceEpoch = (_a = object.thirtyDayPeriodsSinceEpoch) !== null && _a !== void 0 ? _a : 0;\n        message.hmacKey = (_b = object.hmacKey) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysResponse_HmacKeys() {\n    return { values: [] };\n}\nconst GetConversationHmacKeysResponse_HmacKeys = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        for (const v of message.values) {\n            GetConversationHmacKeysResponse_HmacKeyData.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeys();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.values.push(GetConversationHmacKeysResponse_HmacKeyData.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            values: Array.isArray(object === null || object === void 0 ? void 0 : object.values)\n                ? object.values.map((e) => GetConversationHmacKeysResponse_HmacKeyData.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.values) {\n            obj.values = message.values.map((e) => e ? GetConversationHmacKeysResponse_HmacKeyData.toJSON(e) : undefined);\n        }\n        else {\n            obj.values = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeys();\n        message.values =\n            ((_a = object.values) === null || _a === void 0 ? void 0 : _a.map((e) => GetConversationHmacKeysResponse_HmacKeyData.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysResponse_HmacKeysEntry() {\n    return { key: \"\", value: undefined };\n}\nconst GetConversationHmacKeysResponse_HmacKeysEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            GetConversationHmacKeysResponse_HmacKeys.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeysEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = GetConversationHmacKeysResponse_HmacKeys.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value)\n                ? GetConversationHmacKeysResponse_HmacKeys.fromJSON(object.value)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined &&\n            (obj.value = message.value\n                ? GetConversationHmacKeysResponse_HmacKeys.toJSON(message.value)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeysEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value =\n            object.value !== undefined && object.value !== null\n                ? GetConversationHmacKeysResponse_HmacKeys.fromPartial(object.value)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_6___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=keystore.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/keystore_api/v1/keystore.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/authn.pb.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/authn.pb.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthData: () => (/* binding */ AuthData),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../message_contents/public_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../message_contents/signature.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_api.v1\";\nfunction createBaseToken() {\n    return {\n        identityKey: undefined,\n        authDataBytes: new Uint8Array(),\n        authDataSignature: undefined,\n    };\n}\nconst Token = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.authDataBytes.length !== 0) {\n            writer.uint32(18).bytes(message.authDataBytes);\n        }\n        if (message.authDataSignature !== undefined) {\n            _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.encode(message.authDataSignature, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseToken();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.authDataBytes = reader.bytes();\n                    break;\n                case 3:\n                    message.authDataSignature = _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.fromJSON(object.identityKey)\n                : undefined,\n            authDataBytes: isSet(object.authDataBytes)\n                ? bytesFromBase64(object.authDataBytes)\n                : new Uint8Array(),\n            authDataSignature: isSet(object.authDataSignature)\n                ? _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.fromJSON(object.authDataSignature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.toJSON(message.identityKey)\n                : undefined);\n        message.authDataBytes !== undefined &&\n            (obj.authDataBytes = base64FromBytes(message.authDataBytes !== undefined\n                ? message.authDataBytes\n                : new Uint8Array()));\n        message.authDataSignature !== undefined &&\n            (obj.authDataSignature = message.authDataSignature\n                ? _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.toJSON(message.authDataSignature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseToken();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.fromPartial(object.identityKey)\n                : undefined;\n        message.authDataBytes = (_a = object.authDataBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.authDataSignature =\n            object.authDataSignature !== undefined &&\n                object.authDataSignature !== null\n                ? _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.fromPartial(object.authDataSignature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseAuthData() {\n    return { walletAddr: \"\", createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst AuthData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.walletAddr !== \"\") {\n            writer.uint32(10).string(message.walletAddr);\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(16).uint64(message.createdNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAuthData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletAddr = reader.string();\n                    break;\n                case 2:\n                    message.createdNs = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletAddr: isSet(object.walletAddr) ? String(object.walletAddr) : \"\",\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.walletAddr !== undefined && (obj.walletAddr = message.walletAddr);\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseAuthData();\n        message.walletAddr = (_a = object.walletAddr) !== null && _a !== void 0 ? _a : \"\";\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=authn.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/authn.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/message_api.pb.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/message_api.pb.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessageApi: () => (/* binding */ MessageApi),\n/* harmony export */   SortDirection: () => (/* binding */ SortDirection)\n/* harmony export */ });\n/* harmony import */ var _fetch_pb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../fetch.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js\");\n/* eslint-disable */\n// @ts-nocheck\n/*\n* This file is a generated Typescript file for GRPC Gateway, DO NOT MODIFY\n*/\n\nvar SortDirection;\n(function (SortDirection) {\n    SortDirection[\"SORT_DIRECTION_UNSPECIFIED\"] = \"SORT_DIRECTION_UNSPECIFIED\";\n    SortDirection[\"SORT_DIRECTION_ASCENDING\"] = \"SORT_DIRECTION_ASCENDING\";\n    SortDirection[\"SORT_DIRECTION_DESCENDING\"] = \"SORT_DIRECTION_DESCENDING\";\n})(SortDirection || (SortDirection = {}));\nclass MessageApi {\n    static Publish(req, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchReq(`/message/v1/publish`, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n    static Subscribe(req, entityNotifier, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchStreamingRequest(`/message/v1/subscribe`, entityNotifier, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n    static SubscribeAll(req, entityNotifier, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchStreamingRequest(`/message/v1/subscribe-all`, entityNotifier, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n    static Query(req, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchReq(`/message/v1/query`, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n    static BatchQuery(req, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchReq(`/message/v1/batch-query`, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n}\n//# sourceMappingURL=message_api.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29uc2VudC1wcm9vZi1zaWduYXR1cmUvbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL21lc3NhZ2VfYXBpL3YxL21lc3NhZ2VfYXBpLnBiLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDcUM7QUFDOUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0NBQXNDO0FBQ2hDO0FBQ1A7QUFDQSxlQUFlLCtDQUFXLHNEQUFzRCxjQUFjLDBDQUEwQywrQ0FBVyxHQUFHO0FBQ3RKO0FBQ0E7QUFDQSxlQUFlLDREQUF3Qix3RUFBd0UsY0FBYywwQ0FBMEMsK0NBQVcsR0FBRztBQUNyTDtBQUNBO0FBQ0EsZUFBZSw0REFBd0IsNEVBQTRFLGNBQWMsMENBQTBDLCtDQUFXLEdBQUc7QUFDekw7QUFDQTtBQUNBLGVBQWUsK0NBQVcsb0RBQW9ELGNBQWMsMENBQTBDLCtDQUFXLEdBQUc7QUFDcEo7QUFDQTtBQUNBLGVBQWUsK0NBQVcsMERBQTBELGNBQWMsMENBQTBDLCtDQUFXLEdBQUc7QUFDMUo7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29uc2VudC1wcm9vZi1zaWduYXR1cmUvbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL21lc3NhZ2VfYXBpL3YxL21lc3NhZ2VfYXBpLnBiLmpzPzFiZWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG4vKlxuKiBUaGlzIGZpbGUgaXMgYSBnZW5lcmF0ZWQgVHlwZXNjcmlwdCBmaWxlIGZvciBHUlBDIEdhdGV3YXksIERPIE5PVCBNT0RJRllcbiovXG5pbXBvcnQgKiBhcyBmbSBmcm9tIFwiLi4vLi4vZmV0Y2gucGJcIjtcbmV4cG9ydCB2YXIgU29ydERpcmVjdGlvbjtcbihmdW5jdGlvbiAoU29ydERpcmVjdGlvbikge1xuICAgIFNvcnREaXJlY3Rpb25bXCJTT1JUX0RJUkVDVElPTl9VTlNQRUNJRklFRFwiXSA9IFwiU09SVF9ESVJFQ1RJT05fVU5TUEVDSUZJRURcIjtcbiAgICBTb3J0RGlyZWN0aW9uW1wiU09SVF9ESVJFQ1RJT05fQVNDRU5ESU5HXCJdID0gXCJTT1JUX0RJUkVDVElPTl9BU0NFTkRJTkdcIjtcbiAgICBTb3J0RGlyZWN0aW9uW1wiU09SVF9ESVJFQ1RJT05fREVTQ0VORElOR1wiXSA9IFwiU09SVF9ESVJFQ1RJT05fREVTQ0VORElOR1wiO1xufSkoU29ydERpcmVjdGlvbiB8fCAoU29ydERpcmVjdGlvbiA9IHt9KSk7XG5leHBvcnQgY2xhc3MgTWVzc2FnZUFwaSB7XG4gICAgc3RhdGljIFB1Ymxpc2gocmVxLCBpbml0UmVxKSB7XG4gICAgICAgIHJldHVybiBmbS5mZXRjaFJlcShgL21lc3NhZ2UvdjEvcHVibGlzaGAsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaW5pdFJlcSksIHsgbWV0aG9kOiBcIlBPU1RcIiwgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxLCBmbS5yZXBsYWNlcikgfSkpO1xuICAgIH1cbiAgICBzdGF0aWMgU3Vic2NyaWJlKHJlcSwgZW50aXR5Tm90aWZpZXIsIGluaXRSZXEpIHtcbiAgICAgICAgcmV0dXJuIGZtLmZldGNoU3RyZWFtaW5nUmVxdWVzdChgL21lc3NhZ2UvdjEvc3Vic2NyaWJlYCwgZW50aXR5Tm90aWZpZXIsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaW5pdFJlcSksIHsgbWV0aG9kOiBcIlBPU1RcIiwgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxLCBmbS5yZXBsYWNlcikgfSkpO1xuICAgIH1cbiAgICBzdGF0aWMgU3Vic2NyaWJlQWxsKHJlcSwgZW50aXR5Tm90aWZpZXIsIGluaXRSZXEpIHtcbiAgICAgICAgcmV0dXJuIGZtLmZldGNoU3RyZWFtaW5nUmVxdWVzdChgL21lc3NhZ2UvdjEvc3Vic2NyaWJlLWFsbGAsIGVudGl0eU5vdGlmaWVyLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGluaXRSZXEpLCB7IG1ldGhvZDogXCJQT1NUXCIsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcSwgZm0ucmVwbGFjZXIpIH0pKTtcbiAgICB9XG4gICAgc3RhdGljIFF1ZXJ5KHJlcSwgaW5pdFJlcSkge1xuICAgICAgICByZXR1cm4gZm0uZmV0Y2hSZXEoYC9tZXNzYWdlL3YxL3F1ZXJ5YCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbml0UmVxKSwgeyBtZXRob2Q6IFwiUE9TVFwiLCBib2R5OiBKU09OLnN0cmluZ2lmeShyZXEsIGZtLnJlcGxhY2VyKSB9KSk7XG4gICAgfVxuICAgIHN0YXRpYyBCYXRjaFF1ZXJ5KHJlcSwgaW5pdFJlcSkge1xuICAgICAgICByZXR1cm4gZm0uZmV0Y2hSZXEoYC9tZXNzYWdlL3YxL2JhdGNoLXF1ZXJ5YCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbml0UmVxKSwgeyBtZXRob2Q6IFwiUE9TVFwiLCBib2R5OiBKU09OLnN0cmluZ2lmeShyZXEsIGZtLnJlcGxhY2VyKSB9KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZV9hcGkucGIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/message_api.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ciphertext: () => (/* binding */ Ciphertext),\n/* harmony export */   Ciphertext_Aes256gcmHkdfsha256: () => (/* binding */ Ciphertext_Aes256gcmHkdfsha256),\n/* harmony export */   SignedEciesCiphertext: () => (/* binding */ SignedEciesCiphertext),\n/* harmony export */   SignedEciesCiphertext_Ecies: () => (/* binding */ SignedEciesCiphertext_Ecies),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseCiphertext() {\n    return { aes256GcmHkdfSha256: undefined };\n}\nconst Ciphertext = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.aes256GcmHkdfSha256 !== undefined) {\n            Ciphertext_Aes256gcmHkdfsha256.encode(message.aes256GcmHkdfSha256, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCiphertext();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.aes256GcmHkdfSha256 = Ciphertext_Aes256gcmHkdfsha256.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            aes256GcmHkdfSha256: isSet(object.aes256GcmHkdfSha256)\n                ? Ciphertext_Aes256gcmHkdfsha256.fromJSON(object.aes256GcmHkdfSha256)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.aes256GcmHkdfSha256 !== undefined &&\n            (obj.aes256GcmHkdfSha256 = message.aes256GcmHkdfSha256\n                ? Ciphertext_Aes256gcmHkdfsha256.toJSON(message.aes256GcmHkdfSha256)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseCiphertext();\n        message.aes256GcmHkdfSha256 =\n            object.aes256GcmHkdfSha256 !== undefined &&\n                object.aes256GcmHkdfSha256 !== null\n                ? Ciphertext_Aes256gcmHkdfsha256.fromPartial(object.aes256GcmHkdfSha256)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseCiphertext_Aes256gcmHkdfsha256() {\n    return {\n        hkdfSalt: new Uint8Array(),\n        gcmNonce: new Uint8Array(),\n        payload: new Uint8Array(),\n    };\n}\nconst Ciphertext_Aes256gcmHkdfsha256 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.hkdfSalt.length !== 0) {\n            writer.uint32(10).bytes(message.hkdfSalt);\n        }\n        if (message.gcmNonce.length !== 0) {\n            writer.uint32(18).bytes(message.gcmNonce);\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(26).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCiphertext_Aes256gcmHkdfsha256();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hkdfSalt = reader.bytes();\n                    break;\n                case 2:\n                    message.gcmNonce = reader.bytes();\n                    break;\n                case 3:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            hkdfSalt: isSet(object.hkdfSalt)\n                ? bytesFromBase64(object.hkdfSalt)\n                : new Uint8Array(),\n            gcmNonce: isSet(object.gcmNonce)\n                ? bytesFromBase64(object.gcmNonce)\n                : new Uint8Array(),\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hkdfSalt !== undefined &&\n            (obj.hkdfSalt = base64FromBytes(message.hkdfSalt !== undefined ? message.hkdfSalt : new Uint8Array()));\n        message.gcmNonce !== undefined &&\n            (obj.gcmNonce = base64FromBytes(message.gcmNonce !== undefined ? message.gcmNonce : new Uint8Array()));\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseCiphertext_Aes256gcmHkdfsha256();\n        message.hkdfSalt = (_a = object.hkdfSalt) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.gcmNonce = (_b = object.gcmNonce) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.payload = (_c = object.payload) !== null && _c !== void 0 ? _c : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSignedEciesCiphertext() {\n    return { eciesBytes: new Uint8Array(), signature: undefined };\n}\nconst SignedEciesCiphertext = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.eciesBytes.length !== 0) {\n            writer.uint32(10).bytes(message.eciesBytes);\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedEciesCiphertext();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.eciesBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            eciesBytes: isSet(object.eciesBytes)\n                ? bytesFromBase64(object.eciesBytes)\n                : new Uint8Array(),\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.eciesBytes !== undefined &&\n            (obj.eciesBytes = base64FromBytes(message.eciesBytes !== undefined ? message.eciesBytes : new Uint8Array()));\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedEciesCiphertext();\n        message.eciesBytes = (_a = object.eciesBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignedEciesCiphertext_Ecies() {\n    return {\n        ephemeralPublicKey: new Uint8Array(),\n        iv: new Uint8Array(),\n        mac: new Uint8Array(),\n        ciphertext: new Uint8Array(),\n    };\n}\nconst SignedEciesCiphertext_Ecies = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.ephemeralPublicKey.length !== 0) {\n            writer.uint32(10).bytes(message.ephemeralPublicKey);\n        }\n        if (message.iv.length !== 0) {\n            writer.uint32(18).bytes(message.iv);\n        }\n        if (message.mac.length !== 0) {\n            writer.uint32(26).bytes(message.mac);\n        }\n        if (message.ciphertext.length !== 0) {\n            writer.uint32(34).bytes(message.ciphertext);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedEciesCiphertext_Ecies();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ephemeralPublicKey = reader.bytes();\n                    break;\n                case 2:\n                    message.iv = reader.bytes();\n                    break;\n                case 3:\n                    message.mac = reader.bytes();\n                    break;\n                case 4:\n                    message.ciphertext = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ephemeralPublicKey: isSet(object.ephemeralPublicKey)\n                ? bytesFromBase64(object.ephemeralPublicKey)\n                : new Uint8Array(),\n            iv: isSet(object.iv) ? bytesFromBase64(object.iv) : new Uint8Array(),\n            mac: isSet(object.mac) ? bytesFromBase64(object.mac) : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? bytesFromBase64(object.ciphertext)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ephemeralPublicKey !== undefined &&\n            (obj.ephemeralPublicKey = base64FromBytes(message.ephemeralPublicKey !== undefined\n                ? message.ephemeralPublicKey\n                : new Uint8Array()));\n        message.iv !== undefined &&\n            (obj.iv = base64FromBytes(message.iv !== undefined ? message.iv : new Uint8Array()));\n        message.mac !== undefined &&\n            (obj.mac = base64FromBytes(message.mac !== undefined ? message.mac : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = base64FromBytes(message.ciphertext !== undefined ? message.ciphertext : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseSignedEciesCiphertext_Ecies();\n        message.ephemeralPublicKey = (_a = object.ephemeralPublicKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.iv = (_b = object.iv) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.mac = (_c = object.mac) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.ciphertext = (_d = object.ciphertext) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=ciphertext.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/composite.pb.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/composite.pb.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Composite: () => (/* binding */ Composite),\n/* harmony export */   Composite_Part: () => (/* binding */ Composite_Part),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _content_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./content.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseComposite() {\n    return { parts: [] };\n}\nconst Composite = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.parts) {\n            Composite_Part.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseComposite();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.parts.push(Composite_Part.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            parts: Array.isArray(object === null || object === void 0 ? void 0 : object.parts)\n                ? object.parts.map((e) => Composite_Part.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.parts) {\n            obj.parts = message.parts.map((e) => e ? Composite_Part.toJSON(e) : undefined);\n        }\n        else {\n            obj.parts = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseComposite();\n        message.parts =\n            ((_a = object.parts) === null || _a === void 0 ? void 0 : _a.map((e) => Composite_Part.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseComposite_Part() {\n    return { part: undefined, composite: undefined };\n}\nconst Composite_Part = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.part !== undefined) {\n            _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.encode(message.part, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.composite !== undefined) {\n            Composite.encode(message.composite, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseComposite_Part();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.part = _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.composite = Composite.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            part: isSet(object.part)\n                ? _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.fromJSON(object.part)\n                : undefined,\n            composite: isSet(object.composite)\n                ? Composite.fromJSON(object.composite)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.part !== undefined &&\n            (obj.part = message.part\n                ? _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.toJSON(message.part)\n                : undefined);\n        message.composite !== undefined &&\n            (obj.composite = message.composite\n                ? Composite.toJSON(message.composite)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseComposite_Part();\n        message.part =\n            object.part !== undefined && object.part !== null\n                ? _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.fromPartial(object.part)\n                : undefined;\n        message.composite =\n            object.composite !== undefined && object.composite !== null\n                ? Composite.fromPartial(object.composite)\n                : undefined;\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=composite.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29uc2VudC1wcm9vZi1zaWduYXR1cmUvbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL21lc3NhZ2VfY29udGVudHMvY29tcG9zaXRlLnBiLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUN3QjtBQUNzQjtBQUNUO0FBQzlCO0FBQ1A7QUFDQSxhQUFhO0FBQ2I7QUFDTztBQUNQLDZCQUE2QixnRUFBVTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHdDQUF3QyxrRUFBVSxlQUFlLGtFQUFVO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNPO0FBQ1AsNkJBQTZCLGdFQUFVO0FBQ3ZDO0FBQ0EsWUFBWSx1REFBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esd0NBQXdDLGtFQUFVLGVBQWUsa0VBQVU7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHVEQUFjO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1REFBYztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVEQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1REFBYztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJLGdFQUFRLFVBQVUsNENBQUk7QUFDMUIsSUFBSSxnRUFBUSxRQUFRLDRDQUFJO0FBQ3hCLElBQUksbUVBQWE7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL2NvbnNlbnQtcHJvb2Ytc2lnbmF0dXJlL25vZGVfbW9kdWxlcy9AeG10cC9wcm90by90cy9kaXN0L2VzbS9tZXNzYWdlX2NvbnRlbnRzL2NvbXBvc2l0ZS5wYi5qcz83ODA1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0IHsgRW5jb2RlZENvbnRlbnQgfSBmcm9tIFwiLi9jb250ZW50LnBiXCI7XG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcInhtdHAubWVzc2FnZV9jb250ZW50c1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbXBvc2l0ZSgpIHtcbiAgICByZXR1cm4geyBwYXJ0czogW10gfTtcbn1cbmV4cG9ydCBjb25zdCBDb21wb3NpdGUgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UucGFydHMpIHtcbiAgICAgICAgICAgIENvbXBvc2l0ZV9QYXJ0LmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcG9zaXRlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXJ0cy5wdXNoKENvbXBvc2l0ZV9QYXJ0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXJ0czogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3QucGFydHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QucGFydHMubWFwKChlKSA9PiBDb21wb3NpdGVfUGFydC5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLnBhcnRzKSB7XG4gICAgICAgICAgICBvYmoucGFydHMgPSBtZXNzYWdlLnBhcnRzLm1hcCgoZSkgPT4gZSA/IENvbXBvc2l0ZV9QYXJ0LnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmoucGFydHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wb3NpdGUoKTtcbiAgICAgICAgbWVzc2FnZS5wYXJ0cyA9XG4gICAgICAgICAgICAoKF9hID0gb2JqZWN0LnBhcnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFwKChlKSA9PiBDb21wb3NpdGVfUGFydC5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VDb21wb3NpdGVfUGFydCgpIHtcbiAgICByZXR1cm4geyBwYXJ0OiB1bmRlZmluZWQsIGNvbXBvc2l0ZTogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgQ29tcG9zaXRlX1BhcnQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UucGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBFbmNvZGVkQ29udGVudC5lbmNvZGUobWVzc2FnZS5wYXJ0LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbXBvc2l0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBDb21wb3NpdGUuZW5jb2RlKG1lc3NhZ2UuY29tcG9zaXRlLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcG9zaXRlX1BhcnQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhcnQgPSBFbmNvZGVkQ29udGVudC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29tcG9zaXRlID0gQ29tcG9zaXRlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhcnQ6IGlzU2V0KG9iamVjdC5wYXJ0KVxuICAgICAgICAgICAgICAgID8gRW5jb2RlZENvbnRlbnQuZnJvbUpTT04ob2JqZWN0LnBhcnQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjb21wb3NpdGU6IGlzU2V0KG9iamVjdC5jb21wb3NpdGUpXG4gICAgICAgICAgICAgICAgPyBDb21wb3NpdGUuZnJvbUpTT04ob2JqZWN0LmNvbXBvc2l0ZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnBhcnQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wYXJ0ID0gbWVzc2FnZS5wYXJ0XG4gICAgICAgICAgICAgICAgPyBFbmNvZGVkQ29udGVudC50b0pTT04obWVzc2FnZS5wYXJ0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5jb21wb3NpdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5jb21wb3NpdGUgPSBtZXNzYWdlLmNvbXBvc2l0ZVxuICAgICAgICAgICAgICAgID8gQ29tcG9zaXRlLnRvSlNPTihtZXNzYWdlLmNvbXBvc2l0ZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wb3NpdGVfUGFydCgpO1xuICAgICAgICBtZXNzYWdlLnBhcnQgPVxuICAgICAgICAgICAgb2JqZWN0LnBhcnQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucGFydCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gRW5jb2RlZENvbnRlbnQuZnJvbVBhcnRpYWwob2JqZWN0LnBhcnQpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2UuY29tcG9zaXRlID1cbiAgICAgICAgICAgIG9iamVjdC5jb21wb3NpdGUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuY29tcG9zaXRlICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBDb21wb3NpdGUuZnJvbVBhcnRpYWwob2JqZWN0LmNvbXBvc2l0ZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5pZiAoX20wLnV0aWwuTG9uZyAhPT0gTG9uZykge1xuICAgIF9tMC51dGlsLkxvbmcgPSBMb25nO1xuICAgIF9tMC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb3NpdGUucGIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/composite.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/contact.pb.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/contact.pb.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContactBundle: () => (/* binding */ ContactBundle),\n/* harmony export */   ContactBundleV1: () => (/* binding */ ContactBundleV1),\n/* harmony export */   ContactBundleV2: () => (/* binding */ ContactBundleV2),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseContactBundleV1() {\n    return { keyBundle: undefined };\n}\nconst ContactBundleV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.keyBundle !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.encode(message.keyBundle, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContactBundleV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyBundle = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyBundle: isSet(object.keyBundle)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromJSON(object.keyBundle)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyBundle !== undefined &&\n            (obj.keyBundle = message.keyBundle\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.toJSON(message.keyBundle)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseContactBundleV1();\n        message.keyBundle =\n            object.keyBundle !== undefined && object.keyBundle !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromPartial(object.keyBundle)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseContactBundleV2() {\n    return { keyBundle: undefined };\n}\nconst ContactBundleV2 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.keyBundle !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.encode(message.keyBundle, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContactBundleV2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyBundle = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyBundle: isSet(object.keyBundle)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromJSON(object.keyBundle)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyBundle !== undefined &&\n            (obj.keyBundle = message.keyBundle\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.toJSON(message.keyBundle)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseContactBundleV2();\n        message.keyBundle =\n            object.keyBundle !== undefined && object.keyBundle !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromPartial(object.keyBundle)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseContactBundle() {\n    return { v1: undefined, v2: undefined };\n}\nconst ContactBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            ContactBundleV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.v2 !== undefined) {\n            ContactBundleV2.encode(message.v2, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContactBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = ContactBundleV1.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.v2 = ContactBundleV2.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? ContactBundleV1.fromJSON(object.v1) : undefined,\n            v2: isSet(object.v2) ? ContactBundleV2.fromJSON(object.v2) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? ContactBundleV1.toJSON(message.v1) : undefined);\n        message.v2 !== undefined &&\n            (obj.v2 = message.v2 ? ContactBundleV2.toJSON(message.v2) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseContactBundle();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? ContactBundleV1.fromPartial(object.v1)\n                : undefined;\n        message.v2 =\n            object.v2 !== undefined && object.v2 !== null\n                ? ContactBundleV2.fromPartial(object.v2)\n                : undefined;\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=contact.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/contact.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Compression: () => (/* binding */ Compression),\n/* harmony export */   ContentTypeId: () => (/* binding */ ContentTypeId),\n/* harmony export */   EncodedContent: () => (/* binding */ EncodedContent),\n/* harmony export */   EncodedContent_ParametersEntry: () => (/* binding */ EncodedContent_ParametersEntry),\n/* harmony export */   SignedContent: () => (/* binding */ SignedContent),\n/* harmony export */   compressionFromJSON: () => (/* binding */ compressionFromJSON),\n/* harmony export */   compressionToJSON: () => (/* binding */ compressionToJSON),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\n/** Message content encoding structures */\n/**\n * Recognized compression algorithms\n * protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH\n */\nvar Compression;\n(function (Compression) {\n    Compression[Compression[\"COMPRESSION_DEFLATE\"] = 0] = \"COMPRESSION_DEFLATE\";\n    Compression[Compression[\"COMPRESSION_GZIP\"] = 1] = \"COMPRESSION_GZIP\";\n    Compression[Compression[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Compression || (Compression = {}));\nfunction compressionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"COMPRESSION_DEFLATE\":\n            return Compression.COMPRESSION_DEFLATE;\n        case 1:\n        case \"COMPRESSION_GZIP\":\n            return Compression.COMPRESSION_GZIP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return Compression.UNRECOGNIZED;\n    }\n}\nfunction compressionToJSON(object) {\n    switch (object) {\n        case Compression.COMPRESSION_DEFLATE:\n            return \"COMPRESSION_DEFLATE\";\n        case Compression.COMPRESSION_GZIP:\n            return \"COMPRESSION_GZIP\";\n        case Compression.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseContentTypeId() {\n    return { authorityId: \"\", typeId: \"\", versionMajor: 0, versionMinor: 0 };\n}\nconst ContentTypeId = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.authorityId !== \"\") {\n            writer.uint32(10).string(message.authorityId);\n        }\n        if (message.typeId !== \"\") {\n            writer.uint32(18).string(message.typeId);\n        }\n        if (message.versionMajor !== 0) {\n            writer.uint32(24).uint32(message.versionMajor);\n        }\n        if (message.versionMinor !== 0) {\n            writer.uint32(32).uint32(message.versionMinor);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContentTypeId();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.authorityId = reader.string();\n                    break;\n                case 2:\n                    message.typeId = reader.string();\n                    break;\n                case 3:\n                    message.versionMajor = reader.uint32();\n                    break;\n                case 4:\n                    message.versionMinor = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            authorityId: isSet(object.authorityId) ? String(object.authorityId) : \"\",\n            typeId: isSet(object.typeId) ? String(object.typeId) : \"\",\n            versionMajor: isSet(object.versionMajor)\n                ? Number(object.versionMajor)\n                : 0,\n            versionMinor: isSet(object.versionMinor)\n                ? Number(object.versionMinor)\n                : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.authorityId !== undefined &&\n            (obj.authorityId = message.authorityId);\n        message.typeId !== undefined && (obj.typeId = message.typeId);\n        message.versionMajor !== undefined &&\n            (obj.versionMajor = Math.round(message.versionMajor));\n        message.versionMinor !== undefined &&\n            (obj.versionMinor = Math.round(message.versionMinor));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseContentTypeId();\n        message.authorityId = (_a = object.authorityId) !== null && _a !== void 0 ? _a : \"\";\n        message.typeId = (_b = object.typeId) !== null && _b !== void 0 ? _b : \"\";\n        message.versionMajor = (_c = object.versionMajor) !== null && _c !== void 0 ? _c : 0;\n        message.versionMinor = (_d = object.versionMinor) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    },\n};\nfunction createBaseEncodedContent() {\n    return {\n        type: undefined,\n        parameters: {},\n        fallback: undefined,\n        compression: undefined,\n        content: new Uint8Array(),\n    };\n}\nconst EncodedContent = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.type !== undefined) {\n            ContentTypeId.encode(message.type, writer.uint32(10).fork()).ldelim();\n        }\n        Object.entries(message.parameters).forEach(([key, value]) => {\n            EncodedContent_ParametersEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();\n        });\n        if (message.fallback !== undefined) {\n            writer.uint32(26).string(message.fallback);\n        }\n        if (message.compression !== undefined) {\n            writer.uint32(40).int32(message.compression);\n        }\n        if (message.content.length !== 0) {\n            writer.uint32(34).bytes(message.content);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedContent();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = ContentTypeId.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    const entry2 = EncodedContent_ParametersEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.parameters[entry2.key] = entry2.value;\n                    }\n                    break;\n                case 3:\n                    message.fallback = reader.string();\n                    break;\n                case 5:\n                    message.compression = reader.int32();\n                    break;\n                case 4:\n                    message.content = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            type: isSet(object.type)\n                ? ContentTypeId.fromJSON(object.type)\n                : undefined,\n            parameters: isObject(object.parameters)\n                ? Object.entries(object.parameters).reduce((acc, [key, value]) => {\n                    acc[key] = String(value);\n                    return acc;\n                }, {})\n                : {},\n            fallback: isSet(object.fallback) ? String(object.fallback) : undefined,\n            compression: isSet(object.compression)\n                ? compressionFromJSON(object.compression)\n                : undefined,\n            content: isSet(object.content)\n                ? bytesFromBase64(object.content)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined &&\n            (obj.type = message.type\n                ? ContentTypeId.toJSON(message.type)\n                : undefined);\n        obj.parameters = {};\n        if (message.parameters) {\n            Object.entries(message.parameters).forEach(([k, v]) => {\n                obj.parameters[k] = v;\n            });\n        }\n        message.fallback !== undefined && (obj.fallback = message.fallback);\n        message.compression !== undefined &&\n            (obj.compression =\n                message.compression !== undefined\n                    ? compressionToJSON(message.compression)\n                    : undefined);\n        message.content !== undefined &&\n            (obj.content = base64FromBytes(message.content !== undefined ? message.content : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseEncodedContent();\n        message.type =\n            object.type !== undefined && object.type !== null\n                ? ContentTypeId.fromPartial(object.type)\n                : undefined;\n        message.parameters = Object.entries((_a = object.parameters) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        message.fallback = (_b = object.fallback) !== null && _b !== void 0 ? _b : undefined;\n        message.compression = (_c = object.compression) !== null && _c !== void 0 ? _c : undefined;\n        message.content = (_d = object.content) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseEncodedContent_ParametersEntry() {\n    return { key: \"\", value: \"\" };\n}\nconst EncodedContent_ParametersEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedContent_ParametersEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? String(object.value) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseEncodedContent_ParametersEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseSignedContent() {\n    return { payload: new Uint8Array(), sender: undefined, signature: undefined };\n}\nconst SignedContent = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        if (message.sender !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.encode(message.sender, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.encode(message.signature, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedContent();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                case 2:\n                    message.sender = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n            sender: isSet(object.sender)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromJSON(object.sender)\n                : undefined,\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.fromJSON(object.signature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        message.sender !== undefined &&\n            (obj.sender = message.sender\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.toJSON(message.sender)\n                : undefined);\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.toJSON(message.signature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedContent();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.sender =\n            object.sender !== undefined && object.sender !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromPartial(object.sender)\n                : undefined;\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.fromPartial(object.signature)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=content.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationReference: () => (/* binding */ ConversationReference),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _invitation_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./invitation.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseConversationReference() {\n    return {\n        topic: \"\",\n        peerAddress: \"\",\n        createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        context: undefined,\n        consentProofPayload: undefined,\n    };\n}\nconst ConversationReference = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.topic !== \"\") {\n            writer.uint32(10).string(message.topic);\n        }\n        if (message.peerAddress !== \"\") {\n            writer.uint32(18).string(message.peerAddress);\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(24).uint64(message.createdNs);\n        }\n        if (message.context !== undefined) {\n            _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.encode(message.context, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.consentProofPayload !== undefined) {\n            _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.encode(message.consentProofPayload, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConversationReference();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.topic = reader.string();\n                    break;\n                case 2:\n                    message.peerAddress = reader.string();\n                    break;\n                case 3:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 4:\n                    message.context = _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.consentProofPayload = _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            topic: isSet(object.topic) ? String(object.topic) : \"\",\n            peerAddress: isSet(object.peerAddress) ? String(object.peerAddress) : \"\",\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            context: isSet(object.context)\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.fromJSON(object.context)\n                : undefined,\n            consentProofPayload: isSet(object.consentProofPayload)\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.fromJSON(object.consentProofPayload)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.topic !== undefined && (obj.topic = message.topic);\n        message.peerAddress !== undefined &&\n            (obj.peerAddress = message.peerAddress);\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.context !== undefined &&\n            (obj.context = message.context\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.toJSON(message.context)\n                : undefined);\n        message.consentProofPayload !== undefined &&\n            (obj.consentProofPayload = message.consentProofPayload\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.toJSON(message.consentProofPayload)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseConversationReference();\n        message.topic = (_a = object.topic) !== null && _a !== void 0 ? _a : \"\";\n        message.peerAddress = (_b = object.peerAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.context =\n            object.context !== undefined && object.context !== null\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.fromPartial(object.context)\n                : undefined;\n        message.consentProofPayload =\n            object.consentProofPayload !== undefined &&\n                object.consentProofPayload !== null\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.fromPartial(object.consentProofPayload)\n                : undefined;\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=conversation_reference.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ecies.pb.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ecies.pb.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EciesMessage: () => (/* binding */ EciesMessage),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseEciesMessage() {\n    return { v1: undefined };\n}\nconst EciesMessage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            writer.uint32(10).bytes(message.v1);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEciesMessage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? bytesFromBase64(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 =\n                message.v1 !== undefined ? base64FromBytes(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEciesMessage();\n        message.v1 = (_a = object.v1) !== null && _a !== void 0 ? _a : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=ecies.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29uc2VudC1wcm9vZi1zaWduYXR1cmUvbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL21lc3NhZ2VfY29udGVudHMvZWNpZXMucGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUN3QjtBQUNhO0FBQzlCO0FBQ1A7QUFDQSxhQUFhO0FBQ2I7QUFDTztBQUNQLDZCQUE2QixnRUFBVTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHdDQUF3QyxrRUFBVSxlQUFlLGtFQUFVO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnRUFBUSxVQUFVLDRDQUFJO0FBQzFCLElBQUksZ0VBQVEsUUFBUSw0Q0FBSTtBQUN4QixJQUFJLG1FQUFhO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC9jb25zZW50LXByb29mLXNpZ25hdHVyZS9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbWVzc2FnZV9jb250ZW50cy9lY2llcy5wYi5qcz8wYTJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gXCJ4bXRwLm1lc3NhZ2VfY29udGVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFY2llc01lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIHsgdjE6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IEVjaWVzTWVzc2FnZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS52MSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5ieXRlcyhtZXNzYWdlLnYxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUVjaWVzTWVzc2FnZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudjEgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdjE6IGlzU2V0KG9iamVjdC52MSkgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0LnYxKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnYxICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoudjEgPVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UudjEgIT09IHVuZGVmaW5lZCA/IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLnYxKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUVjaWVzTWVzc2FnZSgpO1xuICAgICAgICBtZXNzYWdlLnYxID0gKF9hID0gb2JqZWN0LnYxKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xudmFyIGdsb2JhbFRoaXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB0aHJvdyBcIlVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdFwiO1xufSkoKTtcbmZ1bmN0aW9uIGJ5dGVzRnJvbUJhc2U2NChiNjQpIHtcbiAgICBpZiAoZ2xvYmFsVGhpcy5CdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGI2NCwgXCJiYXNlNjRcIikpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgYmluID0gZ2xvYmFsVGhpcy5hdG9iKGI2NCk7XG4gICAgICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG59XG5mdW5jdGlvbiBiYXNlNjRGcm9tQnl0ZXMoYXJyKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGFycikudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBiaW4gPSBbXTtcbiAgICAgICAgYXJyLmZvckVhY2goKGJ5dGUpID0+IHtcbiAgICAgICAgICAgIGJpbi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXMuYnRvYShiaW4uam9pbihcIlwiKSk7XG4gICAgfVxufVxuaWYgKF9tMC51dGlsLkxvbmcgIT09IExvbmcpIHtcbiAgICBfbTAudXRpbC5Mb25nID0gTG9uZztcbiAgICBfbTAuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWNpZXMucGIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ecies.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/frames.pb.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/frames.pb.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FrameAction: () => (/* binding */ FrameAction),\n/* harmony export */   FrameActionBody: () => (/* binding */ FrameActionBody),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseFrameActionBody() {\n    return {\n        frameUrl: \"\",\n        buttonIndex: 0,\n        timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        opaqueConversationIdentifier: \"\",\n        unixTimestamp: 0,\n        inputText: \"\",\n        state: \"\",\n        address: \"\",\n    };\n}\nconst FrameActionBody = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.frameUrl !== \"\") {\n            writer.uint32(10).string(message.frameUrl);\n        }\n        if (message.buttonIndex !== 0) {\n            writer.uint32(16).int32(message.buttonIndex);\n        }\n        if (!message.timestamp.isZero()) {\n            writer.uint32(24).uint64(message.timestamp);\n        }\n        if (message.opaqueConversationIdentifier !== \"\") {\n            writer.uint32(34).string(message.opaqueConversationIdentifier);\n        }\n        if (message.unixTimestamp !== 0) {\n            writer.uint32(40).uint32(message.unixTimestamp);\n        }\n        if (message.inputText !== \"\") {\n            writer.uint32(50).string(message.inputText);\n        }\n        if (message.state !== \"\") {\n            writer.uint32(58).string(message.state);\n        }\n        if (message.address !== \"\") {\n            writer.uint32(66).string(message.address);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFrameActionBody();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.frameUrl = reader.string();\n                    break;\n                case 2:\n                    message.buttonIndex = reader.int32();\n                    break;\n                case 3:\n                    message.timestamp = reader.uint64();\n                    break;\n                case 4:\n                    message.opaqueConversationIdentifier = reader.string();\n                    break;\n                case 5:\n                    message.unixTimestamp = reader.uint32();\n                    break;\n                case 6:\n                    message.inputText = reader.string();\n                    break;\n                case 7:\n                    message.state = reader.string();\n                    break;\n                case 8:\n                    message.address = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            frameUrl: isSet(object.frameUrl) ? String(object.frameUrl) : \"\",\n            buttonIndex: isSet(object.buttonIndex) ? Number(object.buttonIndex) : 0,\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            opaqueConversationIdentifier: isSet(object.opaqueConversationIdentifier)\n                ? String(object.opaqueConversationIdentifier)\n                : \"\",\n            unixTimestamp: isSet(object.unixTimestamp)\n                ? Number(object.unixTimestamp)\n                : 0,\n            inputText: isSet(object.inputText) ? String(object.inputText) : \"\",\n            state: isSet(object.state) ? String(object.state) : \"\",\n            address: isSet(object.address) ? String(object.address) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.frameUrl !== undefined && (obj.frameUrl = message.frameUrl);\n        message.buttonIndex !== undefined &&\n            (obj.buttonIndex = Math.round(message.buttonIndex));\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.opaqueConversationIdentifier !== undefined &&\n            (obj.opaqueConversationIdentifier = message.opaqueConversationIdentifier);\n        message.unixTimestamp !== undefined &&\n            (obj.unixTimestamp = Math.round(message.unixTimestamp));\n        message.inputText !== undefined && (obj.inputText = message.inputText);\n        message.state !== undefined && (obj.state = message.state);\n        message.address !== undefined && (obj.address = message.address);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseFrameActionBody();\n        message.frameUrl = (_a = object.frameUrl) !== null && _a !== void 0 ? _a : \"\";\n        message.buttonIndex = (_b = object.buttonIndex) !== null && _b !== void 0 ? _b : 0;\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.opaqueConversationIdentifier =\n            (_c = object.opaqueConversationIdentifier) !== null && _c !== void 0 ? _c : \"\";\n        message.unixTimestamp = (_d = object.unixTimestamp) !== null && _d !== void 0 ? _d : 0;\n        message.inputText = (_e = object.inputText) !== null && _e !== void 0 ? _e : \"\";\n        message.state = (_f = object.state) !== null && _f !== void 0 ? _f : \"\";\n        message.address = (_g = object.address) !== null && _g !== void 0 ? _g : \"\";\n        return message;\n    },\n};\nfunction createBaseFrameAction() {\n    return {\n        signature: undefined,\n        signedPublicKeyBundle: undefined,\n        actionBody: new Uint8Array(),\n    };\n}\nconst FrameAction = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.signedPublicKeyBundle !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.encode(message.signedPublicKeyBundle, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.actionBody.length !== 0) {\n            writer.uint32(26).bytes(message.actionBody);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFrameAction();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.signedPublicKeyBundle = _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.actionBody = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n            signedPublicKeyBundle: isSet(object.signedPublicKeyBundle)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.fromJSON(object.signedPublicKeyBundle)\n                : undefined,\n            actionBody: isSet(object.actionBody)\n                ? bytesFromBase64(object.actionBody)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        message.signedPublicKeyBundle !== undefined &&\n            (obj.signedPublicKeyBundle = message.signedPublicKeyBundle\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.toJSON(message.signedPublicKeyBundle)\n                : undefined);\n        message.actionBody !== undefined &&\n            (obj.actionBody = base64FromBytes(message.actionBody !== undefined ? message.actionBody : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseFrameAction();\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        message.signedPublicKeyBundle =\n            object.signedPublicKeyBundle !== undefined &&\n                object.signedPublicKeyBundle !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.fromPartial(object.signedPublicKeyBundle)\n                : undefined;\n        message.actionBody = (_a = object.actionBody) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=frames.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/frames.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsentProofPayload: () => (/* binding */ ConsentProofPayload),\n/* harmony export */   ConsentProofPayloadVersion: () => (/* binding */ ConsentProofPayloadVersion),\n/* harmony export */   InvitationV1: () => (/* binding */ InvitationV1),\n/* harmony export */   InvitationV1_Aes256gcmHkdfsha256: () => (/* binding */ InvitationV1_Aes256gcmHkdfsha256),\n/* harmony export */   InvitationV1_Context: () => (/* binding */ InvitationV1_Context),\n/* harmony export */   InvitationV1_Context_MetadataEntry: () => (/* binding */ InvitationV1_Context_MetadataEntry),\n/* harmony export */   SealedInvitation: () => (/* binding */ SealedInvitation),\n/* harmony export */   SealedInvitationHeaderV1: () => (/* binding */ SealedInvitationHeaderV1),\n/* harmony export */   SealedInvitationV1: () => (/* binding */ SealedInvitationV1),\n/* harmony export */   consentProofPayloadVersionFromJSON: () => (/* binding */ consentProofPayloadVersionFromJSON),\n/* harmony export */   consentProofPayloadVersionToJSON: () => (/* binding */ consentProofPayloadVersionToJSON),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\n/**\n * Invitation is used by an initiator to invite participants\n * into a new conversation. Invitation carries the chosen topic name\n * and encryption scheme and key material to be used for message encryption.\n */\n/** Version of consent proof payload */\nvar ConsentProofPayloadVersion;\n(function (ConsentProofPayloadVersion) {\n    ConsentProofPayloadVersion[ConsentProofPayloadVersion[\"CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED\"] = 0] = \"CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED\";\n    ConsentProofPayloadVersion[ConsentProofPayloadVersion[\"CONSENT_PROOF_PAYLOAD_VERSION_1\"] = 1] = \"CONSENT_PROOF_PAYLOAD_VERSION_1\";\n    ConsentProofPayloadVersion[ConsentProofPayloadVersion[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ConsentProofPayloadVersion || (ConsentProofPayloadVersion = {}));\nfunction consentProofPayloadVersionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED\":\n            return ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED;\n        case 1:\n        case \"CONSENT_PROOF_PAYLOAD_VERSION_1\":\n            return ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_1;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ConsentProofPayloadVersion.UNRECOGNIZED;\n    }\n}\nfunction consentProofPayloadVersionToJSON(object) {\n    switch (object) {\n        case ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED:\n            return \"CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED\";\n        case ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_1:\n            return \"CONSENT_PROOF_PAYLOAD_VERSION_1\";\n        case ConsentProofPayloadVersion.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseInvitationV1() {\n    return {\n        topic: \"\",\n        context: undefined,\n        aes256GcmHkdfSha256: undefined,\n        consentProof: undefined,\n    };\n}\nconst InvitationV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.topic !== \"\") {\n            writer.uint32(10).string(message.topic);\n        }\n        if (message.context !== undefined) {\n            InvitationV1_Context.encode(message.context, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.aes256GcmHkdfSha256 !== undefined) {\n            InvitationV1_Aes256gcmHkdfsha256.encode(message.aes256GcmHkdfSha256, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.consentProof !== undefined) {\n            ConsentProofPayload.encode(message.consentProof, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInvitationV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.topic = reader.string();\n                    break;\n                case 2:\n                    message.context = InvitationV1_Context.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.aes256GcmHkdfSha256 = InvitationV1_Aes256gcmHkdfsha256.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.consentProof = ConsentProofPayload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            topic: isSet(object.topic) ? String(object.topic) : \"\",\n            context: isSet(object.context)\n                ? InvitationV1_Context.fromJSON(object.context)\n                : undefined,\n            aes256GcmHkdfSha256: isSet(object.aes256GcmHkdfSha256)\n                ? InvitationV1_Aes256gcmHkdfsha256.fromJSON(object.aes256GcmHkdfSha256)\n                : undefined,\n            consentProof: isSet(object.consentProof)\n                ? ConsentProofPayload.fromJSON(object.consentProof)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.topic !== undefined && (obj.topic = message.topic);\n        message.context !== undefined &&\n            (obj.context = message.context\n                ? InvitationV1_Context.toJSON(message.context)\n                : undefined);\n        message.aes256GcmHkdfSha256 !== undefined &&\n            (obj.aes256GcmHkdfSha256 = message.aes256GcmHkdfSha256\n                ? InvitationV1_Aes256gcmHkdfsha256.toJSON(message.aes256GcmHkdfSha256)\n                : undefined);\n        message.consentProof !== undefined &&\n            (obj.consentProof = message.consentProof\n                ? ConsentProofPayload.toJSON(message.consentProof)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseInvitationV1();\n        message.topic = (_a = object.topic) !== null && _a !== void 0 ? _a : \"\";\n        message.context =\n            object.context !== undefined && object.context !== null\n                ? InvitationV1_Context.fromPartial(object.context)\n                : undefined;\n        message.aes256GcmHkdfSha256 =\n            object.aes256GcmHkdfSha256 !== undefined &&\n                object.aes256GcmHkdfSha256 !== null\n                ? InvitationV1_Aes256gcmHkdfsha256.fromPartial(object.aes256GcmHkdfSha256)\n                : undefined;\n        message.consentProof =\n            object.consentProof !== undefined && object.consentProof !== null\n                ? ConsentProofPayload.fromPartial(object.consentProof)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseInvitationV1_Aes256gcmHkdfsha256() {\n    return { keyMaterial: new Uint8Array() };\n}\nconst InvitationV1_Aes256gcmHkdfsha256 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.keyMaterial.length !== 0) {\n            writer.uint32(10).bytes(message.keyMaterial);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInvitationV1_Aes256gcmHkdfsha256();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyMaterial = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyMaterial: isSet(object.keyMaterial)\n                ? bytesFromBase64(object.keyMaterial)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyMaterial !== undefined &&\n            (obj.keyMaterial = base64FromBytes(message.keyMaterial !== undefined\n                ? message.keyMaterial\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseInvitationV1_Aes256gcmHkdfsha256();\n        message.keyMaterial = (_a = object.keyMaterial) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseInvitationV1_Context() {\n    return { conversationId: \"\", metadata: {} };\n}\nconst InvitationV1_Context = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.conversationId !== \"\") {\n            writer.uint32(10).string(message.conversationId);\n        }\n        Object.entries(message.metadata).forEach(([key, value]) => {\n            InvitationV1_Context_MetadataEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInvitationV1_Context();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversationId = reader.string();\n                    break;\n                case 2:\n                    const entry2 = InvitationV1_Context_MetadataEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.metadata[entry2.key] = entry2.value;\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversationId: isSet(object.conversationId)\n                ? String(object.conversationId)\n                : \"\",\n            metadata: isObject(object.metadata)\n                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {\n                    acc[key] = String(value);\n                    return acc;\n                }, {})\n                : {},\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.conversationId !== undefined &&\n            (obj.conversationId = message.conversationId);\n        obj.metadata = {};\n        if (message.metadata) {\n            Object.entries(message.metadata).forEach(([k, v]) => {\n                obj.metadata[k] = v;\n            });\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseInvitationV1_Context();\n        message.conversationId = (_a = object.conversationId) !== null && _a !== void 0 ? _a : \"\";\n        message.metadata = Object.entries((_b = object.metadata) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    },\n};\nfunction createBaseInvitationV1_Context_MetadataEntry() {\n    return { key: \"\", value: \"\" };\n}\nconst InvitationV1_Context_MetadataEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInvitationV1_Context_MetadataEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? String(object.value) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseInvitationV1_Context_MetadataEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseSealedInvitationHeaderV1() {\n    return { sender: undefined, recipient: undefined, createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst SealedInvitationHeaderV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.sender !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.encode(message.sender, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.recipient !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.encode(message.recipient, writer.uint32(18).fork()).ldelim();\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(24).uint64(message.createdNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSealedInvitationHeaderV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.recipient = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.createdNs = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromJSON(object.sender)\n                : undefined,\n            recipient: isSet(object.recipient)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromJSON(object.recipient)\n                : undefined,\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined &&\n            (obj.sender = message.sender\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.toJSON(message.sender)\n                : undefined);\n        message.recipient !== undefined &&\n            (obj.recipient = message.recipient\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.toJSON(message.recipient)\n                : undefined);\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSealedInvitationHeaderV1();\n        message.sender =\n            object.sender !== undefined && object.sender !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromPartial(object.sender)\n                : undefined;\n        message.recipient =\n            object.recipient !== undefined && object.recipient !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromPartial(object.recipient)\n                : undefined;\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseSealedInvitationV1() {\n    return { headerBytes: new Uint8Array(), ciphertext: undefined };\n}\nconst SealedInvitationV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(10).bytes(message.headerBytes);\n        }\n        if (message.ciphertext !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.encode(message.ciphertext, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSealedInvitationV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.ciphertext = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromJSON(object.ciphertext)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = message.ciphertext\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.toJSON(message.ciphertext)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSealedInvitationV1();\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.ciphertext =\n            object.ciphertext !== undefined && object.ciphertext !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromPartial(object.ciphertext)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSealedInvitation() {\n    return { v1: undefined };\n}\nconst SealedInvitation = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            SealedInvitationV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSealedInvitation();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = SealedInvitationV1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? SealedInvitationV1.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? SealedInvitationV1.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSealedInvitation();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? SealedInvitationV1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseConsentProofPayload() {\n    return { signature: \"\", timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, payloadVersion: 0 };\n}\nconst ConsentProofPayload = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.signature !== \"\") {\n            writer.uint32(10).string(message.signature);\n        }\n        if (!message.timestamp.isZero()) {\n            writer.uint32(16).uint64(message.timestamp);\n        }\n        if (message.payloadVersion !== 0) {\n            writer.uint32(24).int32(message.payloadVersion);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConsentProofPayload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signature = reader.string();\n                    break;\n                case 2:\n                    message.timestamp = reader.uint64();\n                    break;\n                case 3:\n                    message.payloadVersion = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            signature: isSet(object.signature) ? String(object.signature) : \"\",\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            payloadVersion: isSet(object.payloadVersion)\n                ? consentProofPayloadVersionFromJSON(object.payloadVersion)\n                : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.signature !== undefined && (obj.signature = message.signature);\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.payloadVersion !== undefined &&\n            (obj.payloadVersion = consentProofPayloadVersionToJSON(message.payloadVersion));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseConsentProofPayload();\n        message.signature = (_a = object.signature) !== null && _a !== void 0 ? _a : \"\";\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.payloadVersion = (_b = object.payloadVersion) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=invitation.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/message.pb.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/message.pb.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodedMessage: () => (/* binding */ DecodedMessage),\n/* harmony export */   Message: () => (/* binding */ Message),\n/* harmony export */   MessageHeaderV1: () => (/* binding */ MessageHeaderV1),\n/* harmony export */   MessageHeaderV2: () => (/* binding */ MessageHeaderV2),\n/* harmony export */   MessageV1: () => (/* binding */ MessageV1),\n/* harmony export */   MessageV2: () => (/* binding */ MessageV2),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conversation_reference.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__);\n/* eslint-disable */\n\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseMessageHeaderV1() {\n    return { sender: undefined, recipient: undefined, timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst MessageHeaderV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.sender !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.encode(message.sender, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.recipient !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.encode(message.recipient, writer.uint32(18).fork()).ldelim();\n        }\n        if (!message.timestamp.isZero()) {\n            writer.uint32(24).uint64(message.timestamp);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageHeaderV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.recipient = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.timestamp = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromJSON(object.sender)\n                : undefined,\n            recipient: isSet(object.recipient)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromJSON(object.recipient)\n                : undefined,\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined &&\n            (obj.sender = message.sender\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.toJSON(message.sender)\n                : undefined);\n        message.recipient !== undefined &&\n            (obj.recipient = message.recipient\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.toJSON(message.recipient)\n                : undefined);\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMessageHeaderV1();\n        message.sender =\n            object.sender !== undefined && object.sender !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromPartial(object.sender)\n                : undefined;\n        message.recipient =\n            object.recipient !== undefined && object.recipient !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromPartial(object.recipient)\n                : undefined;\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseMessageV1() {\n    return { headerBytes: new Uint8Array(), ciphertext: undefined };\n}\nconst MessageV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(10).bytes(message.headerBytes);\n        }\n        if (message.ciphertext !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.encode(message.ciphertext, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.ciphertext = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromJSON(object.ciphertext)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = message.ciphertext\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.toJSON(message.ciphertext)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMessageV1();\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.ciphertext =\n            object.ciphertext !== undefined && object.ciphertext !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromPartial(object.ciphertext)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMessageHeaderV2() {\n    return { createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, topic: \"\" };\n}\nconst MessageHeaderV2 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (!message.createdNs.isZero()) {\n            writer.uint32(8).uint64(message.createdNs);\n        }\n        if (message.topic !== \"\") {\n            writer.uint32(18).string(message.topic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageHeaderV2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 2:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            topic: isSet(object.topic) ? String(object.topic) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMessageHeaderV2();\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.topic = (_a = object.topic) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseMessageV2() {\n    return {\n        headerBytes: new Uint8Array(),\n        ciphertext: undefined,\n        senderHmac: undefined,\n        shouldPush: undefined,\n    };\n}\nconst MessageV2 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(10).bytes(message.headerBytes);\n        }\n        if (message.ciphertext !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.encode(message.ciphertext, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.senderHmac !== undefined) {\n            writer.uint32(26).bytes(message.senderHmac);\n        }\n        if (message.shouldPush !== undefined) {\n            writer.uint32(32).bool(message.shouldPush);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageV2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.ciphertext = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.senderHmac = reader.bytes();\n                    break;\n                case 4:\n                    message.shouldPush = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromJSON(object.ciphertext)\n                : undefined,\n            senderHmac: isSet(object.senderHmac)\n                ? bytesFromBase64(object.senderHmac)\n                : undefined,\n            shouldPush: isSet(object.shouldPush)\n                ? Boolean(object.shouldPush)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = message.ciphertext\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.toJSON(message.ciphertext)\n                : undefined);\n        message.senderHmac !== undefined &&\n            (obj.senderHmac =\n                message.senderHmac !== undefined\n                    ? base64FromBytes(message.senderHmac)\n                    : undefined);\n        message.shouldPush !== undefined && (obj.shouldPush = message.shouldPush);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMessageV2();\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.ciphertext =\n            object.ciphertext !== undefined && object.ciphertext !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromPartial(object.ciphertext)\n                : undefined;\n        message.senderHmac = (_b = object.senderHmac) !== null && _b !== void 0 ? _b : undefined;\n        message.shouldPush = (_c = object.shouldPush) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    },\n};\nfunction createBaseMessage() {\n    return { v1: undefined, v2: undefined };\n}\nconst Message = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            MessageV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.v2 !== undefined) {\n            MessageV2.encode(message.v2, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = MessageV1.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.v2 = MessageV2.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? MessageV1.fromJSON(object.v1) : undefined,\n            v2: isSet(object.v2) ? MessageV2.fromJSON(object.v2) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? MessageV1.toJSON(message.v1) : undefined);\n        message.v2 !== undefined &&\n            (obj.v2 = message.v2 ? MessageV2.toJSON(message.v2) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMessage();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? MessageV1.fromPartial(object.v1)\n                : undefined;\n        message.v2 =\n            object.v2 !== undefined && object.v2 !== null\n                ? MessageV2.fromPartial(object.v2)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseDecodedMessage() {\n    return {\n        id: \"\",\n        messageVersion: \"\",\n        senderAddress: \"\",\n        recipientAddress: undefined,\n        sentNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        contentTopic: \"\",\n        conversation: undefined,\n        contentBytes: new Uint8Array(),\n    };\n}\nconst DecodedMessage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.messageVersion !== \"\") {\n            writer.uint32(18).string(message.messageVersion);\n        }\n        if (message.senderAddress !== \"\") {\n            writer.uint32(26).string(message.senderAddress);\n        }\n        if (message.recipientAddress !== undefined) {\n            writer.uint32(34).string(message.recipientAddress);\n        }\n        if (!message.sentNs.isZero()) {\n            writer.uint32(40).uint64(message.sentNs);\n        }\n        if (message.contentTopic !== \"\") {\n            writer.uint32(50).string(message.contentTopic);\n        }\n        if (message.conversation !== undefined) {\n            _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.encode(message.conversation, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.contentBytes.length !== 0) {\n            writer.uint32(66).bytes(message.contentBytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecodedMessage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.messageVersion = reader.string();\n                    break;\n                case 3:\n                    message.senderAddress = reader.string();\n                    break;\n                case 4:\n                    message.recipientAddress = reader.string();\n                    break;\n                case 5:\n                    message.sentNs = reader.uint64();\n                    break;\n                case 6:\n                    message.contentTopic = reader.string();\n                    break;\n                case 7:\n                    message.conversation = _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.contentBytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            id: isSet(object.id) ? String(object.id) : \"\",\n            messageVersion: isSet(object.messageVersion)\n                ? String(object.messageVersion)\n                : \"\",\n            senderAddress: isSet(object.senderAddress)\n                ? String(object.senderAddress)\n                : \"\",\n            recipientAddress: isSet(object.recipientAddress)\n                ? String(object.recipientAddress)\n                : undefined,\n            sentNs: isSet(object.sentNs) ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.sentNs) : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            contentTopic: isSet(object.contentTopic)\n                ? String(object.contentTopic)\n                : \"\",\n            conversation: isSet(object.conversation)\n                ? _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.fromJSON(object.conversation)\n                : undefined,\n            contentBytes: isSet(object.contentBytes)\n                ? bytesFromBase64(object.contentBytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.messageVersion !== undefined &&\n            (obj.messageVersion = message.messageVersion);\n        message.senderAddress !== undefined &&\n            (obj.senderAddress = message.senderAddress);\n        message.recipientAddress !== undefined &&\n            (obj.recipientAddress = message.recipientAddress);\n        message.sentNs !== undefined &&\n            (obj.sentNs = (message.sentNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.contentTopic !== undefined &&\n            (obj.contentTopic = message.contentTopic);\n        message.conversation !== undefined &&\n            (obj.conversation = message.conversation\n                ? _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.toJSON(message.conversation)\n                : undefined);\n        message.contentBytes !== undefined &&\n            (obj.contentBytes = base64FromBytes(message.contentBytes !== undefined\n                ? message.contentBytes\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseDecodedMessage();\n        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : \"\";\n        message.messageVersion = (_b = object.messageVersion) !== null && _b !== void 0 ? _b : \"\";\n        message.senderAddress = (_c = object.senderAddress) !== null && _c !== void 0 ? _c : \"\";\n        message.recipientAddress = (_d = object.recipientAddress) !== null && _d !== void 0 ? _d : undefined;\n        message.sentNs =\n            object.sentNs !== undefined && object.sentNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.sentNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.contentTopic = (_e = object.contentTopic) !== null && _e !== void 0 ? _e : \"\";\n        message.conversation =\n            object.conversation !== undefined && object.conversation !== null\n                ? _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.fromPartial(object.conversation)\n                : undefined;\n        message.contentBytes = (_f = object.contentBytes) !== null && _f !== void 0 ? _f : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=message.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/message.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncryptedPrivateKeyBundle: () => (/* binding */ EncryptedPrivateKeyBundle),\n/* harmony export */   EncryptedPrivateKeyBundleV1: () => (/* binding */ EncryptedPrivateKeyBundleV1),\n/* harmony export */   PrivateKey: () => (/* binding */ PrivateKey),\n/* harmony export */   PrivateKeyBundle: () => (/* binding */ PrivateKeyBundle),\n/* harmony export */   PrivateKeyBundleV1: () => (/* binding */ PrivateKeyBundleV1),\n/* harmony export */   PrivateKeyBundleV2: () => (/* binding */ PrivateKeyBundleV2),\n/* harmony export */   PrivateKey_Secp256k1: () => (/* binding */ PrivateKey_Secp256k1),\n/* harmony export */   SignedPrivateKey: () => (/* binding */ SignedPrivateKey),\n/* harmony export */   SignedPrivateKey_Secp256k1: () => (/* binding */ SignedPrivateKey_Secp256k1),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseSignedPrivateKey() {\n    return { createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, secp256k1: undefined, publicKey: undefined };\n}\nconst SignedPrivateKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (!message.createdNs.isZero()) {\n            writer.uint32(8).uint64(message.createdNs);\n        }\n        if (message.secp256k1 !== undefined) {\n            SignedPrivateKey_Secp256k1.encode(message.secp256k1, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.publicKey !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.encode(message.publicKey, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPrivateKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 2:\n                    message.secp256k1 = SignedPrivateKey_Secp256k1.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.publicKey = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            secp256k1: isSet(object.secp256k1)\n                ? SignedPrivateKey_Secp256k1.fromJSON(object.secp256k1)\n                : undefined,\n            publicKey: isSet(object.publicKey)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.fromJSON(object.publicKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.secp256k1 !== undefined &&\n            (obj.secp256k1 = message.secp256k1\n                ? SignedPrivateKey_Secp256k1.toJSON(message.secp256k1)\n                : undefined);\n        message.publicKey !== undefined &&\n            (obj.publicKey = message.publicKey\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.toJSON(message.publicKey)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignedPrivateKey();\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.secp256k1 =\n            object.secp256k1 !== undefined && object.secp256k1 !== null\n                ? SignedPrivateKey_Secp256k1.fromPartial(object.secp256k1)\n                : undefined;\n        message.publicKey =\n            object.publicKey !== undefined && object.publicKey !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.fromPartial(object.publicKey)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignedPrivateKey_Secp256k1() {\n    return { bytes: new Uint8Array() };\n}\nconst SignedPrivateKey_Secp256k1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPrivateKey_Secp256k1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedPrivateKey_Secp256k1();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBasePrivateKeyBundleV2() {\n    return { identityKey: undefined, preKeys: [] };\n}\nconst PrivateKeyBundleV2 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            SignedPrivateKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.preKeys) {\n            SignedPrivateKey.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKeyBundleV2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = SignedPrivateKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.preKeys.push(SignedPrivateKey.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? SignedPrivateKey.fromJSON(object.identityKey)\n                : undefined,\n            preKeys: Array.isArray(object === null || object === void 0 ? void 0 : object.preKeys)\n                ? object.preKeys.map((e) => SignedPrivateKey.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? SignedPrivateKey.toJSON(message.identityKey)\n                : undefined);\n        if (message.preKeys) {\n            obj.preKeys = message.preKeys.map((e) => e ? SignedPrivateKey.toJSON(e) : undefined);\n        }\n        else {\n            obj.preKeys = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivateKeyBundleV2();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? SignedPrivateKey.fromPartial(object.identityKey)\n                : undefined;\n        message.preKeys =\n            ((_a = object.preKeys) === null || _a === void 0 ? void 0 : _a.map((e) => SignedPrivateKey.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBasePrivateKey() {\n    return { timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, secp256k1: undefined, publicKey: undefined };\n}\nconst PrivateKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (!message.timestamp.isZero()) {\n            writer.uint32(8).uint64(message.timestamp);\n        }\n        if (message.secp256k1 !== undefined) {\n            PrivateKey_Secp256k1.encode(message.secp256k1, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.publicKey !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.encode(message.publicKey, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.timestamp = reader.uint64();\n                    break;\n                case 2:\n                    message.secp256k1 = PrivateKey_Secp256k1.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.publicKey = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            secp256k1: isSet(object.secp256k1)\n                ? PrivateKey_Secp256k1.fromJSON(object.secp256k1)\n                : undefined,\n            publicKey: isSet(object.publicKey)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.fromJSON(object.publicKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.secp256k1 !== undefined &&\n            (obj.secp256k1 = message.secp256k1\n                ? PrivateKey_Secp256k1.toJSON(message.secp256k1)\n                : undefined);\n        message.publicKey !== undefined &&\n            (obj.publicKey = message.publicKey\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.toJSON(message.publicKey)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePrivateKey();\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.secp256k1 =\n            object.secp256k1 !== undefined && object.secp256k1 !== null\n                ? PrivateKey_Secp256k1.fromPartial(object.secp256k1)\n                : undefined;\n        message.publicKey =\n            object.publicKey !== undefined && object.publicKey !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.fromPartial(object.publicKey)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePrivateKey_Secp256k1() {\n    return { bytes: new Uint8Array() };\n}\nconst PrivateKey_Secp256k1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKey_Secp256k1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivateKey_Secp256k1();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBasePrivateKeyBundleV1() {\n    return { identityKey: undefined, preKeys: [] };\n}\nconst PrivateKeyBundleV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            PrivateKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.preKeys) {\n            PrivateKey.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKeyBundleV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = PrivateKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.preKeys.push(PrivateKey.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? PrivateKey.fromJSON(object.identityKey)\n                : undefined,\n            preKeys: Array.isArray(object === null || object === void 0 ? void 0 : object.preKeys)\n                ? object.preKeys.map((e) => PrivateKey.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? PrivateKey.toJSON(message.identityKey)\n                : undefined);\n        if (message.preKeys) {\n            obj.preKeys = message.preKeys.map((e) => e ? PrivateKey.toJSON(e) : undefined);\n        }\n        else {\n            obj.preKeys = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivateKeyBundleV1();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? PrivateKey.fromPartial(object.identityKey)\n                : undefined;\n        message.preKeys =\n            ((_a = object.preKeys) === null || _a === void 0 ? void 0 : _a.map((e) => PrivateKey.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBasePrivateKeyBundle() {\n    return { v1: undefined, v2: undefined };\n}\nconst PrivateKeyBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            PrivateKeyBundleV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.v2 !== undefined) {\n            PrivateKeyBundleV2.encode(message.v2, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKeyBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = PrivateKeyBundleV1.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.v2 = PrivateKeyBundleV2.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? PrivateKeyBundleV1.fromJSON(object.v1) : undefined,\n            v2: isSet(object.v2) ? PrivateKeyBundleV2.fromJSON(object.v2) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? PrivateKeyBundleV1.toJSON(message.v1) : undefined);\n        message.v2 !== undefined &&\n            (obj.v2 = message.v2 ? PrivateKeyBundleV2.toJSON(message.v2) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePrivateKeyBundle();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? PrivateKeyBundleV1.fromPartial(object.v1)\n                : undefined;\n        message.v2 =\n            object.v2 !== undefined && object.v2 !== null\n                ? PrivateKeyBundleV2.fromPartial(object.v2)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseEncryptedPrivateKeyBundleV1() {\n    return { walletPreKey: new Uint8Array(), ciphertext: undefined };\n}\nconst EncryptedPrivateKeyBundleV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.walletPreKey.length !== 0) {\n            writer.uint32(10).bytes(message.walletPreKey);\n        }\n        if (message.ciphertext !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.encode(message.ciphertext, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptedPrivateKeyBundleV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletPreKey = reader.bytes();\n                    break;\n                case 2:\n                    message.ciphertext = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletPreKey: isSet(object.walletPreKey)\n                ? bytesFromBase64(object.walletPreKey)\n                : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromJSON(object.ciphertext)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.walletPreKey !== undefined &&\n            (obj.walletPreKey = base64FromBytes(message.walletPreKey !== undefined\n                ? message.walletPreKey\n                : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = message.ciphertext\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.toJSON(message.ciphertext)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptedPrivateKeyBundleV1();\n        message.walletPreKey = (_a = object.walletPreKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.ciphertext =\n            object.ciphertext !== undefined && object.ciphertext !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromPartial(object.ciphertext)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseEncryptedPrivateKeyBundle() {\n    return { v1: undefined };\n}\nconst EncryptedPrivateKeyBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            EncryptedPrivateKeyBundleV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptedPrivateKeyBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = EncryptedPrivateKeyBundleV1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? EncryptedPrivateKeyBundleV1.fromJSON(object.v1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? EncryptedPrivateKeyBundleV1.toJSON(message.v1)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseEncryptedPrivateKeyBundle();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? EncryptedPrivateKeyBundleV1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=private_key.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_preferences.pb.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_preferences.pb.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrivatePreferencesAction: () => (/* binding */ PrivatePreferencesAction),\n/* harmony export */   PrivatePreferencesAction_AllowAddress: () => (/* binding */ PrivatePreferencesAction_AllowAddress),\n/* harmony export */   PrivatePreferencesAction_AllowGroup: () => (/* binding */ PrivatePreferencesAction_AllowGroup),\n/* harmony export */   PrivatePreferencesAction_DenyAddress: () => (/* binding */ PrivatePreferencesAction_DenyAddress),\n/* harmony export */   PrivatePreferencesAction_DenyGroup: () => (/* binding */ PrivatePreferencesAction_DenyGroup),\n/* harmony export */   PrivatePreferencesPayload: () => (/* binding */ PrivatePreferencesPayload),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBasePrivatePreferencesAction() {\n    return {\n        allowAddress: undefined,\n        denyAddress: undefined,\n        allowGroup: undefined,\n        denyGroup: undefined,\n    };\n}\nconst PrivatePreferencesAction = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.allowAddress !== undefined) {\n            PrivatePreferencesAction_AllowAddress.encode(message.allowAddress, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.denyAddress !== undefined) {\n            PrivatePreferencesAction_DenyAddress.encode(message.denyAddress, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.allowGroup !== undefined) {\n            PrivatePreferencesAction_AllowGroup.encode(message.allowGroup, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.denyGroup !== undefined) {\n            PrivatePreferencesAction_DenyGroup.encode(message.denyGroup, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.allowAddress = PrivatePreferencesAction_AllowAddress.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.denyAddress = PrivatePreferencesAction_DenyAddress.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.allowGroup = PrivatePreferencesAction_AllowGroup.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.denyGroup = PrivatePreferencesAction_DenyGroup.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            allowAddress: isSet(object.allowAddress)\n                ? PrivatePreferencesAction_AllowAddress.fromJSON(object.allowAddress)\n                : undefined,\n            denyAddress: isSet(object.denyAddress)\n                ? PrivatePreferencesAction_DenyAddress.fromJSON(object.denyAddress)\n                : undefined,\n            allowGroup: isSet(object.allowGroup)\n                ? PrivatePreferencesAction_AllowGroup.fromJSON(object.allowGroup)\n                : undefined,\n            denyGroup: isSet(object.denyGroup)\n                ? PrivatePreferencesAction_DenyGroup.fromJSON(object.denyGroup)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.allowAddress !== undefined &&\n            (obj.allowAddress = message.allowAddress\n                ? PrivatePreferencesAction_AllowAddress.toJSON(message.allowAddress)\n                : undefined);\n        message.denyAddress !== undefined &&\n            (obj.denyAddress = message.denyAddress\n                ? PrivatePreferencesAction_DenyAddress.toJSON(message.denyAddress)\n                : undefined);\n        message.allowGroup !== undefined &&\n            (obj.allowGroup = message.allowGroup\n                ? PrivatePreferencesAction_AllowGroup.toJSON(message.allowGroup)\n                : undefined);\n        message.denyGroup !== undefined &&\n            (obj.denyGroup = message.denyGroup\n                ? PrivatePreferencesAction_DenyGroup.toJSON(message.denyGroup)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePrivatePreferencesAction();\n        message.allowAddress =\n            object.allowAddress !== undefined && object.allowAddress !== null\n                ? PrivatePreferencesAction_AllowAddress.fromPartial(object.allowAddress)\n                : undefined;\n        message.denyAddress =\n            object.denyAddress !== undefined && object.denyAddress !== null\n                ? PrivatePreferencesAction_DenyAddress.fromPartial(object.denyAddress)\n                : undefined;\n        message.allowGroup =\n            object.allowGroup !== undefined && object.allowGroup !== null\n                ? PrivatePreferencesAction_AllowGroup.fromPartial(object.allowGroup)\n                : undefined;\n        message.denyGroup =\n            object.denyGroup !== undefined && object.denyGroup !== null\n                ? PrivatePreferencesAction_DenyGroup.fromPartial(object.denyGroup)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_AllowAddress() {\n    return { walletAddresses: [] };\n}\nconst PrivatePreferencesAction_AllowAddress = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.walletAddresses) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_AllowAddress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletAddresses.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletAddresses: Array.isArray(object === null || object === void 0 ? void 0 : object.walletAddresses)\n                ? object.walletAddresses.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.walletAddresses) {\n            obj.walletAddresses = message.walletAddresses.map((e) => e);\n        }\n        else {\n            obj.walletAddresses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_AllowAddress();\n        message.walletAddresses = ((_a = object.walletAddresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_DenyAddress() {\n    return { walletAddresses: [] };\n}\nconst PrivatePreferencesAction_DenyAddress = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.walletAddresses) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_DenyAddress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletAddresses.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletAddresses: Array.isArray(object === null || object === void 0 ? void 0 : object.walletAddresses)\n                ? object.walletAddresses.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.walletAddresses) {\n            obj.walletAddresses = message.walletAddresses.map((e) => e);\n        }\n        else {\n            obj.walletAddresses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_DenyAddress();\n        message.walletAddresses = ((_a = object.walletAddresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_AllowGroup() {\n    return { groupIds: [] };\n}\nconst PrivatePreferencesAction_AllowGroup = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.groupIds) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_AllowGroup();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.groupIds.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            groupIds: Array.isArray(object === null || object === void 0 ? void 0 : object.groupIds)\n                ? object.groupIds.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.groupIds) {\n            obj.groupIds = message.groupIds.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.groupIds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_AllowGroup();\n        message.groupIds = ((_a = object.groupIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_DenyGroup() {\n    return { groupIds: [] };\n}\nconst PrivatePreferencesAction_DenyGroup = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.groupIds) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_DenyGroup();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.groupIds.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            groupIds: Array.isArray(object === null || object === void 0 ? void 0 : object.groupIds)\n                ? object.groupIds.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.groupIds) {\n            obj.groupIds = message.groupIds.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.groupIds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_DenyGroup();\n        message.groupIds = ((_a = object.groupIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesPayload() {\n    return { v1: undefined };\n}\nconst PrivatePreferencesPayload = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesPayload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePrivatePreferencesPayload();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=private_preferences.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_preferences.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicKey: () => (/* binding */ PublicKey),\n/* harmony export */   PublicKeyBundle: () => (/* binding */ PublicKeyBundle),\n/* harmony export */   PublicKey_Secp256k1Uncompressed: () => (/* binding */ PublicKey_Secp256k1Uncompressed),\n/* harmony export */   SignedPublicKey: () => (/* binding */ SignedPublicKey),\n/* harmony export */   SignedPublicKeyBundle: () => (/* binding */ SignedPublicKeyBundle),\n/* harmony export */   UnsignedPublicKey: () => (/* binding */ UnsignedPublicKey),\n/* harmony export */   UnsignedPublicKey_Secp256k1Uncompressed: () => (/* binding */ UnsignedPublicKey_Secp256k1Uncompressed),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseUnsignedPublicKey() {\n    return { createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, secp256k1Uncompressed: undefined };\n}\nconst UnsignedPublicKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (!message.createdNs.isZero()) {\n            writer.uint32(8).uint64(message.createdNs);\n        }\n        if (message.secp256k1Uncompressed !== undefined) {\n            UnsignedPublicKey_Secp256k1Uncompressed.encode(message.secp256k1Uncompressed, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUnsignedPublicKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 3:\n                    message.secp256k1Uncompressed =\n                        UnsignedPublicKey_Secp256k1Uncompressed.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            secp256k1Uncompressed: isSet(object.secp256k1Uncompressed)\n                ? UnsignedPublicKey_Secp256k1Uncompressed.fromJSON(object.secp256k1Uncompressed)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.secp256k1Uncompressed !== undefined &&\n            (obj.secp256k1Uncompressed = message.secp256k1Uncompressed\n                ? UnsignedPublicKey_Secp256k1Uncompressed.toJSON(message.secp256k1Uncompressed)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseUnsignedPublicKey();\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.secp256k1Uncompressed =\n            object.secp256k1Uncompressed !== undefined &&\n                object.secp256k1Uncompressed !== null\n                ? UnsignedPublicKey_Secp256k1Uncompressed.fromPartial(object.secp256k1Uncompressed)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseUnsignedPublicKey_Secp256k1Uncompressed() {\n    return { bytes: new Uint8Array() };\n}\nconst UnsignedPublicKey_Secp256k1Uncompressed = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUnsignedPublicKey_Secp256k1Uncompressed();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseUnsignedPublicKey_Secp256k1Uncompressed();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSignedPublicKey() {\n    return { keyBytes: new Uint8Array(), signature: undefined };\n}\nconst SignedPublicKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.keyBytes.length !== 0) {\n            writer.uint32(10).bytes(message.keyBytes);\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPublicKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyBytes: isSet(object.keyBytes)\n                ? bytesFromBase64(object.keyBytes)\n                : new Uint8Array(),\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyBytes !== undefined &&\n            (obj.keyBytes = base64FromBytes(message.keyBytes !== undefined ? message.keyBytes : new Uint8Array()));\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedPublicKey();\n        message.keyBytes = (_a = object.keyBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignedPublicKeyBundle() {\n    return { identityKey: undefined, preKey: undefined };\n}\nconst SignedPublicKeyBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            SignedPublicKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.preKey !== undefined) {\n            SignedPublicKey.encode(message.preKey, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPublicKeyBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = SignedPublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.preKey = SignedPublicKey.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? SignedPublicKey.fromJSON(object.identityKey)\n                : undefined,\n            preKey: isSet(object.preKey)\n                ? SignedPublicKey.fromJSON(object.preKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? SignedPublicKey.toJSON(message.identityKey)\n                : undefined);\n        message.preKey !== undefined &&\n            (obj.preKey = message.preKey\n                ? SignedPublicKey.toJSON(message.preKey)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignedPublicKeyBundle();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? SignedPublicKey.fromPartial(object.identityKey)\n                : undefined;\n        message.preKey =\n            object.preKey !== undefined && object.preKey !== null\n                ? SignedPublicKey.fromPartial(object.preKey)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePublicKey() {\n    return {\n        timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        signature: undefined,\n        secp256k1Uncompressed: undefined,\n    };\n}\nconst PublicKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (!message.timestamp.isZero()) {\n            writer.uint32(8).uint64(message.timestamp);\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.secp256k1Uncompressed !== undefined) {\n            PublicKey_Secp256k1Uncompressed.encode(message.secp256k1Uncompressed, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePublicKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.timestamp = reader.uint64();\n                    break;\n                case 2:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.secp256k1Uncompressed =\n                        PublicKey_Secp256k1Uncompressed.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n            secp256k1Uncompressed: isSet(object.secp256k1Uncompressed)\n                ? PublicKey_Secp256k1Uncompressed.fromJSON(object.secp256k1Uncompressed)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        message.secp256k1Uncompressed !== undefined &&\n            (obj.secp256k1Uncompressed = message.secp256k1Uncompressed\n                ? PublicKey_Secp256k1Uncompressed.toJSON(message.secp256k1Uncompressed)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePublicKey();\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        message.secp256k1Uncompressed =\n            object.secp256k1Uncompressed !== undefined &&\n                object.secp256k1Uncompressed !== null\n                ? PublicKey_Secp256k1Uncompressed.fromPartial(object.secp256k1Uncompressed)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePublicKey_Secp256k1Uncompressed() {\n    return { bytes: new Uint8Array() };\n}\nconst PublicKey_Secp256k1Uncompressed = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePublicKey_Secp256k1Uncompressed();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePublicKey_Secp256k1Uncompressed();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBasePublicKeyBundle() {\n    return { identityKey: undefined, preKey: undefined };\n}\nconst PublicKeyBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            PublicKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.preKey !== undefined) {\n            PublicKey.encode(message.preKey, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePublicKeyBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = PublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.preKey = PublicKey.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? PublicKey.fromJSON(object.identityKey)\n                : undefined,\n            preKey: isSet(object.preKey)\n                ? PublicKey.fromJSON(object.preKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? PublicKey.toJSON(message.identityKey)\n                : undefined);\n        message.preKey !== undefined &&\n            (obj.preKey = message.preKey\n                ? PublicKey.toJSON(message.preKey)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePublicKeyBundle();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? PublicKey.fromPartial(object.identityKey)\n                : undefined;\n        message.preKey =\n            object.preKey !== undefined && object.preKey !== null\n                ? PublicKey.fromPartial(object.preKey)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=public_key.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signature: () => (/* binding */ Signature),\n/* harmony export */   Signature_ECDSACompact: () => (/* binding */ Signature_ECDSACompact),\n/* harmony export */   Signature_WalletECDSACompact: () => (/* binding */ Signature_WalletECDSACompact),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseSignature() {\n    return { ecdsaCompact: undefined, walletEcdsaCompact: undefined };\n}\nconst Signature = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.ecdsaCompact !== undefined) {\n            Signature_ECDSACompact.encode(message.ecdsaCompact, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.walletEcdsaCompact !== undefined) {\n            Signature_WalletECDSACompact.encode(message.walletEcdsaCompact, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ecdsaCompact = Signature_ECDSACompact.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.walletEcdsaCompact = Signature_WalletECDSACompact.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ecdsaCompact: isSet(object.ecdsaCompact)\n                ? Signature_ECDSACompact.fromJSON(object.ecdsaCompact)\n                : undefined,\n            walletEcdsaCompact: isSet(object.walletEcdsaCompact)\n                ? Signature_WalletECDSACompact.fromJSON(object.walletEcdsaCompact)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ecdsaCompact !== undefined &&\n            (obj.ecdsaCompact = message.ecdsaCompact\n                ? Signature_ECDSACompact.toJSON(message.ecdsaCompact)\n                : undefined);\n        message.walletEcdsaCompact !== undefined &&\n            (obj.walletEcdsaCompact = message.walletEcdsaCompact\n                ? Signature_WalletECDSACompact.toJSON(message.walletEcdsaCompact)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignature();\n        message.ecdsaCompact =\n            object.ecdsaCompact !== undefined && object.ecdsaCompact !== null\n                ? Signature_ECDSACompact.fromPartial(object.ecdsaCompact)\n                : undefined;\n        message.walletEcdsaCompact =\n            object.walletEcdsaCompact !== undefined &&\n                object.walletEcdsaCompact !== null\n                ? Signature_WalletECDSACompact.fromPartial(object.walletEcdsaCompact)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignature_ECDSACompact() {\n    return { bytes: new Uint8Array(), recovery: 0 };\n}\nconst Signature_ECDSACompact = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        if (message.recovery !== 0) {\n            writer.uint32(16).uint32(message.recovery);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignature_ECDSACompact();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                case 2:\n                    message.recovery = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n            recovery: isSet(object.recovery) ? Number(object.recovery) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        message.recovery !== undefined &&\n            (obj.recovery = Math.round(message.recovery));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSignature_ECDSACompact();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.recovery = (_b = object.recovery) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction createBaseSignature_WalletECDSACompact() {\n    return { bytes: new Uint8Array(), recovery: 0 };\n}\nconst Signature_WalletECDSACompact = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        if (message.recovery !== 0) {\n            writer.uint32(16).uint32(message.recovery);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignature_WalletECDSACompact();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                case 2:\n                    message.recovery = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n            recovery: isSet(object.recovery) ? Number(object.recovery) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        message.recovery !== undefined &&\n            (obj.recovery = Math.round(message.recovery));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSignature_WalletECDSACompact();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.recovery = (_b = object.recovery) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=signature.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signed_payload.pb.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signed_payload.pb.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignedPayload: () => (/* binding */ SignedPayload),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseSignedPayload() {\n    return { payload: new Uint8Array(), signature: undefined };\n}\nconst SignedPayload = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPayload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                case 2:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedPayload();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=signed_payload.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29uc2VudC1wcm9vZi1zaWduYXR1cmUvbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL21lc3NhZ2VfY29udGVudHMvc2lnbmVkX3BheWxvYWQucGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDd0I7QUFDbUI7QUFDTjtBQUM5QjtBQUNQO0FBQ0EsYUFBYTtBQUNiO0FBQ087QUFDUCw2QkFBNkIsZ0VBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFTO0FBQ3JCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx3Q0FBd0Msa0VBQVUsZUFBZSxrRUFBVTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msb0RBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUFTO0FBQzNCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUFTO0FBQzNCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUFTO0FBQzNCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnRUFBUSxVQUFVLDRDQUFJO0FBQzFCLElBQUksZ0VBQVEsUUFBUSw0Q0FBSTtBQUN4QixJQUFJLG1FQUFhO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC9jb25zZW50LXByb29mLXNpZ25hdHVyZS9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbWVzc2FnZV9jb250ZW50cy9zaWduZWRfcGF5bG9hZC5wYi5qcz9jZjBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0IHsgU2lnbmF0dXJlIH0gZnJvbSBcIi4vc2lnbmF0dXJlLnBiXCI7XG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcInhtdHAubWVzc2FnZV9jb250ZW50c1wiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVNpZ25lZFBheWxvYWQoKSB7XG4gICAgcmV0dXJuIHsgcGF5bG9hZDogbmV3IFVpbnQ4QXJyYXkoKSwgc2lnbmF0dXJlOiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBTaWduZWRQYXlsb2FkID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnBheWxvYWQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5ieXRlcyhtZXNzYWdlLnBheWxvYWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ25hdHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBTaWduYXR1cmUuZW5jb2RlKG1lc3NhZ2Uuc2lnbmF0dXJlLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2lnbmVkUGF5bG9hZCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGF5bG9hZCA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlID0gU2lnbmF0dXJlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBheWxvYWQ6IGlzU2V0KG9iamVjdC5wYXlsb2FkKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5wYXlsb2FkKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgICAgIHNpZ25hdHVyZTogaXNTZXQob2JqZWN0LnNpZ25hdHVyZSlcbiAgICAgICAgICAgICAgICA/IFNpZ25hdHVyZS5mcm9tSlNPTihvYmplY3Quc2lnbmF0dXJlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UucGF5bG9hZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnBheWxvYWQgPSBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS5wYXlsb2FkICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLnBheWxvYWQgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouc2lnbmF0dXJlID0gbWVzc2FnZS5zaWduYXR1cmVcbiAgICAgICAgICAgICAgICA/IFNpZ25hdHVyZS50b0pTT04obWVzc2FnZS5zaWduYXR1cmUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTaWduZWRQYXlsb2FkKCk7XG4gICAgICAgIG1lc3NhZ2UucGF5bG9hZCA9IChfYSA9IG9iamVjdC5wYXlsb2FkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZSA9XG4gICAgICAgICAgICBvYmplY3Quc2lnbmF0dXJlICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnNpZ25hdHVyZSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gU2lnbmF0dXJlLmZyb21QYXJ0aWFsKG9iamVjdC5zaWduYXR1cmUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xudmFyIGdsb2JhbFRoaXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB0aHJvdyBcIlVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdFwiO1xufSkoKTtcbmZ1bmN0aW9uIGJ5dGVzRnJvbUJhc2U2NChiNjQpIHtcbiAgICBpZiAoZ2xvYmFsVGhpcy5CdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGI2NCwgXCJiYXNlNjRcIikpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgYmluID0gZ2xvYmFsVGhpcy5hdG9iKGI2NCk7XG4gICAgICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG59XG5mdW5jdGlvbiBiYXNlNjRGcm9tQnl0ZXMoYXJyKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGFycikudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBiaW4gPSBbXTtcbiAgICAgICAgYXJyLmZvckVhY2goKGJ5dGUpID0+IHtcbiAgICAgICAgICAgIGJpbi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXMuYnRvYShiaW4uam9pbihcIlwiKSk7XG4gICAgfVxufVxuaWYgKF9tMC51dGlsLkxvbmcgIT09IExvbmcpIHtcbiAgICBfbTAudXRpbC5Mb25nID0gTG9uZztcbiAgICBfbTAuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnbmVkX3BheWxvYWQucGIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/message_contents/signed_payload.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/node.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/node.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authn: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.authn),\n/* harmony export */   ciphertext: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.ciphertext),\n/* harmony export */   composite: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.composite),\n/* harmony export */   contact: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.contact),\n/* harmony export */   content: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.content),\n/* harmony export */   conversationReference: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.conversationReference),\n/* harmony export */   ecies: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.ecies),\n/* harmony export */   fetcher: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.fetcher),\n/* harmony export */   frames: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.frames),\n/* harmony export */   invitation: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.invitation),\n/* harmony export */   keystore: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.keystore),\n/* harmony export */   message: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.message),\n/* harmony export */   messageApi: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.messageApi),\n/* harmony export */   privateKey: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.privateKey),\n/* harmony export */   privatePreferences: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.privatePreferences),\n/* harmony export */   publicKey: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.publicKey),\n/* harmony export */   signature: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.signature),\n/* harmony export */   signedPayload: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.signedPayload)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/index.js\");\nfunction getGlobal() {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    return undefined;\n}\nconst ctx = getGlobal();\nif (typeof ctx.fetch === \"undefined\") {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { fetch, Request, Response, Headers } = __webpack_require__(/*! undici */ \"undici\");\n    ctx.fetch = fetch;\n    ctx.Request = Request;\n    ctx.Response = Response;\n    ctx.Headers = Headers;\n}\nconst streamClasses = [\n    \"TextDecoderStream\",\n    \"TextEncoderStream\",\n    \"TransformStream\",\n    \"ReadableStream\",\n    \"WritableStream\",\n    \"ByteLengthQueuingStrategy\",\n    \"CountQueuingStrategy\",\n];\nfor (const clsName of streamClasses) {\n    if (typeof ctx[clsName] === \"undefined\") {\n        ctx[clsName] = __webpack_require__(/*! stream/web */ \"stream/web\")[clsName];\n    }\n}\n\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29uc2VudC1wcm9vZi1zaWduYXR1cmUvbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL25vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0NBQW9DLEVBQUUsbUJBQU8sQ0FBQyxzQkFBUTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLDhCQUFZO0FBQzNDO0FBQ0E7QUFDd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC9jb25zZW50LXByb29mLXNpZ25hdHVyZS9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbm9kZS5qcz9lODE0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmNvbnN0IGN0eCA9IGdldEdsb2JhbCgpO1xuaWYgKHR5cGVvZiBjdHguZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuICAgIGNvbnN0IHsgZmV0Y2gsIFJlcXVlc3QsIFJlc3BvbnNlLCBIZWFkZXJzIH0gPSByZXF1aXJlKFwidW5kaWNpXCIpO1xuICAgIGN0eC5mZXRjaCA9IGZldGNoO1xuICAgIGN0eC5SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgICBjdHguUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgICBjdHguSGVhZGVycyA9IEhlYWRlcnM7XG59XG5jb25zdCBzdHJlYW1DbGFzc2VzID0gW1xuICAgIFwiVGV4dERlY29kZXJTdHJlYW1cIixcbiAgICBcIlRleHRFbmNvZGVyU3RyZWFtXCIsXG4gICAgXCJUcmFuc2Zvcm1TdHJlYW1cIixcbiAgICBcIlJlYWRhYmxlU3RyZWFtXCIsXG4gICAgXCJXcml0YWJsZVN0cmVhbVwiLFxuICAgIFwiQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneVwiLFxuICAgIFwiQ291bnRRdWV1aW5nU3RyYXRlZ3lcIixcbl07XG5mb3IgKGNvbnN0IGNsc05hbWUgb2Ygc3RyZWFtQ2xhc3Nlcykge1xuICAgIGlmICh0eXBlb2YgY3R4W2Nsc05hbWVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGN0eFtjbHNOYW1lXSA9IHJlcXVpcmUoXCJzdHJlYW0vd2ViXCIpW2Nsc05hbWVdO1xuICAgIH1cbn1cbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js":
/*!**********************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   b64Decode: () => (/* binding */ b64Decode),\n/* harmony export */   b64Encode: () => (/* binding */ b64Encode),\n/* harmony export */   fetchReq: () => (/* binding */ fetchReq),\n/* harmony export */   fetchStreamingRequest: () => (/* binding */ fetchStreamingRequest),\n/* harmony export */   renderURLSearchParams: () => (/* binding */ renderURLSearchParams),\n/* harmony export */   replacer: () => (/* binding */ replacer)\n/* harmony export */ });\n/* eslint-disable */\n// @ts-nocheck\n/*\n* This file is a generated Typescript file for GRPC Gateway, DO NOT MODIFY\n*/\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/**\n * base64 encoder and decoder\n * Copied and adapted from https://github.com/protobufjs/protobuf.js/blob/master/lib/base64/index.js\n */\n// Base64 encoding table\nconst b64 = new Array(64);\n// Base64 decoding table\nconst s64 = new Array(123);\n// 65..90, 97..122, 48..57, 43, 47\nfor (let i = 0; i < 64;)\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\nfunction b64Encode(buffer, start, end) {\n    let parts = null;\n    const chunk = [];\n    let i = 0, // output index\n    j = 0, // goto index\n    t; // temporary\n    while (start < end) {\n        const b = buffer[start++];\n        switch (j) {\n            case 0:\n                chunk[i++] = b64[b >> 2];\n                t = (b & 3) << 4;\n                j = 1;\n                break;\n            case 1:\n                chunk[i++] = b64[t | b >> 4];\n                t = (b & 15) << 2;\n                j = 2;\n                break;\n            case 2:\n                chunk[i++] = b64[t | b >> 6];\n                chunk[i++] = b64[b & 63];\n                j = 0;\n                break;\n        }\n        if (i > 8191) {\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n            i = 0;\n        }\n    }\n    if (j) {\n        chunk[i++] = b64[t];\n        chunk[i++] = 61;\n        if (j === 1)\n            chunk[i++] = 61;\n    }\n    if (parts) {\n        if (i)\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\n}\nconst invalidEncoding = \"invalid encoding\";\nfunction b64Decode(s) {\n    const buffer = [];\n    let offset = 0;\n    let j = 0, // goto index\n    t; // temporary\n    for (let i = 0; i < s.length;) {\n        let c = s.charCodeAt(i++);\n        if (c === 61 && j > 1)\n            break;\n        if ((c = s64[c]) === undefined)\n            throw Error(invalidEncoding);\n        switch (j) {\n            case 0:\n                t = c;\n                j = 1;\n                break;\n            case 1:\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\n                t = c;\n                j = 2;\n                break;\n            case 2:\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\n                t = c;\n                j = 3;\n                break;\n            case 3:\n                buffer[offset++] = (t & 3) << 6 | c;\n                j = 0;\n                break;\n        }\n    }\n    if (j === 1)\n        throw Error(invalidEncoding);\n    return new Uint8Array(buffer);\n}\nfunction b64Test(s) {\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(s);\n}\nfunction replacer(key, value) {\n    if (value && value.constructor === Uint8Array) {\n        return b64Encode(value, 0, value.length);\n    }\n    return value;\n}\nfunction fetchReq(path, init) {\n    const _a = init || {}, { pathPrefix } = _a, req = __rest(_a, [\"pathPrefix\"]);\n    const url = pathPrefix ? `${pathPrefix}${path}` : path;\n    return fetch(url, req).then(r => r.json().then((body) => {\n        if (!r.ok) {\n            throw body;\n        }\n        return body;\n    }));\n}\n/**\n * fetchStreamingRequest is able to handle grpc-gateway server side streaming call\n * it takes NotifyStreamEntityArrival that lets users respond to entity arrival during the call\n * all entities will be returned as an array after the call finishes.\n **/\nfunction fetchStreamingRequest(path, callback, init) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const _a = init || {}, { pathPrefix } = _a, req = __rest(_a, [\"pathPrefix\"]);\n        const url = pathPrefix ? `${pathPrefix}${path}` : path;\n        const result = yield fetch(url, req);\n        // needs to use the .ok to check the status of HTTP status code\n        // http other than 200 will not throw an error, instead the .ok will become false.\n        // see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#\n        if (!result.ok) {\n            const resp = yield result.json();\n            const errMsg = resp.error && resp.error.message ? resp.error.message : \"\";\n            throw new Error(errMsg);\n        }\n        if (!result.body) {\n            throw new Error(\"response doesnt have a body\");\n        }\n        yield result.body\n            .pipeThrough(new TextDecoderStream())\n            .pipeThrough(getNewLineDelimitedJSONDecodingStream())\n            .pipeTo(getNotifyEntityArrivalSink((e) => {\n            if (callback) {\n                callback(e);\n            }\n        }));\n        // wait for the streaming to finish and return the success respond\n        return;\n    });\n}\n/**\n * getNewLineDelimitedJSONDecodingStream returns a TransformStream that's able to handle new line delimited json stream content into parsed entities\n */\nfunction getNewLineDelimitedJSONDecodingStream() {\n    return new TransformStream({\n        start(controller) {\n            controller.buf = '';\n            controller.pos = 0;\n        },\n        transform(chunk, controller) {\n            if (controller.buf === undefined) {\n                controller.buf = '';\n            }\n            if (controller.pos === undefined) {\n                controller.pos = 0;\n            }\n            controller.buf += chunk;\n            while (controller.pos < controller.buf.length) {\n                if (controller.buf[controller.pos] === '\\n') {\n                    const line = controller.buf.substring(0, controller.pos);\n                    const response = JSON.parse(line);\n                    controller.enqueue(response.result);\n                    controller.buf = controller.buf.substring(controller.pos + 1);\n                    controller.pos = 0;\n                }\n                else {\n                    ++controller.pos;\n                }\n            }\n        }\n    });\n}\n/**\n * getNotifyEntityArrivalSink takes the NotifyStreamEntityArrival callback and return\n * a sink that will call the callback on entity arrival\n * @param notifyCallback\n */\nfunction getNotifyEntityArrivalSink(notifyCallback) {\n    return new WritableStream({\n        write(entity) {\n            notifyCallback(entity);\n        }\n    });\n}\n/**\n * Checks if given value is a plain object\n * Logic copied and adapted from below source:\n * https://github.com/char0n/ramda-adjunct/blob/master/src/isPlainObj.js\n * @param  {unknown} value\n * @return {boolean}\n */\nfunction isPlainObject(value) {\n    const isObject = Object.prototype.toString.call(value).slice(8, -1) === \"Object\";\n    const isObjLike = value !== null && isObject;\n    if (!isObjLike || !isObject) {\n        return false;\n    }\n    const proto = Object.getPrototypeOf(value);\n    const hasObjectConstructor = typeof proto === \"object\" &&\n        proto.constructor === Object.prototype.constructor;\n    return hasObjectConstructor;\n}\n/**\n * Checks if given value is of a primitive type\n * @param  {unknown} value\n * @return {boolean}\n */\nfunction isPrimitive(value) {\n    return [\"string\", \"number\", \"boolean\"].some(t => typeof value === t);\n}\n/**\n * Checks if given primitive is zero-value\n * @param  {Primitive} value\n * @return {boolean}\n */\nfunction isZeroValuePrimitive(value) {\n    return value === false || value === 0 || value === \"\";\n}\n/**\n * Flattens a deeply nested request payload and returns an object\n * with only primitive values and non-empty array of primitive values\n * as per https://github.com/googleapis/googleapis/blob/master/google/api/http.proto\n * @param  {RequestPayload} requestPayload\n * @param  {String} path\n * @return {FlattenedRequestPayload>}\n */\nfunction flattenRequestPayload(requestPayload, path = \"\") {\n    return Object.keys(requestPayload).reduce((acc, key) => {\n        const value = requestPayload[key];\n        const newPath = path ? [path, key].join(\".\") : key;\n        const isNonEmptyPrimitiveArray = Array.isArray(value) &&\n            value.every(v => isPrimitive(v)) &&\n            value.length > 0;\n        const isNonZeroValuePrimitive = isPrimitive(value) && !isZeroValuePrimitive(value);\n        let objectToMerge = {};\n        if (isPlainObject(value)) {\n            objectToMerge = flattenRequestPayload(value, newPath);\n        }\n        else if (isNonZeroValuePrimitive || isNonEmptyPrimitiveArray) {\n            objectToMerge = { [newPath]: value };\n        }\n        return Object.assign(Object.assign({}, acc), objectToMerge);\n    }, {});\n}\n/**\n * Renders a deeply nested request payload into a string of URL search\n * parameters by first flattening the request payload and then removing keys\n * which are already present in the URL path.\n * @param  {RequestPayload} requestPayload\n * @param  {string[]} urlPathParams\n * @return {string}\n */\nfunction renderURLSearchParams(requestPayload, urlPathParams = []) {\n    const flattenedRequestPayload = flattenRequestPayload(requestPayload);\n    const urlSearchParams = Object.keys(flattenedRequestPayload).reduce((acc, key) => {\n        // key should not be present in the url path as a parameter\n        const value = flattenedRequestPayload[key];\n        if (urlPathParams.find(f => f === key)) {\n            return acc;\n        }\n        return Array.isArray(value)\n            ? [...acc, ...value.map(m => [key, m.toString()])]\n            : (acc = [...acc, [key, value.toString()]]);\n    }, []);\n    return new URLSearchParams(urlSearchParams).toString();\n}\n//# sourceMappingURL=fetch.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/google/protobuf/empty.pb.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/google/protobuf/empty.pb.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Empty: () => (/* binding */ Empty),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"google.protobuf\";\nfunction createBaseEmpty() {\n    return {};\n}\nconst Empty = {\n    encode(_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEmpty();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseEmpty();\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\n//# sourceMappingURL=empty.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnBiLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDd0I7QUFDYTtBQUM5QjtBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsdUJBQXVCLGdFQUFVO0FBQ2pDO0FBQ0EsS0FBSztBQUNMO0FBQ0Esd0NBQXdDLGtFQUFVLGVBQWUsa0VBQVU7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJLGdFQUFRLFVBQVUsNENBQUk7QUFDMUIsSUFBSSxnRUFBUSxRQUFRLDRDQUFJO0FBQ3hCLElBQUksbUVBQWE7QUFDakI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wYi5qcz80ZTVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgTG9uZyBmcm9tIFwibG9uZ1wiO1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gXCJnb29nbGUucHJvdG9idWZcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFbXB0eSgpIHtcbiAgICByZXR1cm4ge307XG59XG5leHBvcnQgY29uc3QgRW1wdHkgPSB7XG4gICAgZW5jb2RlKF8sIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFbXB0eSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04oXykge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICB0b0pTT04oXykge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKF8pIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFbXB0eSgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmlmIChfbTAudXRpbC5Mb25nICE9PSBMb25nKSB7XG4gICAgX20wLnV0aWwuTG9uZyA9IExvbmc7XG4gICAgX20wLmNvbmZpZ3VyZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1wdHkucGIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/google/protobuf/empty.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/api/v1/identity.pb.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/identity/api/v1/identity.pb.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GetIdentityUpdatesRequest: () => (/* binding */ GetIdentityUpdatesRequest),\n/* harmony export */   GetIdentityUpdatesRequest_Request: () => (/* binding */ GetIdentityUpdatesRequest_Request),\n/* harmony export */   GetIdentityUpdatesResponse: () => (/* binding */ GetIdentityUpdatesResponse),\n/* harmony export */   GetIdentityUpdatesResponse_IdentityUpdateLog: () => (/* binding */ GetIdentityUpdatesResponse_IdentityUpdateLog),\n/* harmony export */   GetIdentityUpdatesResponse_Response: () => (/* binding */ GetIdentityUpdatesResponse_Response),\n/* harmony export */   GetInboxIdsRequest: () => (/* binding */ GetInboxIdsRequest),\n/* harmony export */   GetInboxIdsRequest_Request: () => (/* binding */ GetInboxIdsRequest_Request),\n/* harmony export */   GetInboxIdsResponse: () => (/* binding */ GetInboxIdsResponse),\n/* harmony export */   GetInboxIdsResponse_Response: () => (/* binding */ GetInboxIdsResponse_Response),\n/* harmony export */   IdentityApiClientImpl: () => (/* binding */ IdentityApiClientImpl),\n/* harmony export */   PublishIdentityUpdateRequest: () => (/* binding */ PublishIdentityUpdateRequest),\n/* harmony export */   PublishIdentityUpdateResponse: () => (/* binding */ PublishIdentityUpdateResponse),\n/* harmony export */   UnverifiedSmartContractWalletSignature: () => (/* binding */ UnverifiedSmartContractWalletSignature),\n/* harmony export */   VerifySmartContractWalletSignaturesRequest: () => (/* binding */ VerifySmartContractWalletSignaturesRequest),\n/* harmony export */   VerifySmartContractWalletSignaturesResponse: () => (/* binding */ VerifySmartContractWalletSignaturesResponse),\n/* harmony export */   VerifySmartContractWalletSignaturesResponse_ValidationResponse: () => (/* binding */ VerifySmartContractWalletSignaturesResponse_ValidationResponse),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _associations_signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../associations/signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/signature.pb.js\");\n/* harmony import */ var _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../associations/association.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/association.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.identity.api.v1\";\nfunction createBaseVerifySmartContractWalletSignaturesRequest() {\n    return { signatures: [] };\n}\nconst VerifySmartContractWalletSignaturesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.signatures) {\n            UnverifiedSmartContractWalletSignature.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVerifySmartContractWalletSignaturesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signatures.push(UnverifiedSmartContractWalletSignature.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            signatures: Array.isArray(object === null || object === void 0 ? void 0 : object.signatures)\n                ? object.signatures.map((e) => UnverifiedSmartContractWalletSignature.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => e ? UnverifiedSmartContractWalletSignature.toJSON(e) : undefined);\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseVerifySmartContractWalletSignaturesRequest();\n        message.signatures =\n            ((_a = object.signatures) === null || _a === void 0 ? void 0 : _a.map((e) => UnverifiedSmartContractWalletSignature.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseUnverifiedSmartContractWalletSignature() {\n    return { scwSignature: undefined, hash: new Uint8Array() };\n}\nconst UnverifiedSmartContractWalletSignature = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.scwSignature !== undefined) {\n            _associations_signature_pb__WEBPACK_IMPORTED_MODULE_1__.SmartContractWalletSignature.encode(message.scwSignature, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.hash.length !== 0) {\n            writer.uint32(42).bytes(message.hash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUnverifiedSmartContractWalletSignature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.scwSignature = _associations_signature_pb__WEBPACK_IMPORTED_MODULE_1__.SmartContractWalletSignature.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            scwSignature: isSet(object.scwSignature)\n                ? _associations_signature_pb__WEBPACK_IMPORTED_MODULE_1__.SmartContractWalletSignature.fromJSON(object.scwSignature)\n                : undefined,\n            hash: isSet(object.hash)\n                ? bytesFromBase64(object.hash)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.scwSignature !== undefined &&\n            (obj.scwSignature = message.scwSignature\n                ? _associations_signature_pb__WEBPACK_IMPORTED_MODULE_1__.SmartContractWalletSignature.toJSON(message.scwSignature)\n                : undefined);\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseUnverifiedSmartContractWalletSignature();\n        message.scwSignature =\n            object.scwSignature !== undefined && object.scwSignature !== null\n                ? _associations_signature_pb__WEBPACK_IMPORTED_MODULE_1__.SmartContractWalletSignature.fromPartial(object.scwSignature)\n                : undefined;\n        message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseVerifySmartContractWalletSignaturesResponse() {\n    return { responses: [] };\n}\nconst VerifySmartContractWalletSignaturesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.responses) {\n            VerifySmartContractWalletSignaturesResponse_ValidationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVerifySmartContractWalletSignaturesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(VerifySmartContractWalletSignaturesResponse_ValidationResponse.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => VerifySmartContractWalletSignaturesResponse_ValidationResponse.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e\n                ? VerifySmartContractWalletSignaturesResponse_ValidationResponse.toJSON(e)\n                : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseVerifySmartContractWalletSignaturesResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => VerifySmartContractWalletSignaturesResponse_ValidationResponse.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseVerifySmartContractWalletSignaturesResponse_ValidationResponse() {\n    return { isValid: false, error: undefined };\n}\nconst VerifySmartContractWalletSignaturesResponse_ValidationResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.isValid === true) {\n            writer.uint32(8).bool(message.isValid);\n        }\n        if (message.error !== undefined) {\n            writer.uint32(18).string(message.error);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVerifySmartContractWalletSignaturesResponse_ValidationResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.isValid = reader.bool();\n                    break;\n                case 2:\n                    message.error = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            isValid: isSet(object.isValid) ? Boolean(object.isValid) : false,\n            error: isSet(object.error) ? String(object.error) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.isValid !== undefined && (obj.isValid = message.isValid);\n        message.error !== undefined && (obj.error = message.error);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseVerifySmartContractWalletSignaturesResponse_ValidationResponse();\n        message.isValid = (_a = object.isValid) !== null && _a !== void 0 ? _a : false;\n        message.error = (_b = object.error) !== null && _b !== void 0 ? _b : undefined;\n        return message;\n    },\n};\nfunction createBasePublishIdentityUpdateRequest() {\n    return { identityUpdate: undefined };\n}\nconst PublishIdentityUpdateRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.identityUpdate !== undefined) {\n            _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.encode(message.identityUpdate, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePublishIdentityUpdateRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityUpdate = _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityUpdate: isSet(object.identityUpdate)\n                ? _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromJSON(object.identityUpdate)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityUpdate !== undefined &&\n            (obj.identityUpdate = message.identityUpdate\n                ? _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.toJSON(message.identityUpdate)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePublishIdentityUpdateRequest();\n        message.identityUpdate =\n            object.identityUpdate !== undefined && object.identityUpdate !== null\n                ? _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromPartial(object.identityUpdate)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePublishIdentityUpdateResponse() {\n    return {};\n}\nconst PublishIdentityUpdateResponse = {\n    encode(_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePublishIdentityUpdateResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBasePublishIdentityUpdateResponse();\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesRequest() {\n    return { requests: [] };\n}\nconst GetIdentityUpdatesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.requests) {\n            GetIdentityUpdatesRequest_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(GetIdentityUpdatesRequest_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => GetIdentityUpdatesRequest_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? GetIdentityUpdatesRequest_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetIdentityUpdatesRequest();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => GetIdentityUpdatesRequest_Request.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesRequest_Request() {\n    return { inboxId: \"\", sequenceId: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst GetIdentityUpdatesRequest_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.inboxId !== \"\") {\n            writer.uint32(10).string(message.inboxId);\n        }\n        if (!message.sequenceId.isZero()) {\n            writer.uint32(16).uint64(message.sequenceId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesRequest_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inboxId = reader.string();\n                    break;\n                case 2:\n                    message.sequenceId = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : \"\",\n            sequenceId: isSet(object.sequenceId)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.sequenceId)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        message.sequenceId !== undefined &&\n            (obj.sequenceId = (message.sequenceId || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetIdentityUpdatesRequest_Request();\n        message.inboxId = (_a = object.inboxId) !== null && _a !== void 0 ? _a : \"\";\n        message.sequenceId =\n            object.sequenceId !== undefined && object.sequenceId !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.sequenceId)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesResponse() {\n    return { responses: [] };\n}\nconst GetIdentityUpdatesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.responses) {\n            GetIdentityUpdatesResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(GetIdentityUpdatesResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => GetIdentityUpdatesResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? GetIdentityUpdatesResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetIdentityUpdatesResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => GetIdentityUpdatesResponse_Response.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesResponse_IdentityUpdateLog() {\n    return {\n        sequenceId: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        serverTimestampNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        update: undefined,\n    };\n}\nconst GetIdentityUpdatesResponse_IdentityUpdateLog = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (!message.sequenceId.isZero()) {\n            writer.uint32(8).uint64(message.sequenceId);\n        }\n        if (!message.serverTimestampNs.isZero()) {\n            writer.uint32(16).uint64(message.serverTimestampNs);\n        }\n        if (message.update !== undefined) {\n            _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.encode(message.update, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesResponse_IdentityUpdateLog();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sequenceId = reader.uint64();\n                    break;\n                case 2:\n                    message.serverTimestampNs = reader.uint64();\n                    break;\n                case 3:\n                    message.update = _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sequenceId: isSet(object.sequenceId)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.sequenceId)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            serverTimestampNs: isSet(object.serverTimestampNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.serverTimestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            update: isSet(object.update)\n                ? _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromJSON(object.update)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sequenceId !== undefined &&\n            (obj.sequenceId = (message.sequenceId || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.serverTimestampNs !== undefined &&\n            (obj.serverTimestampNs = (message.serverTimestampNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.update !== undefined &&\n            (obj.update = message.update\n                ? _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.toJSON(message.update)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseGetIdentityUpdatesResponse_IdentityUpdateLog();\n        message.sequenceId =\n            object.sequenceId !== undefined && object.sequenceId !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.sequenceId)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.serverTimestampNs =\n            object.serverTimestampNs !== undefined &&\n                object.serverTimestampNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.serverTimestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.update =\n            object.update !== undefined && object.update !== null\n                ? _associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromPartial(object.update)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesResponse_Response() {\n    return { inboxId: \"\", updates: [] };\n}\nconst GetIdentityUpdatesResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.inboxId !== \"\") {\n            writer.uint32(10).string(message.inboxId);\n        }\n        for (const v of message.updates) {\n            GetIdentityUpdatesResponse_IdentityUpdateLog.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inboxId = reader.string();\n                    break;\n                case 2:\n                    message.updates.push(GetIdentityUpdatesResponse_IdentityUpdateLog.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : \"\",\n            updates: Array.isArray(object === null || object === void 0 ? void 0 : object.updates)\n                ? object.updates.map((e) => GetIdentityUpdatesResponse_IdentityUpdateLog.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        if (message.updates) {\n            obj.updates = message.updates.map((e) => e ? GetIdentityUpdatesResponse_IdentityUpdateLog.toJSON(e) : undefined);\n        }\n        else {\n            obj.updates = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGetIdentityUpdatesResponse_Response();\n        message.inboxId = (_a = object.inboxId) !== null && _a !== void 0 ? _a : \"\";\n        message.updates =\n            ((_b = object.updates) === null || _b === void 0 ? void 0 : _b.map((e) => GetIdentityUpdatesResponse_IdentityUpdateLog.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGetInboxIdsRequest() {\n    return { requests: [] };\n}\nconst GetInboxIdsRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.requests) {\n            GetInboxIdsRequest_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetInboxIdsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(GetInboxIdsRequest_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => GetInboxIdsRequest_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? GetInboxIdsRequest_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetInboxIdsRequest();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => GetInboxIdsRequest_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseGetInboxIdsRequest_Request() {\n    return { address: \"\" };\n}\nconst GetInboxIdsRequest_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetInboxIdsRequest_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            address: isSet(object.address) ? String(object.address) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetInboxIdsRequest_Request();\n        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseGetInboxIdsResponse() {\n    return { responses: [] };\n}\nconst GetInboxIdsResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.responses) {\n            GetInboxIdsResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetInboxIdsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(GetInboxIdsResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => GetInboxIdsResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? GetInboxIdsResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetInboxIdsResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => GetInboxIdsResponse_Response.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGetInboxIdsResponse_Response() {\n    return { address: \"\", inboxId: undefined };\n}\nconst GetInboxIdsResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.inboxId !== undefined) {\n            writer.uint32(18).string(message.inboxId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetInboxIdsResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.inboxId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            address: isSet(object.address) ? String(object.address) : \"\",\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGetInboxIdsResponse_Response();\n        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : \"\";\n        message.inboxId = (_b = object.inboxId) !== null && _b !== void 0 ? _b : undefined;\n        return message;\n    },\n};\nclass IdentityApiClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.PublishIdentityUpdate = this.PublishIdentityUpdate.bind(this);\n        this.GetIdentityUpdates = this.GetIdentityUpdates.bind(this);\n        this.GetInboxIds = this.GetInboxIds.bind(this);\n        this.VerifySmartContractWalletSignatures =\n            this.VerifySmartContractWalletSignatures.bind(this);\n    }\n    PublishIdentityUpdate(request) {\n        const data = PublishIdentityUpdateRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.identity.api.v1.IdentityApi\", \"PublishIdentityUpdate\", data);\n        return promise.then((data) => PublishIdentityUpdateResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    GetIdentityUpdates(request) {\n        const data = GetIdentityUpdatesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.identity.api.v1.IdentityApi\", \"GetIdentityUpdates\", data);\n        return promise.then((data) => GetIdentityUpdatesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    GetInboxIds(request) {\n        const data = GetInboxIdsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.identity.api.v1.IdentityApi\", \"GetInboxIds\", data);\n        return promise.then((data) => GetInboxIdsResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    VerifySmartContractWalletSignatures(request) {\n        const data = VerifySmartContractWalletSignaturesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.identity.api.v1.IdentityApi\", \"VerifySmartContractWalletSignatures\", data);\n        return promise.then((data) => VerifySmartContractWalletSignaturesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n}\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=identity.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/api/v1/identity.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/association.pb.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/association.pb.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddAssociation: () => (/* binding */ AddAssociation),\n/* harmony export */   AssociationState: () => (/* binding */ AssociationState),\n/* harmony export */   AssociationStateDiff: () => (/* binding */ AssociationStateDiff),\n/* harmony export */   ChangeRecoveryAddress: () => (/* binding */ ChangeRecoveryAddress),\n/* harmony export */   CreateInbox: () => (/* binding */ CreateInbox),\n/* harmony export */   IdentityAction: () => (/* binding */ IdentityAction),\n/* harmony export */   IdentityUpdate: () => (/* binding */ IdentityUpdate),\n/* harmony export */   Member: () => (/* binding */ Member),\n/* harmony export */   MemberIdentifier: () => (/* binding */ MemberIdentifier),\n/* harmony export */   MemberMap: () => (/* binding */ MemberMap),\n/* harmony export */   RevokeAssociation: () => (/* binding */ RevokeAssociation),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.identity.associations\";\nfunction createBaseMemberIdentifier() {\n    return { address: undefined, installationPublicKey: undefined };\n}\nconst MemberIdentifier = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.address !== undefined) {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.installationPublicKey !== undefined) {\n            writer.uint32(18).bytes(message.installationPublicKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMemberIdentifier();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.installationPublicKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            address: isSet(object.address) ? String(object.address) : undefined,\n            installationPublicKey: isSet(object.installationPublicKey)\n                ? bytesFromBase64(object.installationPublicKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.installationPublicKey !== undefined &&\n            (obj.installationPublicKey =\n                message.installationPublicKey !== undefined\n                    ? base64FromBytes(message.installationPublicKey)\n                    : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMemberIdentifier();\n        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : undefined;\n        message.installationPublicKey = (_b = object.installationPublicKey) !== null && _b !== void 0 ? _b : undefined;\n        return message;\n    },\n};\nfunction createBaseMember() {\n    return {\n        identifier: undefined,\n        addedByEntity: undefined,\n        clientTimestampNs: undefined,\n    };\n}\nconst Member = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.identifier !== undefined) {\n            MemberIdentifier.encode(message.identifier, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.addedByEntity !== undefined) {\n            MemberIdentifier.encode(message.addedByEntity, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.clientTimestampNs !== undefined) {\n            writer.uint32(24).uint64(message.clientTimestampNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMember();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identifier = MemberIdentifier.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.addedByEntity = MemberIdentifier.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.clientTimestampNs = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identifier: isSet(object.identifier)\n                ? MemberIdentifier.fromJSON(object.identifier)\n                : undefined,\n            addedByEntity: isSet(object.addedByEntity)\n                ? MemberIdentifier.fromJSON(object.addedByEntity)\n                : undefined,\n            clientTimestampNs: isSet(object.clientTimestampNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.clientTimestampNs)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identifier !== undefined &&\n            (obj.identifier = message.identifier\n                ? MemberIdentifier.toJSON(message.identifier)\n                : undefined);\n        message.addedByEntity !== undefined &&\n            (obj.addedByEntity = message.addedByEntity\n                ? MemberIdentifier.toJSON(message.addedByEntity)\n                : undefined);\n        message.clientTimestampNs !== undefined &&\n            (obj.clientTimestampNs = (message.clientTimestampNs || undefined).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMember();\n        message.identifier =\n            object.identifier !== undefined && object.identifier !== null\n                ? MemberIdentifier.fromPartial(object.identifier)\n                : undefined;\n        message.addedByEntity =\n            object.addedByEntity !== undefined && object.addedByEntity !== null\n                ? MemberIdentifier.fromPartial(object.addedByEntity)\n                : undefined;\n        message.clientTimestampNs =\n            object.clientTimestampNs !== undefined &&\n                object.clientTimestampNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.clientTimestampNs)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseCreateInbox() {\n    return {\n        initialAddress: \"\",\n        nonce: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        initialAddressSignature: undefined,\n    };\n}\nconst CreateInbox = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.initialAddress !== \"\") {\n            writer.uint32(10).string(message.initialAddress);\n        }\n        if (!message.nonce.isZero()) {\n            writer.uint32(16).uint64(message.nonce);\n        }\n        if (message.initialAddressSignature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.initialAddressSignature, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateInbox();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.initialAddress = reader.string();\n                    break;\n                case 2:\n                    message.nonce = reader.uint64();\n                    break;\n                case 3:\n                    message.initialAddressSignature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            initialAddress: isSet(object.initialAddress)\n                ? String(object.initialAddress)\n                : \"\",\n            nonce: isSet(object.nonce) ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.nonce) : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            initialAddressSignature: isSet(object.initialAddressSignature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.initialAddressSignature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.initialAddress !== undefined &&\n            (obj.initialAddress = message.initialAddress);\n        message.nonce !== undefined &&\n            (obj.nonce = (message.nonce || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.initialAddressSignature !== undefined &&\n            (obj.initialAddressSignature = message.initialAddressSignature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.initialAddressSignature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseCreateInbox();\n        message.initialAddress = (_a = object.initialAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.nonce =\n            object.nonce !== undefined && object.nonce !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.nonce)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.initialAddressSignature =\n            object.initialAddressSignature !== undefined &&\n                object.initialAddressSignature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.initialAddressSignature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseAddAssociation() {\n    return {\n        newMemberIdentifier: undefined,\n        existingMemberSignature: undefined,\n        newMemberSignature: undefined,\n    };\n}\nconst AddAssociation = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.newMemberIdentifier !== undefined) {\n            MemberIdentifier.encode(message.newMemberIdentifier, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.existingMemberSignature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.existingMemberSignature, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.newMemberSignature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.newMemberSignature, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAddAssociation();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.newMemberIdentifier = MemberIdentifier.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.existingMemberSignature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.newMemberSignature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            newMemberIdentifier: isSet(object.newMemberIdentifier)\n                ? MemberIdentifier.fromJSON(object.newMemberIdentifier)\n                : undefined,\n            existingMemberSignature: isSet(object.existingMemberSignature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.existingMemberSignature)\n                : undefined,\n            newMemberSignature: isSet(object.newMemberSignature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.newMemberSignature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.newMemberIdentifier !== undefined &&\n            (obj.newMemberIdentifier = message.newMemberIdentifier\n                ? MemberIdentifier.toJSON(message.newMemberIdentifier)\n                : undefined);\n        message.existingMemberSignature !== undefined &&\n            (obj.existingMemberSignature = message.existingMemberSignature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.existingMemberSignature)\n                : undefined);\n        message.newMemberSignature !== undefined &&\n            (obj.newMemberSignature = message.newMemberSignature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.newMemberSignature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseAddAssociation();\n        message.newMemberIdentifier =\n            object.newMemberIdentifier !== undefined &&\n                object.newMemberIdentifier !== null\n                ? MemberIdentifier.fromPartial(object.newMemberIdentifier)\n                : undefined;\n        message.existingMemberSignature =\n            object.existingMemberSignature !== undefined &&\n                object.existingMemberSignature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.existingMemberSignature)\n                : undefined;\n        message.newMemberSignature =\n            object.newMemberSignature !== undefined &&\n                object.newMemberSignature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.newMemberSignature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseRevokeAssociation() {\n    return { memberToRevoke: undefined, recoveryAddressSignature: undefined };\n}\nconst RevokeAssociation = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.memberToRevoke !== undefined) {\n            MemberIdentifier.encode(message.memberToRevoke, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.recoveryAddressSignature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.recoveryAddressSignature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRevokeAssociation();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.memberToRevoke = MemberIdentifier.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.recoveryAddressSignature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            memberToRevoke: isSet(object.memberToRevoke)\n                ? MemberIdentifier.fromJSON(object.memberToRevoke)\n                : undefined,\n            recoveryAddressSignature: isSet(object.recoveryAddressSignature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.recoveryAddressSignature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.memberToRevoke !== undefined &&\n            (obj.memberToRevoke = message.memberToRevoke\n                ? MemberIdentifier.toJSON(message.memberToRevoke)\n                : undefined);\n        message.recoveryAddressSignature !== undefined &&\n            (obj.recoveryAddressSignature = message.recoveryAddressSignature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.recoveryAddressSignature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseRevokeAssociation();\n        message.memberToRevoke =\n            object.memberToRevoke !== undefined && object.memberToRevoke !== null\n                ? MemberIdentifier.fromPartial(object.memberToRevoke)\n                : undefined;\n        message.recoveryAddressSignature =\n            object.recoveryAddressSignature !== undefined &&\n                object.recoveryAddressSignature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.recoveryAddressSignature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseChangeRecoveryAddress() {\n    return {\n        newRecoveryAddress: \"\",\n        existingRecoveryAddressSignature: undefined,\n    };\n}\nconst ChangeRecoveryAddress = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.newRecoveryAddress !== \"\") {\n            writer.uint32(10).string(message.newRecoveryAddress);\n        }\n        if (message.existingRecoveryAddressSignature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.existingRecoveryAddressSignature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseChangeRecoveryAddress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.newRecoveryAddress = reader.string();\n                    break;\n                case 2:\n                    message.existingRecoveryAddressSignature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            newRecoveryAddress: isSet(object.newRecoveryAddress)\n                ? String(object.newRecoveryAddress)\n                : \"\",\n            existingRecoveryAddressSignature: isSet(object.existingRecoveryAddressSignature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.existingRecoveryAddressSignature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.newRecoveryAddress !== undefined &&\n            (obj.newRecoveryAddress = message.newRecoveryAddress);\n        message.existingRecoveryAddressSignature !== undefined &&\n            (obj.existingRecoveryAddressSignature =\n                message.existingRecoveryAddressSignature\n                    ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.existingRecoveryAddressSignature)\n                    : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseChangeRecoveryAddress();\n        message.newRecoveryAddress = (_a = object.newRecoveryAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.existingRecoveryAddressSignature =\n            object.existingRecoveryAddressSignature !== undefined &&\n                object.existingRecoveryAddressSignature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.existingRecoveryAddressSignature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseIdentityAction() {\n    return {\n        createInbox: undefined,\n        add: undefined,\n        revoke: undefined,\n        changeRecoveryAddress: undefined,\n    };\n}\nconst IdentityAction = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.createInbox !== undefined) {\n            CreateInbox.encode(message.createInbox, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.add !== undefined) {\n            AddAssociation.encode(message.add, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.revoke !== undefined) {\n            RevokeAssociation.encode(message.revoke, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.changeRecoveryAddress !== undefined) {\n            ChangeRecoveryAddress.encode(message.changeRecoveryAddress, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIdentityAction();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.createInbox = CreateInbox.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.add = AddAssociation.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.revoke = RevokeAssociation.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.changeRecoveryAddress = ChangeRecoveryAddress.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            createInbox: isSet(object.createInbox)\n                ? CreateInbox.fromJSON(object.createInbox)\n                : undefined,\n            add: isSet(object.add) ? AddAssociation.fromJSON(object.add) : undefined,\n            revoke: isSet(object.revoke)\n                ? RevokeAssociation.fromJSON(object.revoke)\n                : undefined,\n            changeRecoveryAddress: isSet(object.changeRecoveryAddress)\n                ? ChangeRecoveryAddress.fromJSON(object.changeRecoveryAddress)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.createInbox !== undefined &&\n            (obj.createInbox = message.createInbox\n                ? CreateInbox.toJSON(message.createInbox)\n                : undefined);\n        message.add !== undefined &&\n            (obj.add = message.add ? AddAssociation.toJSON(message.add) : undefined);\n        message.revoke !== undefined &&\n            (obj.revoke = message.revoke\n                ? RevokeAssociation.toJSON(message.revoke)\n                : undefined);\n        message.changeRecoveryAddress !== undefined &&\n            (obj.changeRecoveryAddress = message.changeRecoveryAddress\n                ? ChangeRecoveryAddress.toJSON(message.changeRecoveryAddress)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseIdentityAction();\n        message.createInbox =\n            object.createInbox !== undefined && object.createInbox !== null\n                ? CreateInbox.fromPartial(object.createInbox)\n                : undefined;\n        message.add =\n            object.add !== undefined && object.add !== null\n                ? AddAssociation.fromPartial(object.add)\n                : undefined;\n        message.revoke =\n            object.revoke !== undefined && object.revoke !== null\n                ? RevokeAssociation.fromPartial(object.revoke)\n                : undefined;\n        message.changeRecoveryAddress =\n            object.changeRecoveryAddress !== undefined &&\n                object.changeRecoveryAddress !== null\n                ? ChangeRecoveryAddress.fromPartial(object.changeRecoveryAddress)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseIdentityUpdate() {\n    return { actions: [], clientTimestampNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, inboxId: \"\" };\n}\nconst IdentityUpdate = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.actions) {\n            IdentityAction.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (!message.clientTimestampNs.isZero()) {\n            writer.uint32(16).uint64(message.clientTimestampNs);\n        }\n        if (message.inboxId !== \"\") {\n            writer.uint32(26).string(message.inboxId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIdentityUpdate();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.actions.push(IdentityAction.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.clientTimestampNs = reader.uint64();\n                    break;\n                case 3:\n                    message.inboxId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            actions: Array.isArray(object === null || object === void 0 ? void 0 : object.actions)\n                ? object.actions.map((e) => IdentityAction.fromJSON(e))\n                : [],\n            clientTimestampNs: isSet(object.clientTimestampNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.clientTimestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.actions) {\n            obj.actions = message.actions.map((e) => e ? IdentityAction.toJSON(e) : undefined);\n        }\n        else {\n            obj.actions = [];\n        }\n        message.clientTimestampNs !== undefined &&\n            (obj.clientTimestampNs = (message.clientTimestampNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseIdentityUpdate();\n        message.actions =\n            ((_a = object.actions) === null || _a === void 0 ? void 0 : _a.map((e) => IdentityAction.fromPartial(e))) || [];\n        message.clientTimestampNs =\n            object.clientTimestampNs !== undefined &&\n                object.clientTimestampNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.clientTimestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.inboxId = (_b = object.inboxId) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseMemberMap() {\n    return { key: undefined, value: undefined };\n}\nconst MemberMap = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.key !== undefined) {\n            MemberIdentifier.encode(message.key, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.value !== undefined) {\n            Member.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMemberMap();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = MemberIdentifier.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.value = Member.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key)\n                ? MemberIdentifier.fromJSON(object.key)\n                : undefined,\n            value: isSet(object.value) ? Member.fromJSON(object.value) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = message.key\n                ? MemberIdentifier.toJSON(message.key)\n                : undefined);\n        message.value !== undefined &&\n            (obj.value = message.value ? Member.toJSON(message.value) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMemberMap();\n        message.key =\n            object.key !== undefined && object.key !== null\n                ? MemberIdentifier.fromPartial(object.key)\n                : undefined;\n        message.value =\n            object.value !== undefined && object.value !== null\n                ? Member.fromPartial(object.value)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseAssociationState() {\n    return { inboxId: \"\", members: [], recoveryAddress: \"\", seenSignatures: [] };\n}\nconst AssociationState = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.inboxId !== \"\") {\n            writer.uint32(10).string(message.inboxId);\n        }\n        for (const v of message.members) {\n            MemberMap.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.recoveryAddress !== \"\") {\n            writer.uint32(26).string(message.recoveryAddress);\n        }\n        for (const v of message.seenSignatures) {\n            writer.uint32(34).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAssociationState();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inboxId = reader.string();\n                    break;\n                case 2:\n                    message.members.push(MemberMap.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.recoveryAddress = reader.string();\n                    break;\n                case 4:\n                    message.seenSignatures.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : \"\",\n            members: Array.isArray(object === null || object === void 0 ? void 0 : object.members)\n                ? object.members.map((e) => MemberMap.fromJSON(e))\n                : [],\n            recoveryAddress: isSet(object.recoveryAddress)\n                ? String(object.recoveryAddress)\n                : \"\",\n            seenSignatures: Array.isArray(object === null || object === void 0 ? void 0 : object.seenSignatures)\n                ? object.seenSignatures.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        if (message.members) {\n            obj.members = message.members.map((e) => e ? MemberMap.toJSON(e) : undefined);\n        }\n        else {\n            obj.members = [];\n        }\n        message.recoveryAddress !== undefined &&\n            (obj.recoveryAddress = message.recoveryAddress);\n        if (message.seenSignatures) {\n            obj.seenSignatures = message.seenSignatures.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.seenSignatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseAssociationState();\n        message.inboxId = (_a = object.inboxId) !== null && _a !== void 0 ? _a : \"\";\n        message.members =\n            ((_b = object.members) === null || _b === void 0 ? void 0 : _b.map((e) => MemberMap.fromPartial(e))) || [];\n        message.recoveryAddress = (_c = object.recoveryAddress) !== null && _c !== void 0 ? _c : \"\";\n        message.seenSignatures = ((_d = object.seenSignatures) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseAssociationStateDiff() {\n    return { newMembers: [], removedMembers: [] };\n}\nconst AssociationStateDiff = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.newMembers) {\n            MemberIdentifier.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.removedMembers) {\n            MemberIdentifier.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAssociationStateDiff();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.newMembers.push(MemberIdentifier.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.removedMembers.push(MemberIdentifier.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            newMembers: Array.isArray(object === null || object === void 0 ? void 0 : object.newMembers)\n                ? object.newMembers.map((e) => MemberIdentifier.fromJSON(e))\n                : [],\n            removedMembers: Array.isArray(object === null || object === void 0 ? void 0 : object.removedMembers)\n                ? object.removedMembers.map((e) => MemberIdentifier.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.newMembers) {\n            obj.newMembers = message.newMembers.map((e) => e ? MemberIdentifier.toJSON(e) : undefined);\n        }\n        else {\n            obj.newMembers = [];\n        }\n        if (message.removedMembers) {\n            obj.removedMembers = message.removedMembers.map((e) => e ? MemberIdentifier.toJSON(e) : undefined);\n        }\n        else {\n            obj.removedMembers = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseAssociationStateDiff();\n        message.newMembers =\n            ((_a = object.newMembers) === null || _a === void 0 ? void 0 : _a.map((e) => MemberIdentifier.fromPartial(e))) || [];\n        message.removedMembers =\n            ((_b = object.removedMembers) === null || _b === void 0 ? void 0 : _b.map((e) => MemberIdentifier.fromPartial(e))) || [];\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=association.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/association.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/signature.pb.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/signature.pb.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LegacyDelegatedSignature: () => (/* binding */ LegacyDelegatedSignature),\n/* harmony export */   RecoverableEcdsaSignature: () => (/* binding */ RecoverableEcdsaSignature),\n/* harmony export */   RecoverableEd25519Signature: () => (/* binding */ RecoverableEd25519Signature),\n/* harmony export */   Signature: () => (/* binding */ Signature),\n/* harmony export */   SmartContractWalletSignature: () => (/* binding */ SmartContractWalletSignature),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../message_contents/public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.identity.associations\";\nfunction createBaseRecoverableEcdsaSignature() {\n    return { bytes: new Uint8Array() };\n}\nconst RecoverableEcdsaSignature = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRecoverableEcdsaSignature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseRecoverableEcdsaSignature();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseRecoverableEd25519Signature() {\n    return { bytes: new Uint8Array(), publicKey: new Uint8Array() };\n}\nconst RecoverableEd25519Signature = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        if (message.publicKey.length !== 0) {\n            writer.uint32(18).bytes(message.publicKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRecoverableEd25519Signature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                case 2:\n                    message.publicKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n            publicKey: isSet(object.publicKey)\n                ? bytesFromBase64(object.publicKey)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        message.publicKey !== undefined &&\n            (obj.publicKey = base64FromBytes(message.publicKey !== undefined ? message.publicKey : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseRecoverableEd25519Signature();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.publicKey = (_b = object.publicKey) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSmartContractWalletSignature() {\n    return {\n        accountId: \"\",\n        blockNumber: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        signature: new Uint8Array(),\n    };\n}\nconst SmartContractWalletSignature = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.accountId !== \"\") {\n            writer.uint32(10).string(message.accountId);\n        }\n        if (!message.blockNumber.isZero()) {\n            writer.uint32(16).uint64(message.blockNumber);\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(26).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSmartContractWalletSignature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accountId = reader.string();\n                    break;\n                case 2:\n                    message.blockNumber = reader.uint64();\n                    break;\n                case 3:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accountId: isSet(object.accountId) ? String(object.accountId) : \"\",\n            blockNumber: isSet(object.blockNumber)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.blockNumber)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            signature: isSet(object.signature)\n                ? bytesFromBase64(object.signature)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.accountId !== undefined && (obj.accountId = message.accountId);\n        message.blockNumber !== undefined &&\n            (obj.blockNumber = (message.blockNumber || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSmartContractWalletSignature();\n        message.accountId = (_a = object.accountId) !== null && _a !== void 0 ? _a : \"\";\n        message.blockNumber =\n            object.blockNumber !== undefined && object.blockNumber !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.blockNumber)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.signature = (_b = object.signature) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseLegacyDelegatedSignature() {\n    return { delegatedKey: undefined, signature: undefined };\n}\nconst LegacyDelegatedSignature = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.delegatedKey !== undefined) {\n            _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.encode(message.delegatedKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.signature !== undefined) {\n            RecoverableEcdsaSignature.encode(message.signature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLegacyDelegatedSignature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatedKey = _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.signature = RecoverableEcdsaSignature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatedKey: isSet(object.delegatedKey)\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.fromJSON(object.delegatedKey)\n                : undefined,\n            signature: isSet(object.signature)\n                ? RecoverableEcdsaSignature.fromJSON(object.signature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatedKey !== undefined &&\n            (obj.delegatedKey = message.delegatedKey\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.toJSON(message.delegatedKey)\n                : undefined);\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? RecoverableEcdsaSignature.toJSON(message.signature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseLegacyDelegatedSignature();\n        message.delegatedKey =\n            object.delegatedKey !== undefined && object.delegatedKey !== null\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.fromPartial(object.delegatedKey)\n                : undefined;\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? RecoverableEcdsaSignature.fromPartial(object.signature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignature() {\n    return {\n        erc191: undefined,\n        erc6492: undefined,\n        installationKey: undefined,\n        delegatedErc191: undefined,\n    };\n}\nconst Signature = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.erc191 !== undefined) {\n            RecoverableEcdsaSignature.encode(message.erc191, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.erc6492 !== undefined) {\n            SmartContractWalletSignature.encode(message.erc6492, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.installationKey !== undefined) {\n            RecoverableEd25519Signature.encode(message.installationKey, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.delegatedErc191 !== undefined) {\n            LegacyDelegatedSignature.encode(message.delegatedErc191, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.erc191 = RecoverableEcdsaSignature.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.erc6492 = SmartContractWalletSignature.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.installationKey = RecoverableEd25519Signature.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.delegatedErc191 = LegacyDelegatedSignature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            erc191: isSet(object.erc191)\n                ? RecoverableEcdsaSignature.fromJSON(object.erc191)\n                : undefined,\n            erc6492: isSet(object.erc6492)\n                ? SmartContractWalletSignature.fromJSON(object.erc6492)\n                : undefined,\n            installationKey: isSet(object.installationKey)\n                ? RecoverableEd25519Signature.fromJSON(object.installationKey)\n                : undefined,\n            delegatedErc191: isSet(object.delegatedErc191)\n                ? LegacyDelegatedSignature.fromJSON(object.delegatedErc191)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.erc191 !== undefined &&\n            (obj.erc191 = message.erc191\n                ? RecoverableEcdsaSignature.toJSON(message.erc191)\n                : undefined);\n        message.erc6492 !== undefined &&\n            (obj.erc6492 = message.erc6492\n                ? SmartContractWalletSignature.toJSON(message.erc6492)\n                : undefined);\n        message.installationKey !== undefined &&\n            (obj.installationKey = message.installationKey\n                ? RecoverableEd25519Signature.toJSON(message.installationKey)\n                : undefined);\n        message.delegatedErc191 !== undefined &&\n            (obj.delegatedErc191 = message.delegatedErc191\n                ? LegacyDelegatedSignature.toJSON(message.delegatedErc191)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignature();\n        message.erc191 =\n            object.erc191 !== undefined && object.erc191 !== null\n                ? RecoverableEcdsaSignature.fromPartial(object.erc191)\n                : undefined;\n        message.erc6492 =\n            object.erc6492 !== undefined && object.erc6492 !== null\n                ? SmartContractWalletSignature.fromPartial(object.erc6492)\n                : undefined;\n        message.installationKey =\n            object.installationKey !== undefined && object.installationKey !== null\n                ? RecoverableEd25519Signature.fromPartial(object.installationKey)\n                : undefined;\n        message.delegatedErc191 =\n            object.delegatedErc191 !== undefined && object.delegatedErc191 !== null\n                ? LegacyDelegatedSignature.fromPartial(object.delegatedErc191)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=signature.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/signature.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/credential.pb.js":
/*!************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/identity/credential.pb.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MlsCredential: () => (/* binding */ MlsCredential),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.identity\";\nfunction createBaseMlsCredential() {\n    return { inboxId: \"\" };\n}\nconst MlsCredential = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.inboxId !== \"\") {\n            writer.uint32(10).string(message.inboxId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMlsCredential();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inboxId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMlsCredential();\n        message.inboxId = (_a = object.inboxId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=credential.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vaWRlbnRpdHkvY3JlZGVudGlhbC5wYi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ3dCO0FBQ2E7QUFDOUI7QUFDUDtBQUNBLGFBQWE7QUFDYjtBQUNPO0FBQ1AsNkJBQTZCLGdFQUFVO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esd0NBQXdDLGtFQUFVLGVBQWUsa0VBQVU7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSSxnRUFBUSxVQUFVLDRDQUFJO0FBQzFCLElBQUksZ0VBQVEsUUFBUSw0Q0FBSTtBQUN4QixJQUFJLG1FQUFhO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC9wcm90by90cy9kaXN0L2VzbS9pZGVudGl0eS9jcmVkZW50aWFsLnBiLmpzPzBlNTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBMb25nIGZyb20gXCJsb25nXCI7XG5pbXBvcnQgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcInhtdHAuaWRlbnRpdHlcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VNbHNDcmVkZW50aWFsKCkge1xuICAgIHJldHVybiB7IGluYm94SWQ6IFwiXCIgfTtcbn1cbmV4cG9ydCBjb25zdCBNbHNDcmVkZW50aWFsID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmluYm94SWQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmluYm94SWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTWxzQ3JlZGVudGlhbCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5ib3hJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5ib3hJZDogaXNTZXQob2JqZWN0LmluYm94SWQpID8gU3RyaW5nKG9iamVjdC5pbmJveElkKSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5pbmJveElkICE9PSB1bmRlZmluZWQgJiYgKG9iai5pbmJveElkID0gbWVzc2FnZS5pbmJveElkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTWxzQ3JlZGVudGlhbCgpO1xuICAgICAgICBtZXNzYWdlLmluYm94SWQgPSAoX2EgPSBvYmplY3QuaW5ib3hJZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5pZiAoX20wLnV0aWwuTG9uZyAhPT0gTG9uZykge1xuICAgIF9tMC51dGlsLkxvbmcgPSBMb25nO1xuICAgIF9tMC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVkZW50aWFsLnBiLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/credential.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authn: () => (/* reexport module object */ _message_api_v1_authn_pb__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   ciphertext: () => (/* reexport module object */ _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_11__),\n/* harmony export */   composite: () => (/* reexport module object */ _message_contents_composite_pb__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   contact: () => (/* reexport module object */ _message_contents_contact_pb__WEBPACK_IMPORTED_MODULE_12__),\n/* harmony export */   content: () => (/* reexport module object */ _message_contents_content_pb__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   conversationReference: () => (/* reexport module object */ _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   ecies: () => (/* reexport module object */ _message_contents_ecies_pb__WEBPACK_IMPORTED_MODULE_17__),\n/* harmony export */   fetcher: () => (/* reexport module object */ _fetch_pb__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   frames: () => (/* reexport module object */ _message_contents_frames_pb__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   invitation: () => (/* reexport module object */ _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_13__),\n/* harmony export */   keystore: () => (/* reexport module object */ _keystore_api_v1_keystore_pb__WEBPACK_IMPORTED_MODULE_14__),\n/* harmony export */   message: () => (/* reexport module object */ _message_contents_message_pb__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   messageApi: () => (/* reexport module object */ _message_api_v1_message_api_pb__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   mlsApi: () => (/* reexport module object */ _mls_api_v1_mls_pb__WEBPACK_IMPORTED_MODULE_18__),\n/* harmony export */   mlsContent: () => (/* reexport module object */ _mls_message_contents_content_pb__WEBPACK_IMPORTED_MODULE_20__),\n/* harmony export */   mlsDatabaseIntent: () => (/* reexport module object */ _mls_database_intents_pb__WEBPACK_IMPORTED_MODULE_19__),\n/* harmony export */   mlsGroupMembership: () => (/* reexport module object */ _mls_message_contents_group_membership_pb__WEBPACK_IMPORTED_MODULE_21__),\n/* harmony export */   mlsGroupMetadata: () => (/* reexport module object */ _mls_message_contents_group_metadata_pb__WEBPACK_IMPORTED_MODULE_22__),\n/* harmony export */   mlsGroupMutableMetadata: () => (/* reexport module object */ _mls_message_contents_group_mutable_metadata_pb__WEBPACK_IMPORTED_MODULE_23__),\n/* harmony export */   mlsTranscriptMessages: () => (/* reexport module object */ _mls_message_contents_transcript_messages_pb__WEBPACK_IMPORTED_MODULE_24__),\n/* harmony export */   mlsValidationService: () => (/* reexport module object */ _mls_validation_v1_service_pb__WEBPACK_IMPORTED_MODULE_25__),\n/* harmony export */   privateKey: () => (/* reexport module object */ _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   privatePreferences: () => (/* reexport module object */ _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_15__),\n/* harmony export */   publicKey: () => (/* reexport module object */ _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_9__),\n/* harmony export */   signature: () => (/* reexport module object */ _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   signedPayload: () => (/* reexport module object */ _message_contents_signed_payload_pb__WEBPACK_IMPORTED_MODULE_16__)\n/* harmony export */ });\n/* harmony import */ var _message_api_v1_message_api_pb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./message_api/v1/message_api.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/message_api.pb.js\");\n/* harmony import */ var _fetch_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fetch.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js\");\n/* harmony import */ var _message_api_v1_authn_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./message_api/v1/authn.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/authn.pb.js\");\n/* harmony import */ var _message_contents_message_pb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message_contents/message.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/message.pb.js\");\n/* harmony import */ var _message_contents_content_pb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./message_contents/content.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js\");\n/* harmony import */ var _message_contents_frames_pb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./message_contents/frames.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/frames.pb.js\");\n/* harmony import */ var _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./message_contents/conversation_reference.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js\");\n/* harmony import */ var _message_contents_composite_pb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./message_contents/composite.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/composite.pb.js\");\n/* harmony import */ var _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./message_contents/private_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js\");\n/* harmony import */ var _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./message_contents/public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./message_contents/signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./message_contents/ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var _message_contents_contact_pb__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./message_contents/contact.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/contact.pb.js\");\n/* harmony import */ var _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./message_contents/invitation.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js\");\n/* harmony import */ var _keystore_api_v1_keystore_pb__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./keystore_api/v1/keystore.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/keystore_api/v1/keystore.pb.js\");\n/* harmony import */ var _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./message_contents/private_preferences.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_preferences.pb.js\");\n/* harmony import */ var _message_contents_signed_payload_pb__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./message_contents/signed_payload.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signed_payload.pb.js\");\n/* harmony import */ var _message_contents_ecies_pb__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./message_contents/ecies.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ecies.pb.js\");\n/* harmony import */ var _mls_api_v1_mls_pb__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./mls/api/v1/mls.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/api/v1/mls.pb.js\");\n/* harmony import */ var _mls_database_intents_pb__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./mls/database/intents.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/database/intents.pb.js\");\n/* harmony import */ var _mls_message_contents_content_pb__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./mls/message_contents/content.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/content.pb.js\");\n/* harmony import */ var _mls_message_contents_group_membership_pb__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./mls/message_contents/group_membership.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_membership.pb.js\");\n/* harmony import */ var _mls_message_contents_group_metadata_pb__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./mls/message_contents/group_metadata.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_metadata.pb.js\");\n/* harmony import */ var _mls_message_contents_group_mutable_metadata_pb__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./mls/message_contents/group_mutable_metadata.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_mutable_metadata.pb.js\");\n/* harmony import */ var _mls_message_contents_transcript_messages_pb__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./mls/message_contents/transcript_messages.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/transcript_messages.pb.js\");\n/* harmony import */ var _mls_validation_v1_service_pb__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./mls_validation/v1/service.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls_validation/v1/service.pb.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4RDtBQUN4QjtBQUNhO0FBQ007QUFDQTtBQUNGO0FBQytCO0FBQ3pCO0FBQ0c7QUFDRjtBQUNEO0FBQ0U7QUFDTjtBQUNNO0FBQ0w7QUFDc0I7QUFDVjtBQUNqQjtBQUNQO0FBQ2lCO0FBQ0M7QUFDaUI7QUFDSjtBQUNlO0FBQ0w7QUFDaEI7QUFDdkUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC9wcm90by90cy9kaXN0L2VzbS9pbmRleC5qcz9jODA3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGFzIG1lc3NhZ2VBcGkgZnJvbSBcIi4vbWVzc2FnZV9hcGkvdjEvbWVzc2FnZV9hcGkucGJcIjtcbmV4cG9ydCAqIGFzIGZldGNoZXIgZnJvbSBcIi4vZmV0Y2gucGJcIjtcbmV4cG9ydCAqIGFzIGF1dGhuIGZyb20gXCIuL21lc3NhZ2VfYXBpL3YxL2F1dGhuLnBiXCI7XG5leHBvcnQgKiBhcyBtZXNzYWdlIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvbWVzc2FnZS5wYlwiO1xuZXhwb3J0ICogYXMgY29udGVudCBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL2NvbnRlbnQucGJcIjtcbmV4cG9ydCAqIGFzIGZyYW1lcyBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL2ZyYW1lcy5wYlwiO1xuZXhwb3J0ICogYXMgY29udmVyc2F0aW9uUmVmZXJlbmNlIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvY29udmVyc2F0aW9uX3JlZmVyZW5jZS5wYlwiO1xuZXhwb3J0ICogYXMgY29tcG9zaXRlIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvY29tcG9zaXRlLnBiXCI7XG5leHBvcnQgKiBhcyBwcml2YXRlS2V5IGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvcHJpdmF0ZV9rZXkucGJcIjtcbmV4cG9ydCAqIGFzIHB1YmxpY0tleSBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL3B1YmxpY19rZXkucGJcIjtcbmV4cG9ydCAqIGFzIHNpZ25hdHVyZSBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL3NpZ25hdHVyZS5wYlwiO1xuZXhwb3J0ICogYXMgY2lwaGVydGV4dCBmcm9tIFwiLi9tZXNzYWdlX2NvbnRlbnRzL2NpcGhlcnRleHQucGJcIjtcbmV4cG9ydCAqIGFzIGNvbnRhY3QgZnJvbSBcIi4vbWVzc2FnZV9jb250ZW50cy9jb250YWN0LnBiXCI7XG5leHBvcnQgKiBhcyBpbnZpdGF0aW9uIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvaW52aXRhdGlvbi5wYlwiO1xuZXhwb3J0ICogYXMga2V5c3RvcmUgZnJvbSBcIi4va2V5c3RvcmVfYXBpL3YxL2tleXN0b3JlLnBiXCI7XG5leHBvcnQgKiBhcyBwcml2YXRlUHJlZmVyZW5jZXMgZnJvbSBcIi4vbWVzc2FnZV9jb250ZW50cy9wcml2YXRlX3ByZWZlcmVuY2VzLnBiXCI7XG5leHBvcnQgKiBhcyBzaWduZWRQYXlsb2FkIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvc2lnbmVkX3BheWxvYWQucGJcIjtcbmV4cG9ydCAqIGFzIGVjaWVzIGZyb20gXCIuL21lc3NhZ2VfY29udGVudHMvZWNpZXMucGJcIjtcbmV4cG9ydCAqIGFzIG1sc0FwaSBmcm9tIFwiLi9tbHMvYXBpL3YxL21scy5wYlwiO1xuZXhwb3J0ICogYXMgbWxzRGF0YWJhc2VJbnRlbnQgZnJvbSBcIi4vbWxzL2RhdGFiYXNlL2ludGVudHMucGJcIjtcbmV4cG9ydCAqIGFzIG1sc0NvbnRlbnQgZnJvbSBcIi4vbWxzL21lc3NhZ2VfY29udGVudHMvY29udGVudC5wYlwiO1xuZXhwb3J0ICogYXMgbWxzR3JvdXBNZW1iZXJzaGlwIGZyb20gXCIuL21scy9tZXNzYWdlX2NvbnRlbnRzL2dyb3VwX21lbWJlcnNoaXAucGJcIjtcbmV4cG9ydCAqIGFzIG1sc0dyb3VwTWV0YWRhdGEgZnJvbSBcIi4vbWxzL21lc3NhZ2VfY29udGVudHMvZ3JvdXBfbWV0YWRhdGEucGJcIjtcbmV4cG9ydCAqIGFzIG1sc0dyb3VwTXV0YWJsZU1ldGFkYXRhIGZyb20gXCIuL21scy9tZXNzYWdlX2NvbnRlbnRzL2dyb3VwX211dGFibGVfbWV0YWRhdGEucGJcIjtcbmV4cG9ydCAqIGFzIG1sc1RyYW5zY3JpcHRNZXNzYWdlcyBmcm9tIFwiLi9tbHMvbWVzc2FnZV9jb250ZW50cy90cmFuc2NyaXB0X21lc3NhZ2VzLnBiXCI7XG5leHBvcnQgKiBhcyBtbHNWYWxpZGF0aW9uU2VydmljZSBmcm9tIFwiLi9tbHNfdmFsaWRhdGlvbi92MS9zZXJ2aWNlLnBiXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/keystore_api/v1/keystore.pb.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/keystore_api/v1/keystore.pb.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreateAuthTokenRequest: () => (/* binding */ CreateAuthTokenRequest),\n/* harmony export */   CreateInviteRequest: () => (/* binding */ CreateInviteRequest),\n/* harmony export */   CreateInviteResponse: () => (/* binding */ CreateInviteResponse),\n/* harmony export */   DecryptResponse: () => (/* binding */ DecryptResponse),\n/* harmony export */   DecryptResponse_Response: () => (/* binding */ DecryptResponse_Response),\n/* harmony export */   DecryptResponse_Response_Success: () => (/* binding */ DecryptResponse_Response_Success),\n/* harmony export */   DecryptV1Request: () => (/* binding */ DecryptV1Request),\n/* harmony export */   DecryptV1Request_Request: () => (/* binding */ DecryptV1Request_Request),\n/* harmony export */   DecryptV2Request: () => (/* binding */ DecryptV2Request),\n/* harmony export */   DecryptV2Request_Request: () => (/* binding */ DecryptV2Request_Request),\n/* harmony export */   EncryptResponse: () => (/* binding */ EncryptResponse),\n/* harmony export */   EncryptResponse_Response: () => (/* binding */ EncryptResponse_Response),\n/* harmony export */   EncryptResponse_Response_Success: () => (/* binding */ EncryptResponse_Response_Success),\n/* harmony export */   EncryptV1Request: () => (/* binding */ EncryptV1Request),\n/* harmony export */   EncryptV1Request_Request: () => (/* binding */ EncryptV1Request_Request),\n/* harmony export */   EncryptV2Request: () => (/* binding */ EncryptV2Request),\n/* harmony export */   EncryptV2Request_Request: () => (/* binding */ EncryptV2Request_Request),\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   GetConversationHmacKeysRequest: () => (/* binding */ GetConversationHmacKeysRequest),\n/* harmony export */   GetConversationHmacKeysResponse: () => (/* binding */ GetConversationHmacKeysResponse),\n/* harmony export */   GetConversationHmacKeysResponse_HmacKeyData: () => (/* binding */ GetConversationHmacKeysResponse_HmacKeyData),\n/* harmony export */   GetConversationHmacKeysResponse_HmacKeys: () => (/* binding */ GetConversationHmacKeysResponse_HmacKeys),\n/* harmony export */   GetConversationHmacKeysResponse_HmacKeysEntry: () => (/* binding */ GetConversationHmacKeysResponse_HmacKeysEntry),\n/* harmony export */   GetConversationsResponse: () => (/* binding */ GetConversationsResponse),\n/* harmony export */   GetKeystoreStatusRequest: () => (/* binding */ GetKeystoreStatusRequest),\n/* harmony export */   GetKeystoreStatusResponse: () => (/* binding */ GetKeystoreStatusResponse),\n/* harmony export */   GetKeystoreStatusResponse_KeystoreStatus: () => (/* binding */ GetKeystoreStatusResponse_KeystoreStatus),\n/* harmony export */   GetPrivatePreferencesTopicIdentifierResponse: () => (/* binding */ GetPrivatePreferencesTopicIdentifierResponse),\n/* harmony export */   GetRefreshJobRequest: () => (/* binding */ GetRefreshJobRequest),\n/* harmony export */   GetRefreshJobResponse: () => (/* binding */ GetRefreshJobResponse),\n/* harmony export */   InitKeystoreRequest: () => (/* binding */ InitKeystoreRequest),\n/* harmony export */   InitKeystoreResponse: () => (/* binding */ InitKeystoreResponse),\n/* harmony export */   JobType: () => (/* binding */ JobType),\n/* harmony export */   KeystoreError: () => (/* binding */ KeystoreError),\n/* harmony export */   PrivatePreferencesActionMap: () => (/* binding */ PrivatePreferencesActionMap),\n/* harmony export */   PrivatePreferencesActionMap_ActionsEntry: () => (/* binding */ PrivatePreferencesActionMap_ActionsEntry),\n/* harmony export */   SaveInvitesRequest: () => (/* binding */ SaveInvitesRequest),\n/* harmony export */   SaveInvitesRequest_Request: () => (/* binding */ SaveInvitesRequest_Request),\n/* harmony export */   SaveInvitesResponse: () => (/* binding */ SaveInvitesResponse),\n/* harmony export */   SaveInvitesResponse_Response: () => (/* binding */ SaveInvitesResponse_Response),\n/* harmony export */   SaveInvitesResponse_Response_Success: () => (/* binding */ SaveInvitesResponse_Response_Success),\n/* harmony export */   SaveV1ConversationsRequest: () => (/* binding */ SaveV1ConversationsRequest),\n/* harmony export */   SaveV1ConversationsResponse: () => (/* binding */ SaveV1ConversationsResponse),\n/* harmony export */   SelfDecryptRequest: () => (/* binding */ SelfDecryptRequest),\n/* harmony export */   SelfDecryptRequest_Request: () => (/* binding */ SelfDecryptRequest_Request),\n/* harmony export */   SelfEncryptRequest: () => (/* binding */ SelfEncryptRequest),\n/* harmony export */   SelfEncryptRequest_Request: () => (/* binding */ SelfEncryptRequest_Request),\n/* harmony export */   SelfEncryptResponse: () => (/* binding */ SelfEncryptResponse),\n/* harmony export */   SelfEncryptResponse_Response: () => (/* binding */ SelfEncryptResponse_Response),\n/* harmony export */   SelfEncryptResponse_Response_Success: () => (/* binding */ SelfEncryptResponse_Response_Success),\n/* harmony export */   SetRefeshJobRequest: () => (/* binding */ SetRefeshJobRequest),\n/* harmony export */   SetRefreshJobResponse: () => (/* binding */ SetRefreshJobResponse),\n/* harmony export */   SignDigestRequest: () => (/* binding */ SignDigestRequest),\n/* harmony export */   TopicMap: () => (/* binding */ TopicMap),\n/* harmony export */   TopicMap_TopicData: () => (/* binding */ TopicMap_TopicData),\n/* harmony export */   TopicMap_TopicsEntry: () => (/* binding */ TopicMap_TopicsEntry),\n/* harmony export */   errorCodeFromJSON: () => (/* binding */ errorCodeFromJSON),\n/* harmony export */   errorCodeToJSON: () => (/* binding */ errorCodeToJSON),\n/* harmony export */   getKeystoreStatusResponse_KeystoreStatusFromJSON: () => (/* binding */ getKeystoreStatusResponse_KeystoreStatusFromJSON),\n/* harmony export */   getKeystoreStatusResponse_KeystoreStatusToJSON: () => (/* binding */ getKeystoreStatusResponse_KeystoreStatusToJSON),\n/* harmony export */   jobTypeFromJSON: () => (/* binding */ jobTypeFromJSON),\n/* harmony export */   jobTypeToJSON: () => (/* binding */ jobTypeToJSON),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../message_contents/ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../message_contents/public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../message_contents/invitation.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js\");\n/* harmony import */ var _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../message_contents/conversation_reference.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js\");\n/* harmony import */ var _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../message_contents/private_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js\");\n/* harmony import */ var _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../message_contents/private_preferences.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_preferences.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7__);\n/* eslint-disable */\n\n\n\n\n\n\n\n\nconst protobufPackage = \"xmtp.keystore_api.v1\";\n/** Message content encoding structures */\n/** Application-specific error codes for the Keystore API. */\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[ErrorCode[\"ERROR_CODE_UNSPECIFIED\"] = 0] = \"ERROR_CODE_UNSPECIFIED\";\n    ErrorCode[ErrorCode[\"ERROR_CODE_INVALID_INPUT\"] = 1] = \"ERROR_CODE_INVALID_INPUT\";\n    ErrorCode[ErrorCode[\"ERROR_CODE_NO_MATCHING_PREKEY\"] = 2] = \"ERROR_CODE_NO_MATCHING_PREKEY\";\n    ErrorCode[ErrorCode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ErrorCode || (ErrorCode = {}));\nfunction errorCodeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"ERROR_CODE_UNSPECIFIED\":\n            return ErrorCode.ERROR_CODE_UNSPECIFIED;\n        case 1:\n        case \"ERROR_CODE_INVALID_INPUT\":\n            return ErrorCode.ERROR_CODE_INVALID_INPUT;\n        case 2:\n        case \"ERROR_CODE_NO_MATCHING_PREKEY\":\n            return ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ErrorCode.UNRECOGNIZED;\n    }\n}\nfunction errorCodeToJSON(object) {\n    switch (object) {\n        case ErrorCode.ERROR_CODE_UNSPECIFIED:\n            return \"ERROR_CODE_UNSPECIFIED\";\n        case ErrorCode.ERROR_CODE_INVALID_INPUT:\n            return \"ERROR_CODE_INVALID_INPUT\";\n        case ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY:\n            return \"ERROR_CODE_NO_MATCHING_PREKEY\";\n        case ErrorCode.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\n/** JobType is used to specify the type of job the caller would like info on */\nvar JobType;\n(function (JobType) {\n    JobType[JobType[\"JOB_TYPE_UNSPECIFIED\"] = 0] = \"JOB_TYPE_UNSPECIFIED\";\n    JobType[JobType[\"JOB_TYPE_REFRESH_V1\"] = 1] = \"JOB_TYPE_REFRESH_V1\";\n    JobType[JobType[\"JOB_TYPE_REFRESH_V2\"] = 2] = \"JOB_TYPE_REFRESH_V2\";\n    JobType[JobType[\"JOB_TYPE_REFRESH_PPPP\"] = 3] = \"JOB_TYPE_REFRESH_PPPP\";\n    JobType[JobType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(JobType || (JobType = {}));\nfunction jobTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"JOB_TYPE_UNSPECIFIED\":\n            return JobType.JOB_TYPE_UNSPECIFIED;\n        case 1:\n        case \"JOB_TYPE_REFRESH_V1\":\n            return JobType.JOB_TYPE_REFRESH_V1;\n        case 2:\n        case \"JOB_TYPE_REFRESH_V2\":\n            return JobType.JOB_TYPE_REFRESH_V2;\n        case 3:\n        case \"JOB_TYPE_REFRESH_PPPP\":\n            return JobType.JOB_TYPE_REFRESH_PPPP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return JobType.UNRECOGNIZED;\n    }\n}\nfunction jobTypeToJSON(object) {\n    switch (object) {\n        case JobType.JOB_TYPE_UNSPECIFIED:\n            return \"JOB_TYPE_UNSPECIFIED\";\n        case JobType.JOB_TYPE_REFRESH_V1:\n            return \"JOB_TYPE_REFRESH_V1\";\n        case JobType.JOB_TYPE_REFRESH_V2:\n            return \"JOB_TYPE_REFRESH_V2\";\n        case JobType.JOB_TYPE_REFRESH_PPPP:\n            return \"JOB_TYPE_REFRESH_PPPP\";\n        case JobType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\n/** Status of the Keystore for the specified wallet address */\nvar GetKeystoreStatusResponse_KeystoreStatus;\n(function (GetKeystoreStatusResponse_KeystoreStatus) {\n    GetKeystoreStatusResponse_KeystoreStatus[GetKeystoreStatusResponse_KeystoreStatus[\"KEYSTORE_STATUS_UNSPECIFIED\"] = 0] = \"KEYSTORE_STATUS_UNSPECIFIED\";\n    GetKeystoreStatusResponse_KeystoreStatus[GetKeystoreStatusResponse_KeystoreStatus[\"KEYSTORE_STATUS_UNINITIALIZED\"] = 1] = \"KEYSTORE_STATUS_UNINITIALIZED\";\n    GetKeystoreStatusResponse_KeystoreStatus[GetKeystoreStatusResponse_KeystoreStatus[\"KEYSTORE_STATUS_INITIALIZED\"] = 2] = \"KEYSTORE_STATUS_INITIALIZED\";\n    GetKeystoreStatusResponse_KeystoreStatus[GetKeystoreStatusResponse_KeystoreStatus[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(GetKeystoreStatusResponse_KeystoreStatus || (GetKeystoreStatusResponse_KeystoreStatus = {}));\nfunction getKeystoreStatusResponse_KeystoreStatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"KEYSTORE_STATUS_UNSPECIFIED\":\n            return GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_UNSPECIFIED;\n        case 1:\n        case \"KEYSTORE_STATUS_UNINITIALIZED\":\n            return GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_UNINITIALIZED;\n        case 2:\n        case \"KEYSTORE_STATUS_INITIALIZED\":\n            return GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_INITIALIZED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return GetKeystoreStatusResponse_KeystoreStatus.UNRECOGNIZED;\n    }\n}\nfunction getKeystoreStatusResponse_KeystoreStatusToJSON(object) {\n    switch (object) {\n        case GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_UNSPECIFIED:\n            return \"KEYSTORE_STATUS_UNSPECIFIED\";\n        case GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_UNINITIALIZED:\n            return \"KEYSTORE_STATUS_UNINITIALIZED\";\n        case GetKeystoreStatusResponse_KeystoreStatus.KEYSTORE_STATUS_INITIALIZED:\n            return \"KEYSTORE_STATUS_INITIALIZED\";\n        case GetKeystoreStatusResponse_KeystoreStatus.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseKeystoreError() {\n    return { message: \"\", code: 0 };\n}\nconst KeystoreError = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.message !== \"\") {\n            writer.uint32(10).string(message.message);\n        }\n        if (message.code !== 0) {\n            writer.uint32(16).int32(message.code);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseKeystoreError();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                case 2:\n                    message.code = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            message: isSet(object.message) ? String(object.message) : \"\",\n            code: isSet(object.code) ? errorCodeFromJSON(object.code) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.message !== undefined && (obj.message = message.message);\n        message.code !== undefined && (obj.code = errorCodeToJSON(message.code));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseKeystoreError();\n        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : \"\";\n        message.code = (_b = object.code) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction createBaseDecryptV1Request() {\n    return { requests: [] };\n}\nconst DecryptV1Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.requests) {\n            DecryptV1Request_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptV1Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(DecryptV1Request_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => DecryptV1Request_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? DecryptV1Request_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDecryptV1Request();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => DecryptV1Request_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseDecryptV1Request_Request() {\n    return {\n        payload: undefined,\n        peerKeys: undefined,\n        headerBytes: new Uint8Array(),\n        isSender: false,\n    };\n}\nconst DecryptV1Request_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.payload !== undefined) {\n            _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.encode(message.payload, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.peerKeys !== undefined) {\n            _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.encode(message.peerKeys, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(26).bytes(message.headerBytes);\n        }\n        if (message.isSender === true) {\n            writer.uint32(32).bool(message.isSender);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptV1Request_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.peerKeys = _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 4:\n                    message.isSender = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromJSON(object.payload)\n                : undefined,\n            peerKeys: isSet(object.peerKeys)\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.fromJSON(object.peerKeys)\n                : undefined,\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            isSender: isSet(object.isSender) ? Boolean(object.isSender) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = message.payload\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.toJSON(message.payload)\n                : undefined);\n        message.peerKeys !== undefined &&\n            (obj.peerKeys = message.peerKeys\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.toJSON(message.peerKeys)\n                : undefined);\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.isSender !== undefined && (obj.isSender = message.isSender);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDecryptV1Request_Request();\n        message.payload =\n            object.payload !== undefined && object.payload !== null\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromPartial(object.payload)\n                : undefined;\n        message.peerKeys =\n            object.peerKeys !== undefined && object.peerKeys !== null\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.fromPartial(object.peerKeys)\n                : undefined;\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.isSender = (_b = object.isSender) !== null && _b !== void 0 ? _b : false;\n        return message;\n    },\n};\nfunction createBaseDecryptResponse() {\n    return { responses: [] };\n}\nconst DecryptResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.responses) {\n            DecryptResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(DecryptResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => DecryptResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? DecryptResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDecryptResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => DecryptResponse_Response.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseDecryptResponse_Response() {\n    return { result: undefined, error: undefined };\n}\nconst DecryptResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.result !== undefined) {\n            DecryptResponse_Response_Success.encode(message.result, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = DecryptResponse_Response_Success.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            result: isSet(object.result)\n                ? DecryptResponse_Response_Success.fromJSON(object.result)\n                : undefined,\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = message.result\n                ? DecryptResponse_Response_Success.toJSON(message.result)\n                : undefined);\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseDecryptResponse_Response();\n        message.result =\n            object.result !== undefined && object.result !== null\n                ? DecryptResponse_Response_Success.fromPartial(object.result)\n                : undefined;\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseDecryptResponse_Response_Success() {\n    return { decrypted: new Uint8Array() };\n}\nconst DecryptResponse_Response_Success = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.decrypted.length !== 0) {\n            writer.uint32(10).bytes(message.decrypted);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptResponse_Response_Success();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.decrypted = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            decrypted: isSet(object.decrypted)\n                ? bytesFromBase64(object.decrypted)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.decrypted !== undefined &&\n            (obj.decrypted = base64FromBytes(message.decrypted !== undefined ? message.decrypted : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDecryptResponse_Response_Success();\n        message.decrypted = (_a = object.decrypted) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseDecryptV2Request() {\n    return { requests: [] };\n}\nconst DecryptV2Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.requests) {\n            DecryptV2Request_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptV2Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(DecryptV2Request_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => DecryptV2Request_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? DecryptV2Request_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDecryptV2Request();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => DecryptV2Request_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseDecryptV2Request_Request() {\n    return {\n        payload: undefined,\n        headerBytes: new Uint8Array(),\n        contentTopic: \"\",\n    };\n}\nconst DecryptV2Request_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.payload !== undefined) {\n            _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.encode(message.payload, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(18).bytes(message.headerBytes);\n        }\n        if (message.contentTopic !== \"\") {\n            writer.uint32(26).string(message.contentTopic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecryptV2Request_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 3:\n                    message.contentTopic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromJSON(object.payload)\n                : undefined,\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            contentTopic: isSet(object.contentTopic)\n                ? String(object.contentTopic)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = message.payload\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.toJSON(message.payload)\n                : undefined);\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.contentTopic !== undefined &&\n            (obj.contentTopic = message.contentTopic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDecryptV2Request_Request();\n        message.payload =\n            object.payload !== undefined && object.payload !== null\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromPartial(object.payload)\n                : undefined;\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.contentTopic = (_b = object.contentTopic) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseEncryptV1Request() {\n    return { requests: [] };\n}\nconst EncryptV1Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.requests) {\n            EncryptV1Request_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptV1Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(EncryptV1Request_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => EncryptV1Request_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? EncryptV1Request_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptV1Request();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => EncryptV1Request_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseEncryptV1Request_Request() {\n    return {\n        recipient: undefined,\n        payload: new Uint8Array(),\n        headerBytes: new Uint8Array(),\n    };\n}\nconst EncryptV1Request_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.recipient !== undefined) {\n            _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.encode(message.recipient, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(18).bytes(message.payload);\n        }\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(26).bytes(message.headerBytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptV1Request_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.recipient = _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.payload = reader.bytes();\n                    break;\n                case 3:\n                    message.headerBytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            recipient: isSet(object.recipient)\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.fromJSON(object.recipient)\n                : undefined,\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.recipient !== undefined &&\n            (obj.recipient = message.recipient\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.toJSON(message.recipient)\n                : undefined);\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseEncryptV1Request_Request();\n        message.recipient =\n            object.recipient !== undefined && object.recipient !== null\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.PublicKeyBundle.fromPartial(object.recipient)\n                : undefined;\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.headerBytes = (_b = object.headerBytes) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseEncryptResponse() {\n    return { responses: [] };\n}\nconst EncryptResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.responses) {\n            EncryptResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(EncryptResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => EncryptResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? EncryptResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => EncryptResponse_Response.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseEncryptResponse_Response() {\n    return { result: undefined, error: undefined };\n}\nconst EncryptResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.result !== undefined) {\n            EncryptResponse_Response_Success.encode(message.result, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = EncryptResponse_Response_Success.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            result: isSet(object.result)\n                ? EncryptResponse_Response_Success.fromJSON(object.result)\n                : undefined,\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = message.result\n                ? EncryptResponse_Response_Success.toJSON(message.result)\n                : undefined);\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseEncryptResponse_Response();\n        message.result =\n            object.result !== undefined && object.result !== null\n                ? EncryptResponse_Response_Success.fromPartial(object.result)\n                : undefined;\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseEncryptResponse_Response_Success() {\n    return { encrypted: undefined, senderHmac: new Uint8Array() };\n}\nconst EncryptResponse_Response_Success = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.encrypted !== undefined) {\n            _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.encode(message.encrypted, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.senderHmac.length !== 0) {\n            writer.uint32(18).bytes(message.senderHmac);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptResponse_Response_Success();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.encrypted = _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.senderHmac = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            encrypted: isSet(object.encrypted)\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromJSON(object.encrypted)\n                : undefined,\n            senderHmac: isSet(object.senderHmac)\n                ? bytesFromBase64(object.senderHmac)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.encrypted !== undefined &&\n            (obj.encrypted = message.encrypted\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.toJSON(message.encrypted)\n                : undefined);\n        message.senderHmac !== undefined &&\n            (obj.senderHmac = base64FromBytes(message.senderHmac !== undefined ? message.senderHmac : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptResponse_Response_Success();\n        message.encrypted =\n            object.encrypted !== undefined && object.encrypted !== null\n                ? _message_contents_ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromPartial(object.encrypted)\n                : undefined;\n        message.senderHmac = (_a = object.senderHmac) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseEncryptV2Request() {\n    return { requests: [] };\n}\nconst EncryptV2Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.requests) {\n            EncryptV2Request_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptV2Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(EncryptV2Request_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => EncryptV2Request_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? EncryptV2Request_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptV2Request();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => EncryptV2Request_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseEncryptV2Request_Request() {\n    return {\n        payload: new Uint8Array(),\n        headerBytes: new Uint8Array(),\n        contentTopic: \"\",\n    };\n}\nconst EncryptV2Request_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(18).bytes(message.headerBytes);\n        }\n        if (message.contentTopic !== \"\") {\n            writer.uint32(26).string(message.contentTopic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptV2Request_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                case 2:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 3:\n                    message.contentTopic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            contentTopic: isSet(object.contentTopic)\n                ? String(object.contentTopic)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.contentTopic !== undefined &&\n            (obj.contentTopic = message.contentTopic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseEncryptV2Request_Request();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.headerBytes = (_b = object.headerBytes) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.contentTopic = (_c = object.contentTopic) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseSelfEncryptRequest() {\n    return { requests: [] };\n}\nconst SelfEncryptRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.requests) {\n            SelfEncryptRequest_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(SelfEncryptRequest_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => SelfEncryptRequest_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? SelfEncryptRequest_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfEncryptRequest();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => SelfEncryptRequest_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseSelfEncryptRequest_Request() {\n    return { payload: new Uint8Array() };\n}\nconst SelfEncryptRequest_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptRequest_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfEncryptRequest_Request();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSelfEncryptResponse() {\n    return { responses: [] };\n}\nconst SelfEncryptResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.responses) {\n            SelfEncryptResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(SelfEncryptResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => SelfEncryptResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? SelfEncryptResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfEncryptResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => SelfEncryptResponse_Response.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSelfEncryptResponse_Response() {\n    return { result: undefined, error: undefined };\n}\nconst SelfEncryptResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.result !== undefined) {\n            SelfEncryptResponse_Response_Success.encode(message.result, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = SelfEncryptResponse_Response_Success.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            result: isSet(object.result)\n                ? SelfEncryptResponse_Response_Success.fromJSON(object.result)\n                : undefined,\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = message.result\n                ? SelfEncryptResponse_Response_Success.toJSON(message.result)\n                : undefined);\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSelfEncryptResponse_Response();\n        message.result =\n            object.result !== undefined && object.result !== null\n                ? SelfEncryptResponse_Response_Success.fromPartial(object.result)\n                : undefined;\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSelfEncryptResponse_Response_Success() {\n    return { encrypted: new Uint8Array() };\n}\nconst SelfEncryptResponse_Response_Success = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.encrypted.length !== 0) {\n            writer.uint32(10).bytes(message.encrypted);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfEncryptResponse_Response_Success();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.encrypted = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            encrypted: isSet(object.encrypted)\n                ? bytesFromBase64(object.encrypted)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.encrypted !== undefined &&\n            (obj.encrypted = base64FromBytes(message.encrypted !== undefined ? message.encrypted : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfEncryptResponse_Response_Success();\n        message.encrypted = (_a = object.encrypted) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSelfDecryptRequest() {\n    return { requests: [] };\n}\nconst SelfDecryptRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.requests) {\n            SelfDecryptRequest_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfDecryptRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(SelfDecryptRequest_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => SelfDecryptRequest_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? SelfDecryptRequest_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfDecryptRequest();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => SelfDecryptRequest_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseSelfDecryptRequest_Request() {\n    return { payload: new Uint8Array() };\n}\nconst SelfDecryptRequest_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSelfDecryptRequest_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSelfDecryptRequest_Request();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseGetPrivatePreferencesTopicIdentifierResponse() {\n    return { identifier: \"\" };\n}\nconst GetPrivatePreferencesTopicIdentifierResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.identifier !== \"\") {\n            writer.uint32(10).string(message.identifier);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetPrivatePreferencesTopicIdentifierResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identifier = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identifier: isSet(object.identifier) ? String(object.identifier) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identifier !== undefined && (obj.identifier = message.identifier);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetPrivatePreferencesTopicIdentifierResponse();\n        message.identifier = (_a = object.identifier) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseCreateInviteRequest() {\n    return {\n        context: undefined,\n        recipient: undefined,\n        createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        consentProof: undefined,\n    };\n}\nconst CreateInviteRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.context !== undefined) {\n            _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.encode(message.context, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.recipient !== undefined) {\n            _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.encode(message.recipient, writer.uint32(18).fork()).ldelim();\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(24).uint64(message.createdNs);\n        }\n        if (message.consentProof !== undefined) {\n            _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.encode(message.consentProof, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateInviteRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.context = _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.recipient = _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 4:\n                    message.consentProof = _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            context: isSet(object.context)\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.fromJSON(object.context)\n                : undefined,\n            recipient: isSet(object.recipient)\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.fromJSON(object.recipient)\n                : undefined,\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            consentProof: isSet(object.consentProof)\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.fromJSON(object.consentProof)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.context !== undefined &&\n            (obj.context = message.context\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.toJSON(message.context)\n                : undefined);\n        message.recipient !== undefined &&\n            (obj.recipient = message.recipient\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.toJSON(message.recipient)\n                : undefined);\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.consentProof !== undefined &&\n            (obj.consentProof = message.consentProof\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.toJSON(message.consentProof)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseCreateInviteRequest();\n        message.context =\n            object.context !== undefined && object.context !== null\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1_Context.fromPartial(object.context)\n                : undefined;\n        message.recipient =\n            object.recipient !== undefined && object.recipient !== null\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.fromPartial(object.recipient)\n                : undefined;\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.consentProof =\n            object.consentProof !== undefined && object.consentProof !== null\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.ConsentProofPayload.fromPartial(object.consentProof)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseCreateInviteResponse() {\n    return { conversation: undefined, payload: new Uint8Array() };\n}\nconst CreateInviteResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.conversation !== undefined) {\n            _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.encode(message.conversation, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(18).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateInviteResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversation = _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversation: isSet(object.conversation)\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromJSON(object.conversation)\n                : undefined,\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.conversation !== undefined &&\n            (obj.conversation = message.conversation\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.toJSON(message.conversation)\n                : undefined);\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseCreateInviteResponse();\n        message.conversation =\n            object.conversation !== undefined && object.conversation !== null\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromPartial(object.conversation)\n                : undefined;\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSaveInvitesRequest() {\n    return { requests: [] };\n}\nconst SaveInvitesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.requests) {\n            SaveInvitesRequest_Request.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(SaveInvitesRequest_Request.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => SaveInvitesRequest_Request.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? SaveInvitesRequest_Request.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSaveInvitesRequest();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => SaveInvitesRequest_Request.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseSaveInvitesRequest_Request() {\n    return {\n        contentTopic: \"\",\n        timestampNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        payload: new Uint8Array(),\n    };\n}\nconst SaveInvitesRequest_Request = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.contentTopic !== \"\") {\n            writer.uint32(10).string(message.contentTopic);\n        }\n        if (!message.timestampNs.isZero()) {\n            writer.uint32(16).uint64(message.timestampNs);\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(26).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesRequest_Request();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.contentTopic = reader.string();\n                    break;\n                case 2:\n                    message.timestampNs = reader.uint64();\n                    break;\n                case 3:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            contentTopic: isSet(object.contentTopic)\n                ? String(object.contentTopic)\n                : \"\",\n            timestampNs: isSet(object.timestampNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.contentTopic !== undefined &&\n            (obj.contentTopic = message.contentTopic);\n        message.timestampNs !== undefined &&\n            (obj.timestampNs = (message.timestampNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSaveInvitesRequest_Request();\n        message.contentTopic = (_a = object.contentTopic) !== null && _a !== void 0 ? _a : \"\";\n        message.timestampNs =\n            object.timestampNs !== undefined && object.timestampNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.payload = (_b = object.payload) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSaveInvitesResponse() {\n    return { responses: [] };\n}\nconst SaveInvitesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.responses) {\n            SaveInvitesResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(SaveInvitesResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => SaveInvitesResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? SaveInvitesResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSaveInvitesResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => SaveInvitesResponse_Response.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSaveInvitesResponse_Response() {\n    return { result: undefined, error: undefined };\n}\nconst SaveInvitesResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.result !== undefined) {\n            SaveInvitesResponse_Response_Success.encode(message.result, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = SaveInvitesResponse_Response_Success.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            result: isSet(object.result)\n                ? SaveInvitesResponse_Response_Success.fromJSON(object.result)\n                : undefined,\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = message.result\n                ? SaveInvitesResponse_Response_Success.toJSON(message.result)\n                : undefined);\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSaveInvitesResponse_Response();\n        message.result =\n            object.result !== undefined && object.result !== null\n                ? SaveInvitesResponse_Response_Success.fromPartial(object.result)\n                : undefined;\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSaveInvitesResponse_Response_Success() {\n    return { conversation: undefined };\n}\nconst SaveInvitesResponse_Response_Success = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.conversation !== undefined) {\n            _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.encode(message.conversation, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveInvitesResponse_Response_Success();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversation = _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversation: isSet(object.conversation)\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromJSON(object.conversation)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.conversation !== undefined &&\n            (obj.conversation = message.conversation\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.toJSON(message.conversation)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSaveInvitesResponse_Response_Success();\n        message.conversation =\n            object.conversation !== undefined && object.conversation !== null\n                ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromPartial(object.conversation)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseCreateAuthTokenRequest() {\n    return { timestampNs: undefined };\n}\nconst CreateAuthTokenRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.timestampNs !== undefined) {\n            writer.uint32(8).uint64(message.timestampNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateAuthTokenRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.timestampNs = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            timestampNs: isSet(object.timestampNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.timestampNs !== undefined &&\n            (obj.timestampNs = (message.timestampNs || undefined).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseCreateAuthTokenRequest();\n        message.timestampNs =\n            object.timestampNs !== undefined && object.timestampNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSaveV1ConversationsRequest() {\n    return { conversations: [] };\n}\nconst SaveV1ConversationsRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.conversations) {\n            _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveV1ConversationsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversations.push(_message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversations: Array.isArray(object === null || object === void 0 ? void 0 : object.conversations)\n                ? object.conversations.map((e) => _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.conversations) {\n            obj.conversations = message.conversations.map((e) => e ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.toJSON(e) : undefined);\n        }\n        else {\n            obj.conversations = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSaveV1ConversationsRequest();\n        message.conversations =\n            ((_a = object.conversations) === null || _a === void 0 ? void 0 : _a.map((e) => _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseSaveV1ConversationsResponse() {\n    return {};\n}\nconst SaveV1ConversationsResponse = {\n    encode(_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSaveV1ConversationsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseSaveV1ConversationsResponse();\n        return message;\n    },\n};\nfunction createBaseGetConversationsResponse() {\n    return { conversations: [] };\n}\nconst GetConversationsResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.conversations) {\n            _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversations.push(_message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversations: Array.isArray(object === null || object === void 0 ? void 0 : object.conversations)\n                ? object.conversations.map((e) => _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.conversations) {\n            obj.conversations = message.conversations.map((e) => e ? _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.toJSON(e) : undefined);\n        }\n        else {\n            obj.conversations = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationsResponse();\n        message.conversations =\n            ((_a = object.conversations) === null || _a === void 0 ? void 0 : _a.map((e) => _message_contents_conversation_reference_pb__WEBPACK_IMPORTED_MODULE_4__.ConversationReference.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBaseGetKeystoreStatusRequest() {\n    return { walletAddress: \"\" };\n}\nconst GetKeystoreStatusRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.walletAddress !== \"\") {\n            writer.uint32(10).string(message.walletAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetKeystoreStatusRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletAddress: isSet(object.walletAddress)\n                ? String(object.walletAddress)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.walletAddress !== undefined &&\n            (obj.walletAddress = message.walletAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetKeystoreStatusRequest();\n        message.walletAddress = (_a = object.walletAddress) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseGetKeystoreStatusResponse() {\n    return { status: 0 };\n}\nconst GetKeystoreStatusResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.status !== 0) {\n            writer.uint32(8).int32(message.status);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetKeystoreStatusResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            status: isSet(object.status)\n                ? getKeystoreStatusResponse_KeystoreStatusFromJSON(object.status)\n                : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.status !== undefined &&\n            (obj.status = getKeystoreStatusResponse_KeystoreStatusToJSON(message.status));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetKeystoreStatusResponse();\n        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    },\n};\nfunction createBaseInitKeystoreRequest() {\n    return { v1: undefined };\n}\nconst InitKeystoreRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInitKeystoreRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseInitKeystoreRequest();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? _message_contents_private_key_pb__WEBPACK_IMPORTED_MODULE_5__.PrivateKeyBundleV1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseInitKeystoreResponse() {\n    return { error: undefined };\n}\nconst InitKeystoreResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.error !== undefined) {\n            KeystoreError.encode(message.error, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInitKeystoreResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.error = KeystoreError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            error: isSet(object.error)\n                ? KeystoreError.fromJSON(object.error)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.error !== undefined &&\n            (obj.error = message.error\n                ? KeystoreError.toJSON(message.error)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseInitKeystoreResponse();\n        message.error =\n            object.error !== undefined && object.error !== null\n                ? KeystoreError.fromPartial(object.error)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignDigestRequest() {\n    return {\n        digest: new Uint8Array(),\n        identityKey: undefined,\n        prekeyIndex: undefined,\n    };\n}\nconst SignDigestRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.digest.length !== 0) {\n            writer.uint32(10).bytes(message.digest);\n        }\n        if (message.identityKey !== undefined) {\n            writer.uint32(16).bool(message.identityKey);\n        }\n        if (message.prekeyIndex !== undefined) {\n            writer.uint32(24).uint32(message.prekeyIndex);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignDigestRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.digest = reader.bytes();\n                    break;\n                case 2:\n                    message.identityKey = reader.bool();\n                    break;\n                case 3:\n                    message.prekeyIndex = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            digest: isSet(object.digest)\n                ? bytesFromBase64(object.digest)\n                : new Uint8Array(),\n            identityKey: isSet(object.identityKey)\n                ? Boolean(object.identityKey)\n                : undefined,\n            prekeyIndex: isSet(object.prekeyIndex)\n                ? Number(object.prekeyIndex)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.digest !== undefined &&\n            (obj.digest = base64FromBytes(message.digest !== undefined ? message.digest : new Uint8Array()));\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey);\n        message.prekeyIndex !== undefined &&\n            (obj.prekeyIndex = Math.round(message.prekeyIndex));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseSignDigestRequest();\n        message.digest = (_a = object.digest) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.identityKey = (_b = object.identityKey) !== null && _b !== void 0 ? _b : undefined;\n        message.prekeyIndex = (_c = object.prekeyIndex) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    },\n};\nfunction createBaseGetRefreshJobRequest() {\n    return { jobType: 0 };\n}\nconst GetRefreshJobRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.jobType !== 0) {\n            writer.uint32(8).int32(message.jobType);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetRefreshJobRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.jobType = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            jobType: isSet(object.jobType) ? jobTypeFromJSON(object.jobType) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.jobType !== undefined &&\n            (obj.jobType = jobTypeToJSON(message.jobType));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetRefreshJobRequest();\n        message.jobType = (_a = object.jobType) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    },\n};\nfunction createBaseGetRefreshJobResponse() {\n    return { lastRunNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO };\n}\nconst GetRefreshJobResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (!message.lastRunNs.isZero()) {\n            writer.uint32(8).int64(message.lastRunNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetRefreshJobResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.lastRunNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            lastRunNs: isSet(object.lastRunNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.lastRunNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.lastRunNs !== undefined &&\n            (obj.lastRunNs = (message.lastRunNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseGetRefreshJobResponse();\n        message.lastRunNs =\n            object.lastRunNs !== undefined && object.lastRunNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.lastRunNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO;\n        return message;\n    },\n};\nfunction createBaseSetRefeshJobRequest() {\n    return { jobType: 0, lastRunNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO };\n}\nconst SetRefeshJobRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.jobType !== 0) {\n            writer.uint32(8).int32(message.jobType);\n        }\n        if (!message.lastRunNs.isZero()) {\n            writer.uint32(16).int64(message.lastRunNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSetRefeshJobRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.jobType = reader.int32();\n                    break;\n                case 2:\n                    message.lastRunNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            jobType: isSet(object.jobType) ? jobTypeFromJSON(object.jobType) : 0,\n            lastRunNs: isSet(object.lastRunNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.lastRunNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.jobType !== undefined &&\n            (obj.jobType = jobTypeToJSON(message.jobType));\n        message.lastRunNs !== undefined &&\n            (obj.lastRunNs = (message.lastRunNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSetRefeshJobRequest();\n        message.jobType = (_a = object.jobType) !== null && _a !== void 0 ? _a : 0;\n        message.lastRunNs =\n            object.lastRunNs !== undefined && object.lastRunNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.lastRunNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ZERO;\n        return message;\n    },\n};\nfunction createBaseSetRefreshJobResponse() {\n    return {};\n}\nconst SetRefreshJobResponse = {\n    encode(_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSetRefreshJobResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseSetRefreshJobResponse();\n        return message;\n    },\n};\nfunction createBaseTopicMap() {\n    return { topics: {} };\n}\nconst TopicMap = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        Object.entries(message.topics).forEach(([key, value]) => {\n            TopicMap_TopicsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTopicMap();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    const entry1 = TopicMap_TopicsEntry.decode(reader, reader.uint32());\n                    if (entry1.value !== undefined) {\n                        message.topics[entry1.key] = entry1.value;\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            topics: isObject(object.topics)\n                ? Object.entries(object.topics).reduce((acc, [key, value]) => {\n                    acc[key] = TopicMap_TopicData.fromJSON(value);\n                    return acc;\n                }, {})\n                : {},\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        obj.topics = {};\n        if (message.topics) {\n            Object.entries(message.topics).forEach(([k, v]) => {\n                obj.topics[k] = TopicMap_TopicData.toJSON(v);\n            });\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseTopicMap();\n        message.topics = Object.entries((_a = object.topics) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = TopicMap_TopicData.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    },\n};\nfunction createBaseTopicMap_TopicData() {\n    return { createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, peerAddress: \"\", invitation: undefined };\n}\nconst TopicMap_TopicData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (!message.createdNs.isZero()) {\n            writer.uint32(8).uint64(message.createdNs);\n        }\n        if (message.peerAddress !== \"\") {\n            writer.uint32(18).string(message.peerAddress);\n        }\n        if (message.invitation !== undefined) {\n            _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.encode(message.invitation, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTopicMap_TopicData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 2:\n                    message.peerAddress = reader.string();\n                    break;\n                case 3:\n                    message.invitation = _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            peerAddress: isSet(object.peerAddress) ? String(object.peerAddress) : \"\",\n            invitation: isSet(object.invitation)\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.fromJSON(object.invitation)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.peerAddress !== undefined &&\n            (obj.peerAddress = message.peerAddress);\n        message.invitation !== undefined &&\n            (obj.invitation = message.invitation\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.toJSON(message.invitation)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseTopicMap_TopicData();\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.peerAddress = (_a = object.peerAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.invitation =\n            object.invitation !== undefined && object.invitation !== null\n                ? _message_contents_invitation_pb__WEBPACK_IMPORTED_MODULE_3__.InvitationV1.fromPartial(object.invitation)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseTopicMap_TopicsEntry() {\n    return { key: \"\", value: undefined };\n}\nconst TopicMap_TopicsEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            TopicMap_TopicData.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTopicMap_TopicsEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = TopicMap_TopicData.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value)\n                ? TopicMap_TopicData.fromJSON(object.value)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined &&\n            (obj.value = message.value\n                ? TopicMap_TopicData.toJSON(message.value)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseTopicMap_TopicsEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value =\n            object.value !== undefined && object.value !== null\n                ? TopicMap_TopicData.fromPartial(object.value)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysRequest() {\n    return { topics: [] };\n}\nconst GetConversationHmacKeysRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.topics) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.topics.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            topics: Array.isArray(object === null || object === void 0 ? void 0 : object.topics)\n                ? object.topics.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.topics) {\n            obj.topics = message.topics.map((e) => e);\n        }\n        else {\n            obj.topics = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationHmacKeysRequest();\n        message.topics = ((_a = object.topics) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysResponse() {\n    return { hmacKeys: {} };\n}\nconst GetConversationHmacKeysResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        Object.entries(message.hmacKeys).forEach(([key, value]) => {\n            GetConversationHmacKeysResponse_HmacKeysEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    const entry1 = GetConversationHmacKeysResponse_HmacKeysEntry.decode(reader, reader.uint32());\n                    if (entry1.value !== undefined) {\n                        message.hmacKeys[entry1.key] = entry1.value;\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            hmacKeys: isObject(object.hmacKeys)\n                ? Object.entries(object.hmacKeys).reduce((acc, [key, value]) => {\n                    acc[key] = GetConversationHmacKeysResponse_HmacKeys.fromJSON(value);\n                    return acc;\n                }, {})\n                : {},\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        obj.hmacKeys = {};\n        if (message.hmacKeys) {\n            Object.entries(message.hmacKeys).forEach(([k, v]) => {\n                obj.hmacKeys[k] = GetConversationHmacKeysResponse_HmacKeys.toJSON(v);\n            });\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationHmacKeysResponse();\n        message.hmacKeys = Object.entries((_a = object.hmacKeys) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = GetConversationHmacKeysResponse_HmacKeys.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysResponse_HmacKeyData() {\n    return { thirtyDayPeriodsSinceEpoch: 0, hmacKey: new Uint8Array() };\n}\nconst GetConversationHmacKeysResponse_HmacKeyData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.thirtyDayPeriodsSinceEpoch !== 0) {\n            writer.uint32(8).int32(message.thirtyDayPeriodsSinceEpoch);\n        }\n        if (message.hmacKey.length !== 0) {\n            writer.uint32(18).bytes(message.hmacKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeyData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.thirtyDayPeriodsSinceEpoch = reader.int32();\n                    break;\n                case 2:\n                    message.hmacKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            thirtyDayPeriodsSinceEpoch: isSet(object.thirtyDayPeriodsSinceEpoch)\n                ? Number(object.thirtyDayPeriodsSinceEpoch)\n                : 0,\n            hmacKey: isSet(object.hmacKey)\n                ? bytesFromBase64(object.hmacKey)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.thirtyDayPeriodsSinceEpoch !== undefined &&\n            (obj.thirtyDayPeriodsSinceEpoch = Math.round(message.thirtyDayPeriodsSinceEpoch));\n        message.hmacKey !== undefined &&\n            (obj.hmacKey = base64FromBytes(message.hmacKey !== undefined ? message.hmacKey : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeyData();\n        message.thirtyDayPeriodsSinceEpoch = (_a = object.thirtyDayPeriodsSinceEpoch) !== null && _a !== void 0 ? _a : 0;\n        message.hmacKey = (_b = object.hmacKey) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysResponse_HmacKeys() {\n    return { values: [] };\n}\nconst GetConversationHmacKeysResponse_HmacKeys = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        for (const v of message.values) {\n            GetConversationHmacKeysResponse_HmacKeyData.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeys();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.values.push(GetConversationHmacKeysResponse_HmacKeyData.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            values: Array.isArray(object === null || object === void 0 ? void 0 : object.values)\n                ? object.values.map((e) => GetConversationHmacKeysResponse_HmacKeyData.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.values) {\n            obj.values = message.values.map((e) => e ? GetConversationHmacKeysResponse_HmacKeyData.toJSON(e) : undefined);\n        }\n        else {\n            obj.values = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeys();\n        message.values =\n            ((_a = object.values) === null || _a === void 0 ? void 0 : _a.map((e) => GetConversationHmacKeysResponse_HmacKeyData.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGetConversationHmacKeysResponse_HmacKeysEntry() {\n    return { key: \"\", value: undefined };\n}\nconst GetConversationHmacKeysResponse_HmacKeysEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            GetConversationHmacKeysResponse_HmacKeys.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeysEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = GetConversationHmacKeysResponse_HmacKeys.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value)\n                ? GetConversationHmacKeysResponse_HmacKeys.fromJSON(object.value)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined &&\n            (obj.value = message.value\n                ? GetConversationHmacKeysResponse_HmacKeys.toJSON(message.value)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetConversationHmacKeysResponse_HmacKeysEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value =\n            object.value !== undefined && object.value !== null\n                ? GetConversationHmacKeysResponse_HmacKeys.fromPartial(object.value)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesActionMap() {\n    return { actions: {} };\n}\nconst PrivatePreferencesActionMap = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        Object.entries(message.actions).forEach(([key, value]) => {\n            PrivatePreferencesActionMap_ActionsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesActionMap();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    const entry1 = PrivatePreferencesActionMap_ActionsEntry.decode(reader, reader.uint32());\n                    if (entry1.value !== undefined) {\n                        message.actions[entry1.key] = entry1.value;\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            actions: isObject(object.actions)\n                ? Object.entries(object.actions).reduce((acc, [key, value]) => {\n                    acc[key] = _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_6__.PrivatePreferencesAction.fromJSON(value);\n                    return acc;\n                }, {})\n                : {},\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        obj.actions = {};\n        if (message.actions) {\n            Object.entries(message.actions).forEach(([k, v]) => {\n                obj.actions[k] = _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_6__.PrivatePreferencesAction.toJSON(v);\n            });\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesActionMap();\n        message.actions = Object.entries((_a = object.actions) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_6__.PrivatePreferencesAction.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesActionMap_ActionsEntry() {\n    return { key: \"\", value: undefined };\n}\nconst PrivatePreferencesActionMap_ActionsEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_6__.PrivatePreferencesAction.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesActionMap_ActionsEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_6__.PrivatePreferencesAction.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value)\n                ? _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_6__.PrivatePreferencesAction.fromJSON(object.value)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined &&\n            (obj.value = message.value\n                ? _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_6__.PrivatePreferencesAction.toJSON(message.value)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesActionMap_ActionsEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value =\n            object.value !== undefined && object.value !== null\n                ? _message_contents_private_preferences_pb__WEBPACK_IMPORTED_MODULE_6__.PrivatePreferencesAction.fromPartial(object.value)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_7___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=keystore.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/keystore_api/v1/keystore.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/authn.pb.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/authn.pb.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthData: () => (/* binding */ AuthData),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../message_contents/public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../message_contents/signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_api.v1\";\nfunction createBaseToken() {\n    return {\n        identityKey: undefined,\n        authDataBytes: new Uint8Array(),\n        authDataSignature: undefined,\n    };\n}\nconst Token = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.authDataBytes.length !== 0) {\n            writer.uint32(18).bytes(message.authDataBytes);\n        }\n        if (message.authDataSignature !== undefined) {\n            _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.encode(message.authDataSignature, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseToken();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.authDataBytes = reader.bytes();\n                    break;\n                case 3:\n                    message.authDataSignature = _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.fromJSON(object.identityKey)\n                : undefined,\n            authDataBytes: isSet(object.authDataBytes)\n                ? bytesFromBase64(object.authDataBytes)\n                : new Uint8Array(),\n            authDataSignature: isSet(object.authDataSignature)\n                ? _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.fromJSON(object.authDataSignature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.toJSON(message.identityKey)\n                : undefined);\n        message.authDataBytes !== undefined &&\n            (obj.authDataBytes = base64FromBytes(message.authDataBytes !== undefined\n                ? message.authDataBytes\n                : new Uint8Array()));\n        message.authDataSignature !== undefined &&\n            (obj.authDataSignature = message.authDataSignature\n                ? _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.toJSON(message.authDataSignature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseToken();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? _message_contents_public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.fromPartial(object.identityKey)\n                : undefined;\n        message.authDataBytes = (_a = object.authDataBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.authDataSignature =\n            object.authDataSignature !== undefined &&\n                object.authDataSignature !== null\n                ? _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.fromPartial(object.authDataSignature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseAuthData() {\n    return { walletAddr: \"\", createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst AuthData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.walletAddr !== \"\") {\n            writer.uint32(10).string(message.walletAddr);\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(16).uint64(message.createdNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAuthData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletAddr = reader.string();\n                    break;\n                case 2:\n                    message.createdNs = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletAddr: isSet(object.walletAddr) ? String(object.walletAddr) : \"\",\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.walletAddr !== undefined && (obj.walletAddr = message.walletAddr);\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseAuthData();\n        message.walletAddr = (_a = object.walletAddr) !== null && _a !== void 0 ? _a : \"\";\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=authn.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/authn.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/message_api.pb.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/message_api.pb.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessageApi: () => (/* binding */ MessageApi),\n/* harmony export */   SortDirection: () => (/* binding */ SortDirection)\n/* harmony export */ });\n/* harmony import */ var _fetch_pb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../fetch.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/fetch.pb.js\");\n/* eslint-disable */\n// @ts-nocheck\n/*\n* This file is a generated Typescript file for GRPC Gateway, DO NOT MODIFY\n*/\n\nvar SortDirection;\n(function (SortDirection) {\n    SortDirection[\"SORT_DIRECTION_UNSPECIFIED\"] = \"SORT_DIRECTION_UNSPECIFIED\";\n    SortDirection[\"SORT_DIRECTION_ASCENDING\"] = \"SORT_DIRECTION_ASCENDING\";\n    SortDirection[\"SORT_DIRECTION_DESCENDING\"] = \"SORT_DIRECTION_DESCENDING\";\n})(SortDirection || (SortDirection = {}));\nclass MessageApi {\n    static Publish(req, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchReq(`/message/v1/publish`, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n    static Subscribe(req, entityNotifier, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchStreamingRequest(`/message/v1/subscribe`, entityNotifier, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n    static SubscribeAll(req, entityNotifier, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchStreamingRequest(`/message/v1/subscribe-all`, entityNotifier, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n    static Query(req, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchReq(`/message/v1/query`, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n    static BatchQuery(req, initReq) {\n        return _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.fetchReq(`/message/v1/batch-query`, Object.assign(Object.assign({}, initReq), { method: \"POST\", body: JSON.stringify(req, _fetch_pb__WEBPACK_IMPORTED_MODULE_0__.replacer) }));\n    }\n}\n//# sourceMappingURL=message_api.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbWVzc2FnZV9hcGkvdjEvbWVzc2FnZV9hcGkucGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxQztBQUM5QjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7QUFDaEM7QUFDUDtBQUNBLGVBQWUsK0NBQVcsc0RBQXNELGNBQWMsMENBQTBDLCtDQUFXLEdBQUc7QUFDdEo7QUFDQTtBQUNBLGVBQWUsNERBQXdCLHdFQUF3RSxjQUFjLDBDQUEwQywrQ0FBVyxHQUFHO0FBQ3JMO0FBQ0E7QUFDQSxlQUFlLDREQUF3Qiw0RUFBNEUsY0FBYywwQ0FBMEMsK0NBQVcsR0FBRztBQUN6TDtBQUNBO0FBQ0EsZUFBZSwrQ0FBVyxvREFBb0QsY0FBYywwQ0FBMEMsK0NBQVcsR0FBRztBQUNwSjtBQUNBO0FBQ0EsZUFBZSwrQ0FBVywwREFBMEQsY0FBYywwQ0FBMEMsK0NBQVcsR0FBRztBQUMxSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC9wcm90by90cy9kaXN0L2VzbS9tZXNzYWdlX2FwaS92MS9tZXNzYWdlX2FwaS5wYi5qcz9iYzgyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuLypcbiogVGhpcyBmaWxlIGlzIGEgZ2VuZXJhdGVkIFR5cGVzY3JpcHQgZmlsZSBmb3IgR1JQQyBHYXRld2F5LCBETyBOT1QgTU9ESUZZXG4qL1xuaW1wb3J0ICogYXMgZm0gZnJvbSBcIi4uLy4uL2ZldGNoLnBiXCI7XG5leHBvcnQgdmFyIFNvcnREaXJlY3Rpb247XG4oZnVuY3Rpb24gKFNvcnREaXJlY3Rpb24pIHtcbiAgICBTb3J0RGlyZWN0aW9uW1wiU09SVF9ESVJFQ1RJT05fVU5TUEVDSUZJRURcIl0gPSBcIlNPUlRfRElSRUNUSU9OX1VOU1BFQ0lGSUVEXCI7XG4gICAgU29ydERpcmVjdGlvbltcIlNPUlRfRElSRUNUSU9OX0FTQ0VORElOR1wiXSA9IFwiU09SVF9ESVJFQ1RJT05fQVNDRU5ESU5HXCI7XG4gICAgU29ydERpcmVjdGlvbltcIlNPUlRfRElSRUNUSU9OX0RFU0NFTkRJTkdcIl0gPSBcIlNPUlRfRElSRUNUSU9OX0RFU0NFTkRJTkdcIjtcbn0pKFNvcnREaXJlY3Rpb24gfHwgKFNvcnREaXJlY3Rpb24gPSB7fSkpO1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VBcGkge1xuICAgIHN0YXRpYyBQdWJsaXNoKHJlcSwgaW5pdFJlcSkge1xuICAgICAgICByZXR1cm4gZm0uZmV0Y2hSZXEoYC9tZXNzYWdlL3YxL3B1Ymxpc2hgLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGluaXRSZXEpLCB7IG1ldGhvZDogXCJQT1NUXCIsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcSwgZm0ucmVwbGFjZXIpIH0pKTtcbiAgICB9XG4gICAgc3RhdGljIFN1YnNjcmliZShyZXEsIGVudGl0eU5vdGlmaWVyLCBpbml0UmVxKSB7XG4gICAgICAgIHJldHVybiBmbS5mZXRjaFN0cmVhbWluZ1JlcXVlc3QoYC9tZXNzYWdlL3YxL3N1YnNjcmliZWAsIGVudGl0eU5vdGlmaWVyLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGluaXRSZXEpLCB7IG1ldGhvZDogXCJQT1NUXCIsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcSwgZm0ucmVwbGFjZXIpIH0pKTtcbiAgICB9XG4gICAgc3RhdGljIFN1YnNjcmliZUFsbChyZXEsIGVudGl0eU5vdGlmaWVyLCBpbml0UmVxKSB7XG4gICAgICAgIHJldHVybiBmbS5mZXRjaFN0cmVhbWluZ1JlcXVlc3QoYC9tZXNzYWdlL3YxL3N1YnNjcmliZS1hbGxgLCBlbnRpdHlOb3RpZmllciwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbml0UmVxKSwgeyBtZXRob2Q6IFwiUE9TVFwiLCBib2R5OiBKU09OLnN0cmluZ2lmeShyZXEsIGZtLnJlcGxhY2VyKSB9KSk7XG4gICAgfVxuICAgIHN0YXRpYyBRdWVyeShyZXEsIGluaXRSZXEpIHtcbiAgICAgICAgcmV0dXJuIGZtLmZldGNoUmVxKGAvbWVzc2FnZS92MS9xdWVyeWAsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaW5pdFJlcSksIHsgbWV0aG9kOiBcIlBPU1RcIiwgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxLCBmbS5yZXBsYWNlcikgfSkpO1xuICAgIH1cbiAgICBzdGF0aWMgQmF0Y2hRdWVyeShyZXEsIGluaXRSZXEpIHtcbiAgICAgICAgcmV0dXJuIGZtLmZldGNoUmVxKGAvbWVzc2FnZS92MS9iYXRjaC1xdWVyeWAsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaW5pdFJlcSksIHsgbWV0aG9kOiBcIlBPU1RcIiwgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxLCBmbS5yZXBsYWNlcikgfSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VfYXBpLnBiLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_api/v1/message_api.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ciphertext: () => (/* binding */ Ciphertext),\n/* harmony export */   Ciphertext_Aes256gcmHkdfsha256: () => (/* binding */ Ciphertext_Aes256gcmHkdfsha256),\n/* harmony export */   SignedEciesCiphertext: () => (/* binding */ SignedEciesCiphertext),\n/* harmony export */   SignedEciesCiphertext_Ecies: () => (/* binding */ SignedEciesCiphertext_Ecies),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseCiphertext() {\n    return { aes256GcmHkdfSha256: undefined };\n}\nconst Ciphertext = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.aes256GcmHkdfSha256 !== undefined) {\n            Ciphertext_Aes256gcmHkdfsha256.encode(message.aes256GcmHkdfSha256, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCiphertext();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.aes256GcmHkdfSha256 = Ciphertext_Aes256gcmHkdfsha256.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            aes256GcmHkdfSha256: isSet(object.aes256GcmHkdfSha256)\n                ? Ciphertext_Aes256gcmHkdfsha256.fromJSON(object.aes256GcmHkdfSha256)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.aes256GcmHkdfSha256 !== undefined &&\n            (obj.aes256GcmHkdfSha256 = message.aes256GcmHkdfSha256\n                ? Ciphertext_Aes256gcmHkdfsha256.toJSON(message.aes256GcmHkdfSha256)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseCiphertext();\n        message.aes256GcmHkdfSha256 =\n            object.aes256GcmHkdfSha256 !== undefined &&\n                object.aes256GcmHkdfSha256 !== null\n                ? Ciphertext_Aes256gcmHkdfsha256.fromPartial(object.aes256GcmHkdfSha256)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseCiphertext_Aes256gcmHkdfsha256() {\n    return {\n        hkdfSalt: new Uint8Array(),\n        gcmNonce: new Uint8Array(),\n        payload: new Uint8Array(),\n    };\n}\nconst Ciphertext_Aes256gcmHkdfsha256 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.hkdfSalt.length !== 0) {\n            writer.uint32(10).bytes(message.hkdfSalt);\n        }\n        if (message.gcmNonce.length !== 0) {\n            writer.uint32(18).bytes(message.gcmNonce);\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(26).bytes(message.payload);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCiphertext_Aes256gcmHkdfsha256();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hkdfSalt = reader.bytes();\n                    break;\n                case 2:\n                    message.gcmNonce = reader.bytes();\n                    break;\n                case 3:\n                    message.payload = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            hkdfSalt: isSet(object.hkdfSalt)\n                ? bytesFromBase64(object.hkdfSalt)\n                : new Uint8Array(),\n            gcmNonce: isSet(object.gcmNonce)\n                ? bytesFromBase64(object.gcmNonce)\n                : new Uint8Array(),\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hkdfSalt !== undefined &&\n            (obj.hkdfSalt = base64FromBytes(message.hkdfSalt !== undefined ? message.hkdfSalt : new Uint8Array()));\n        message.gcmNonce !== undefined &&\n            (obj.gcmNonce = base64FromBytes(message.gcmNonce !== undefined ? message.gcmNonce : new Uint8Array()));\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseCiphertext_Aes256gcmHkdfsha256();\n        message.hkdfSalt = (_a = object.hkdfSalt) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.gcmNonce = (_b = object.gcmNonce) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.payload = (_c = object.payload) !== null && _c !== void 0 ? _c : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSignedEciesCiphertext() {\n    return { eciesBytes: new Uint8Array(), signature: undefined };\n}\nconst SignedEciesCiphertext = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.eciesBytes.length !== 0) {\n            writer.uint32(10).bytes(message.eciesBytes);\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedEciesCiphertext();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.eciesBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            eciesBytes: isSet(object.eciesBytes)\n                ? bytesFromBase64(object.eciesBytes)\n                : new Uint8Array(),\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.eciesBytes !== undefined &&\n            (obj.eciesBytes = base64FromBytes(message.eciesBytes !== undefined ? message.eciesBytes : new Uint8Array()));\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedEciesCiphertext();\n        message.eciesBytes = (_a = object.eciesBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignedEciesCiphertext_Ecies() {\n    return {\n        ephemeralPublicKey: new Uint8Array(),\n        iv: new Uint8Array(),\n        mac: new Uint8Array(),\n        ciphertext: new Uint8Array(),\n    };\n}\nconst SignedEciesCiphertext_Ecies = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.ephemeralPublicKey.length !== 0) {\n            writer.uint32(10).bytes(message.ephemeralPublicKey);\n        }\n        if (message.iv.length !== 0) {\n            writer.uint32(18).bytes(message.iv);\n        }\n        if (message.mac.length !== 0) {\n            writer.uint32(26).bytes(message.mac);\n        }\n        if (message.ciphertext.length !== 0) {\n            writer.uint32(34).bytes(message.ciphertext);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedEciesCiphertext_Ecies();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ephemeralPublicKey = reader.bytes();\n                    break;\n                case 2:\n                    message.iv = reader.bytes();\n                    break;\n                case 3:\n                    message.mac = reader.bytes();\n                    break;\n                case 4:\n                    message.ciphertext = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ephemeralPublicKey: isSet(object.ephemeralPublicKey)\n                ? bytesFromBase64(object.ephemeralPublicKey)\n                : new Uint8Array(),\n            iv: isSet(object.iv) ? bytesFromBase64(object.iv) : new Uint8Array(),\n            mac: isSet(object.mac) ? bytesFromBase64(object.mac) : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? bytesFromBase64(object.ciphertext)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ephemeralPublicKey !== undefined &&\n            (obj.ephemeralPublicKey = base64FromBytes(message.ephemeralPublicKey !== undefined\n                ? message.ephemeralPublicKey\n                : new Uint8Array()));\n        message.iv !== undefined &&\n            (obj.iv = base64FromBytes(message.iv !== undefined ? message.iv : new Uint8Array()));\n        message.mac !== undefined &&\n            (obj.mac = base64FromBytes(message.mac !== undefined ? message.mac : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = base64FromBytes(message.ciphertext !== undefined ? message.ciphertext : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseSignedEciesCiphertext_Ecies();\n        message.ephemeralPublicKey = (_a = object.ephemeralPublicKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.iv = (_b = object.iv) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.mac = (_c = object.mac) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.ciphertext = (_d = object.ciphertext) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=ciphertext.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/composite.pb.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/composite.pb.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Composite: () => (/* binding */ Composite),\n/* harmony export */   Composite_Part: () => (/* binding */ Composite_Part),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _content_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./content.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseComposite() {\n    return { parts: [] };\n}\nconst Composite = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.parts) {\n            Composite_Part.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseComposite();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.parts.push(Composite_Part.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            parts: Array.isArray(object === null || object === void 0 ? void 0 : object.parts)\n                ? object.parts.map((e) => Composite_Part.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.parts) {\n            obj.parts = message.parts.map((e) => e ? Composite_Part.toJSON(e) : undefined);\n        }\n        else {\n            obj.parts = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseComposite();\n        message.parts =\n            ((_a = object.parts) === null || _a === void 0 ? void 0 : _a.map((e) => Composite_Part.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseComposite_Part() {\n    return { part: undefined, composite: undefined };\n}\nconst Composite_Part = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.part !== undefined) {\n            _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.encode(message.part, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.composite !== undefined) {\n            Composite.encode(message.composite, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseComposite_Part();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.part = _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.composite = Composite.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            part: isSet(object.part)\n                ? _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.fromJSON(object.part)\n                : undefined,\n            composite: isSet(object.composite)\n                ? Composite.fromJSON(object.composite)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.part !== undefined &&\n            (obj.part = message.part\n                ? _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.toJSON(message.part)\n                : undefined);\n        message.composite !== undefined &&\n            (obj.composite = message.composite\n                ? Composite.toJSON(message.composite)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseComposite_Part();\n        message.part =\n            object.part !== undefined && object.part !== null\n                ? _content_pb__WEBPACK_IMPORTED_MODULE_1__.EncodedContent.fromPartial(object.part)\n                : undefined;\n        message.composite =\n            object.composite !== undefined && object.composite !== null\n                ? Composite.fromPartial(object.composite)\n                : undefined;\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=composite.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbWVzc2FnZV9jb250ZW50cy9jb21wb3NpdGUucGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ3dCO0FBQ3NCO0FBQ1Q7QUFDOUI7QUFDUDtBQUNBLGFBQWE7QUFDYjtBQUNPO0FBQ1AsNkJBQTZCLGdFQUFVO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esd0NBQXdDLGtFQUFVLGVBQWUsa0VBQVU7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ087QUFDUCw2QkFBNkIsZ0VBQVU7QUFDdkM7QUFDQSxZQUFZLHVEQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx3Q0FBd0Msa0VBQVUsZUFBZSxrRUFBVTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsdURBQWM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVEQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsdURBQWM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVEQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLElBQUksZ0VBQVEsVUFBVSw0Q0FBSTtBQUMxQixJQUFJLGdFQUFRLFFBQVEsNENBQUk7QUFDeEIsSUFBSSxtRUFBYTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbWVzc2FnZV9jb250ZW50cy9jb21wb3NpdGUucGIuanM/MTkzZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IExvbmcgZnJvbSBcImxvbmdcIjtcbmltcG9ydCB7IEVuY29kZWRDb250ZW50IH0gZnJvbSBcIi4vY29udGVudC5wYlwiO1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gXCJ4bXRwLm1lc3NhZ2VfY29udGVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VDb21wb3NpdGUoKSB7XG4gICAgcmV0dXJuIHsgcGFydHM6IFtdIH07XG59XG5leHBvcnQgY29uc3QgQ29tcG9zaXRlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLnBhcnRzKSB7XG4gICAgICAgICAgICBDb21wb3NpdGVfUGFydC5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbXBvc2l0ZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFydHMucHVzaChDb21wb3NpdGVfUGFydC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFydHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LnBhcnRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnBhcnRzLm1hcCgoZSkgPT4gQ29tcG9zaXRlX1BhcnQuZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5wYXJ0cykge1xuICAgICAgICAgICAgb2JqLnBhcnRzID0gbWVzc2FnZS5wYXJ0cy5tYXAoKGUpID0+IGUgPyBDb21wb3NpdGVfUGFydC50b0pTT04oZSkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnBhcnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcG9zaXRlKCk7XG4gICAgICAgIG1lc3NhZ2UucGFydHMgPVxuICAgICAgICAgICAgKChfYSA9IG9iamVjdC5wYXJ0cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hcCgoZSkgPT4gQ29tcG9zaXRlX1BhcnQuZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29tcG9zaXRlX1BhcnQoKSB7XG4gICAgcmV0dXJuIHsgcGFydDogdW5kZWZpbmVkLCBjb21wb3NpdGU6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IENvbXBvc2l0ZV9QYXJ0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgRW5jb2RlZENvbnRlbnQuZW5jb2RlKG1lc3NhZ2UucGFydCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb21wb3NpdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQ29tcG9zaXRlLmVuY29kZShtZXNzYWdlLmNvbXBvc2l0ZSwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbXBvc2l0ZV9QYXJ0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXJ0ID0gRW5jb2RlZENvbnRlbnQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbXBvc2l0ZSA9IENvbXBvc2l0ZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXJ0OiBpc1NldChvYmplY3QucGFydClcbiAgICAgICAgICAgICAgICA/IEVuY29kZWRDb250ZW50LmZyb21KU09OKG9iamVjdC5wYXJ0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29tcG9zaXRlOiBpc1NldChvYmplY3QuY29tcG9zaXRlKVxuICAgICAgICAgICAgICAgID8gQ29tcG9zaXRlLmZyb21KU09OKG9iamVjdC5jb21wb3NpdGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5wYXJ0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucGFydCA9IG1lc3NhZ2UucGFydFxuICAgICAgICAgICAgICAgID8gRW5jb2RlZENvbnRlbnQudG9KU09OKG1lc3NhZ2UucGFydClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIG1lc3NhZ2UuY29tcG9zaXRlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouY29tcG9zaXRlID0gbWVzc2FnZS5jb21wb3NpdGVcbiAgICAgICAgICAgICAgICA/IENvbXBvc2l0ZS50b0pTT04obWVzc2FnZS5jb21wb3NpdGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcG9zaXRlX1BhcnQoKTtcbiAgICAgICAgbWVzc2FnZS5wYXJ0ID1cbiAgICAgICAgICAgIG9iamVjdC5wYXJ0ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnBhcnQgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IEVuY29kZWRDb250ZW50LmZyb21QYXJ0aWFsKG9iamVjdC5wYXJ0KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLmNvbXBvc2l0ZSA9XG4gICAgICAgICAgICBvYmplY3QuY29tcG9zaXRlICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmNvbXBvc2l0ZSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gQ29tcG9zaXRlLmZyb21QYXJ0aWFsKG9iamVjdC5jb21wb3NpdGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuaWYgKF9tMC51dGlsLkxvbmcgIT09IExvbmcpIHtcbiAgICBfbTAudXRpbC5Mb25nID0gTG9uZztcbiAgICBfbTAuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9zaXRlLnBiLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/composite.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/contact.pb.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/contact.pb.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContactBundle: () => (/* binding */ ContactBundle),\n/* harmony export */   ContactBundleV1: () => (/* binding */ ContactBundleV1),\n/* harmony export */   ContactBundleV2: () => (/* binding */ ContactBundleV2),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseContactBundleV1() {\n    return { keyBundle: undefined };\n}\nconst ContactBundleV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.keyBundle !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.encode(message.keyBundle, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContactBundleV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyBundle = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyBundle: isSet(object.keyBundle)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromJSON(object.keyBundle)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyBundle !== undefined &&\n            (obj.keyBundle = message.keyBundle\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.toJSON(message.keyBundle)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseContactBundleV1();\n        message.keyBundle =\n            object.keyBundle !== undefined && object.keyBundle !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromPartial(object.keyBundle)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseContactBundleV2() {\n    return { keyBundle: undefined };\n}\nconst ContactBundleV2 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.keyBundle !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.encode(message.keyBundle, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContactBundleV2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyBundle = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyBundle: isSet(object.keyBundle)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromJSON(object.keyBundle)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyBundle !== undefined &&\n            (obj.keyBundle = message.keyBundle\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.toJSON(message.keyBundle)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseContactBundleV2();\n        message.keyBundle =\n            object.keyBundle !== undefined && object.keyBundle !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromPartial(object.keyBundle)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseContactBundle() {\n    return { v1: undefined, v2: undefined };\n}\nconst ContactBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            ContactBundleV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.v2 !== undefined) {\n            ContactBundleV2.encode(message.v2, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContactBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = ContactBundleV1.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.v2 = ContactBundleV2.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? ContactBundleV1.fromJSON(object.v1) : undefined,\n            v2: isSet(object.v2) ? ContactBundleV2.fromJSON(object.v2) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? ContactBundleV1.toJSON(message.v1) : undefined);\n        message.v2 !== undefined &&\n            (obj.v2 = message.v2 ? ContactBundleV2.toJSON(message.v2) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseContactBundle();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? ContactBundleV1.fromPartial(object.v1)\n                : undefined;\n        message.v2 =\n            object.v2 !== undefined && object.v2 !== null\n                ? ContactBundleV2.fromPartial(object.v2)\n                : undefined;\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=contact.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/contact.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Compression: () => (/* binding */ Compression),\n/* harmony export */   ContentTypeId: () => (/* binding */ ContentTypeId),\n/* harmony export */   EncodedContent: () => (/* binding */ EncodedContent),\n/* harmony export */   EncodedContent_ParametersEntry: () => (/* binding */ EncodedContent_ParametersEntry),\n/* harmony export */   SignedContent: () => (/* binding */ SignedContent),\n/* harmony export */   compressionFromJSON: () => (/* binding */ compressionFromJSON),\n/* harmony export */   compressionToJSON: () => (/* binding */ compressionToJSON),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\n/** Message content encoding structures */\n/**\n * Recognized compression algorithms\n * protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH\n */\nvar Compression;\n(function (Compression) {\n    Compression[Compression[\"COMPRESSION_DEFLATE\"] = 0] = \"COMPRESSION_DEFLATE\";\n    Compression[Compression[\"COMPRESSION_GZIP\"] = 1] = \"COMPRESSION_GZIP\";\n    Compression[Compression[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Compression || (Compression = {}));\nfunction compressionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"COMPRESSION_DEFLATE\":\n            return Compression.COMPRESSION_DEFLATE;\n        case 1:\n        case \"COMPRESSION_GZIP\":\n            return Compression.COMPRESSION_GZIP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return Compression.UNRECOGNIZED;\n    }\n}\nfunction compressionToJSON(object) {\n    switch (object) {\n        case Compression.COMPRESSION_DEFLATE:\n            return \"COMPRESSION_DEFLATE\";\n        case Compression.COMPRESSION_GZIP:\n            return \"COMPRESSION_GZIP\";\n        case Compression.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseContentTypeId() {\n    return { authorityId: \"\", typeId: \"\", versionMajor: 0, versionMinor: 0 };\n}\nconst ContentTypeId = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.authorityId !== \"\") {\n            writer.uint32(10).string(message.authorityId);\n        }\n        if (message.typeId !== \"\") {\n            writer.uint32(18).string(message.typeId);\n        }\n        if (message.versionMajor !== 0) {\n            writer.uint32(24).uint32(message.versionMajor);\n        }\n        if (message.versionMinor !== 0) {\n            writer.uint32(32).uint32(message.versionMinor);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContentTypeId();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.authorityId = reader.string();\n                    break;\n                case 2:\n                    message.typeId = reader.string();\n                    break;\n                case 3:\n                    message.versionMajor = reader.uint32();\n                    break;\n                case 4:\n                    message.versionMinor = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            authorityId: isSet(object.authorityId) ? String(object.authorityId) : \"\",\n            typeId: isSet(object.typeId) ? String(object.typeId) : \"\",\n            versionMajor: isSet(object.versionMajor)\n                ? Number(object.versionMajor)\n                : 0,\n            versionMinor: isSet(object.versionMinor)\n                ? Number(object.versionMinor)\n                : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.authorityId !== undefined &&\n            (obj.authorityId = message.authorityId);\n        message.typeId !== undefined && (obj.typeId = message.typeId);\n        message.versionMajor !== undefined &&\n            (obj.versionMajor = Math.round(message.versionMajor));\n        message.versionMinor !== undefined &&\n            (obj.versionMinor = Math.round(message.versionMinor));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseContentTypeId();\n        message.authorityId = (_a = object.authorityId) !== null && _a !== void 0 ? _a : \"\";\n        message.typeId = (_b = object.typeId) !== null && _b !== void 0 ? _b : \"\";\n        message.versionMajor = (_c = object.versionMajor) !== null && _c !== void 0 ? _c : 0;\n        message.versionMinor = (_d = object.versionMinor) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    },\n};\nfunction createBaseEncodedContent() {\n    return {\n        type: undefined,\n        parameters: {},\n        fallback: undefined,\n        compression: undefined,\n        content: new Uint8Array(),\n    };\n}\nconst EncodedContent = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.type !== undefined) {\n            ContentTypeId.encode(message.type, writer.uint32(10).fork()).ldelim();\n        }\n        Object.entries(message.parameters).forEach(([key, value]) => {\n            EncodedContent_ParametersEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();\n        });\n        if (message.fallback !== undefined) {\n            writer.uint32(26).string(message.fallback);\n        }\n        if (message.compression !== undefined) {\n            writer.uint32(40).int32(message.compression);\n        }\n        if (message.content.length !== 0) {\n            writer.uint32(34).bytes(message.content);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedContent();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = ContentTypeId.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    const entry2 = EncodedContent_ParametersEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.parameters[entry2.key] = entry2.value;\n                    }\n                    break;\n                case 3:\n                    message.fallback = reader.string();\n                    break;\n                case 5:\n                    message.compression = reader.int32();\n                    break;\n                case 4:\n                    message.content = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            type: isSet(object.type)\n                ? ContentTypeId.fromJSON(object.type)\n                : undefined,\n            parameters: isObject(object.parameters)\n                ? Object.entries(object.parameters).reduce((acc, [key, value]) => {\n                    acc[key] = String(value);\n                    return acc;\n                }, {})\n                : {},\n            fallback: isSet(object.fallback) ? String(object.fallback) : undefined,\n            compression: isSet(object.compression)\n                ? compressionFromJSON(object.compression)\n                : undefined,\n            content: isSet(object.content)\n                ? bytesFromBase64(object.content)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined &&\n            (obj.type = message.type\n                ? ContentTypeId.toJSON(message.type)\n                : undefined);\n        obj.parameters = {};\n        if (message.parameters) {\n            Object.entries(message.parameters).forEach(([k, v]) => {\n                obj.parameters[k] = v;\n            });\n        }\n        message.fallback !== undefined && (obj.fallback = message.fallback);\n        message.compression !== undefined &&\n            (obj.compression =\n                message.compression !== undefined\n                    ? compressionToJSON(message.compression)\n                    : undefined);\n        message.content !== undefined &&\n            (obj.content = base64FromBytes(message.content !== undefined ? message.content : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseEncodedContent();\n        message.type =\n            object.type !== undefined && object.type !== null\n                ? ContentTypeId.fromPartial(object.type)\n                : undefined;\n        message.parameters = Object.entries((_a = object.parameters) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        message.fallback = (_b = object.fallback) !== null && _b !== void 0 ? _b : undefined;\n        message.compression = (_c = object.compression) !== null && _c !== void 0 ? _c : undefined;\n        message.content = (_d = object.content) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseEncodedContent_ParametersEntry() {\n    return { key: \"\", value: \"\" };\n}\nconst EncodedContent_ParametersEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedContent_ParametersEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? String(object.value) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseEncodedContent_ParametersEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseSignedContent() {\n    return { payload: new Uint8Array(), sender: undefined, signature: undefined };\n}\nconst SignedContent = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        if (message.sender !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.encode(message.sender, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.encode(message.signature, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedContent();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                case 2:\n                    message.sender = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n            sender: isSet(object.sender)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromJSON(object.sender)\n                : undefined,\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.fromJSON(object.signature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        message.sender !== undefined &&\n            (obj.sender = message.sender\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.toJSON(message.sender)\n                : undefined);\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.toJSON(message.signature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedContent();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.sender =\n            object.sender !== undefined && object.sender !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromPartial(object.sender)\n                : undefined;\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_2__.Signature.fromPartial(object.signature)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=content.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/content.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationReference: () => (/* binding */ ConversationReference),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _invitation_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./invitation.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseConversationReference() {\n    return {\n        topic: \"\",\n        peerAddress: \"\",\n        createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        context: undefined,\n        consentProofPayload: undefined,\n    };\n}\nconst ConversationReference = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.topic !== \"\") {\n            writer.uint32(10).string(message.topic);\n        }\n        if (message.peerAddress !== \"\") {\n            writer.uint32(18).string(message.peerAddress);\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(24).uint64(message.createdNs);\n        }\n        if (message.context !== undefined) {\n            _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.encode(message.context, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.consentProofPayload !== undefined) {\n            _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.encode(message.consentProofPayload, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConversationReference();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.topic = reader.string();\n                    break;\n                case 2:\n                    message.peerAddress = reader.string();\n                    break;\n                case 3:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 4:\n                    message.context = _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.consentProofPayload = _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            topic: isSet(object.topic) ? String(object.topic) : \"\",\n            peerAddress: isSet(object.peerAddress) ? String(object.peerAddress) : \"\",\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            context: isSet(object.context)\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.fromJSON(object.context)\n                : undefined,\n            consentProofPayload: isSet(object.consentProofPayload)\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.fromJSON(object.consentProofPayload)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.topic !== undefined && (obj.topic = message.topic);\n        message.peerAddress !== undefined &&\n            (obj.peerAddress = message.peerAddress);\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.context !== undefined &&\n            (obj.context = message.context\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.toJSON(message.context)\n                : undefined);\n        message.consentProofPayload !== undefined &&\n            (obj.consentProofPayload = message.consentProofPayload\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.toJSON(message.consentProofPayload)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseConversationReference();\n        message.topic = (_a = object.topic) !== null && _a !== void 0 ? _a : \"\";\n        message.peerAddress = (_b = object.peerAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.context =\n            object.context !== undefined && object.context !== null\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.InvitationV1_Context.fromPartial(object.context)\n                : undefined;\n        message.consentProofPayload =\n            object.consentProofPayload !== undefined &&\n                object.consentProofPayload !== null\n                ? _invitation_pb__WEBPACK_IMPORTED_MODULE_1__.ConsentProofPayload.fromPartial(object.consentProofPayload)\n                : undefined;\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=conversation_reference.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ecies.pb.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ecies.pb.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EciesMessage: () => (/* binding */ EciesMessage),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseEciesMessage() {\n    return { v1: undefined };\n}\nconst EciesMessage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            writer.uint32(10).bytes(message.v1);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEciesMessage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? bytesFromBase64(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 =\n                message.v1 !== undefined ? base64FromBytes(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEciesMessage();\n        message.v1 = (_a = object.v1) !== null && _a !== void 0 ? _a : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=ecies.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbWVzc2FnZV9jb250ZW50cy9lY2llcy5wYi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ3dCO0FBQ2E7QUFDOUI7QUFDUDtBQUNBLGFBQWE7QUFDYjtBQUNPO0FBQ1AsNkJBQTZCLGdFQUFVO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esd0NBQXdDLGtFQUFVLGVBQWUsa0VBQVU7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdFQUFRLFVBQVUsNENBQUk7QUFDMUIsSUFBSSxnRUFBUSxRQUFRLDRDQUFJO0FBQ3hCLElBQUksbUVBQWE7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL21lc3NhZ2VfY29udGVudHMvZWNpZXMucGIuanM/ZTU1YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IExvbmcgZnJvbSBcImxvbmdcIjtcbmltcG9ydCBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9IFwieG10cC5tZXNzYWdlX2NvbnRlbnRzXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlRWNpZXNNZXNzYWdlKCkge1xuICAgIHJldHVybiB7IHYxOiB1bmRlZmluZWQgfTtcbn1cbmV4cG9ydCBjb25zdCBFY2llc01lc3NhZ2UgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudjEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS52MSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFY2llc01lc3NhZ2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnYxID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHYxOiBpc1NldChvYmplY3QudjEpID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC52MSkgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS52MSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnYxID1cbiAgICAgICAgICAgICAgICBtZXNzYWdlLnYxICE9PSB1bmRlZmluZWQgPyBiYXNlNjRGcm9tQnl0ZXMobWVzc2FnZS52MSkgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFY2llc01lc3NhZ2UoKTtcbiAgICAgICAgbWVzc2FnZS52MSA9IChfYSA9IG9iamVjdC52MSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiNjQsIFwiYmFzZTY0XCIpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGJpbiA9IGdsb2JhbFRoaXMuYXRvYihiNjQpO1xuICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShiaW4ubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfVxufVxuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGlmIChnbG9iYWxUaGlzLkJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShhcnIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgYmluID0gW107XG4gICAgICAgIGFyci5mb3JFYWNoKChieXRlKSA9PiB7XG4gICAgICAgICAgICBiaW4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzLmJ0b2EoYmluLmpvaW4oXCJcIikpO1xuICAgIH1cbn1cbmlmIChfbTAudXRpbC5Mb25nICE9PSBMb25nKSB7XG4gICAgX20wLnV0aWwuTG9uZyA9IExvbmc7XG4gICAgX20wLmNvbmZpZ3VyZSgpO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVjaWVzLnBiLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ecies.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/frames.pb.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/frames.pb.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FrameAction: () => (/* binding */ FrameAction),\n/* harmony export */   FrameActionBody: () => (/* binding */ FrameActionBody),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseFrameActionBody() {\n    return {\n        frameUrl: \"\",\n        buttonIndex: 0,\n        timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        opaqueConversationIdentifier: \"\",\n        unixTimestamp: 0,\n        inputText: \"\",\n        state: \"\",\n        address: \"\",\n        transactionId: \"\",\n    };\n}\nconst FrameActionBody = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.frameUrl !== \"\") {\n            writer.uint32(10).string(message.frameUrl);\n        }\n        if (message.buttonIndex !== 0) {\n            writer.uint32(16).int32(message.buttonIndex);\n        }\n        if (!message.timestamp.isZero()) {\n            writer.uint32(24).uint64(message.timestamp);\n        }\n        if (message.opaqueConversationIdentifier !== \"\") {\n            writer.uint32(34).string(message.opaqueConversationIdentifier);\n        }\n        if (message.unixTimestamp !== 0) {\n            writer.uint32(40).uint32(message.unixTimestamp);\n        }\n        if (message.inputText !== \"\") {\n            writer.uint32(50).string(message.inputText);\n        }\n        if (message.state !== \"\") {\n            writer.uint32(58).string(message.state);\n        }\n        if (message.address !== \"\") {\n            writer.uint32(66).string(message.address);\n        }\n        if (message.transactionId !== \"\") {\n            writer.uint32(74).string(message.transactionId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFrameActionBody();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.frameUrl = reader.string();\n                    break;\n                case 2:\n                    message.buttonIndex = reader.int32();\n                    break;\n                case 3:\n                    message.timestamp = reader.uint64();\n                    break;\n                case 4:\n                    message.opaqueConversationIdentifier = reader.string();\n                    break;\n                case 5:\n                    message.unixTimestamp = reader.uint32();\n                    break;\n                case 6:\n                    message.inputText = reader.string();\n                    break;\n                case 7:\n                    message.state = reader.string();\n                    break;\n                case 8:\n                    message.address = reader.string();\n                    break;\n                case 9:\n                    message.transactionId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            frameUrl: isSet(object.frameUrl) ? String(object.frameUrl) : \"\",\n            buttonIndex: isSet(object.buttonIndex) ? Number(object.buttonIndex) : 0,\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            opaqueConversationIdentifier: isSet(object.opaqueConversationIdentifier)\n                ? String(object.opaqueConversationIdentifier)\n                : \"\",\n            unixTimestamp: isSet(object.unixTimestamp)\n                ? Number(object.unixTimestamp)\n                : 0,\n            inputText: isSet(object.inputText) ? String(object.inputText) : \"\",\n            state: isSet(object.state) ? String(object.state) : \"\",\n            address: isSet(object.address) ? String(object.address) : \"\",\n            transactionId: isSet(object.transactionId)\n                ? String(object.transactionId)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.frameUrl !== undefined && (obj.frameUrl = message.frameUrl);\n        message.buttonIndex !== undefined &&\n            (obj.buttonIndex = Math.round(message.buttonIndex));\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.opaqueConversationIdentifier !== undefined &&\n            (obj.opaqueConversationIdentifier = message.opaqueConversationIdentifier);\n        message.unixTimestamp !== undefined &&\n            (obj.unixTimestamp = Math.round(message.unixTimestamp));\n        message.inputText !== undefined && (obj.inputText = message.inputText);\n        message.state !== undefined && (obj.state = message.state);\n        message.address !== undefined && (obj.address = message.address);\n        message.transactionId !== undefined &&\n            (obj.transactionId = message.transactionId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseFrameActionBody();\n        message.frameUrl = (_a = object.frameUrl) !== null && _a !== void 0 ? _a : \"\";\n        message.buttonIndex = (_b = object.buttonIndex) !== null && _b !== void 0 ? _b : 0;\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.opaqueConversationIdentifier =\n            (_c = object.opaqueConversationIdentifier) !== null && _c !== void 0 ? _c : \"\";\n        message.unixTimestamp = (_d = object.unixTimestamp) !== null && _d !== void 0 ? _d : 0;\n        message.inputText = (_e = object.inputText) !== null && _e !== void 0 ? _e : \"\";\n        message.state = (_f = object.state) !== null && _f !== void 0 ? _f : \"\";\n        message.address = (_g = object.address) !== null && _g !== void 0 ? _g : \"\";\n        message.transactionId = (_h = object.transactionId) !== null && _h !== void 0 ? _h : \"\";\n        return message;\n    },\n};\nfunction createBaseFrameAction() {\n    return {\n        signature: undefined,\n        signedPublicKeyBundle: undefined,\n        actionBody: new Uint8Array(),\n    };\n}\nconst FrameAction = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.signedPublicKeyBundle !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.encode(message.signedPublicKeyBundle, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.actionBody.length !== 0) {\n            writer.uint32(26).bytes(message.actionBody);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFrameAction();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.signedPublicKeyBundle = _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.actionBody = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n            signedPublicKeyBundle: isSet(object.signedPublicKeyBundle)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.fromJSON(object.signedPublicKeyBundle)\n                : undefined,\n            actionBody: isSet(object.actionBody)\n                ? bytesFromBase64(object.actionBody)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        message.signedPublicKeyBundle !== undefined &&\n            (obj.signedPublicKeyBundle = message.signedPublicKeyBundle\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.toJSON(message.signedPublicKeyBundle)\n                : undefined);\n        message.actionBody !== undefined &&\n            (obj.actionBody = base64FromBytes(message.actionBody !== undefined ? message.actionBody : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseFrameAction();\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        message.signedPublicKeyBundle =\n            object.signedPublicKeyBundle !== undefined &&\n                object.signedPublicKeyBundle !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_2__.SignedPublicKeyBundle.fromPartial(object.signedPublicKeyBundle)\n                : undefined;\n        message.actionBody = (_a = object.actionBody) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=frames.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/frames.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsentProofPayload: () => (/* binding */ ConsentProofPayload),\n/* harmony export */   ConsentProofPayloadVersion: () => (/* binding */ ConsentProofPayloadVersion),\n/* harmony export */   InvitationV1: () => (/* binding */ InvitationV1),\n/* harmony export */   InvitationV1_Aes256gcmHkdfsha256: () => (/* binding */ InvitationV1_Aes256gcmHkdfsha256),\n/* harmony export */   InvitationV1_Context: () => (/* binding */ InvitationV1_Context),\n/* harmony export */   InvitationV1_Context_MetadataEntry: () => (/* binding */ InvitationV1_Context_MetadataEntry),\n/* harmony export */   SealedInvitation: () => (/* binding */ SealedInvitation),\n/* harmony export */   SealedInvitationHeaderV1: () => (/* binding */ SealedInvitationHeaderV1),\n/* harmony export */   SealedInvitationV1: () => (/* binding */ SealedInvitationV1),\n/* harmony export */   consentProofPayloadVersionFromJSON: () => (/* binding */ consentProofPayloadVersionFromJSON),\n/* harmony export */   consentProofPayloadVersionToJSON: () => (/* binding */ consentProofPayloadVersionToJSON),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\n/**\n * Invitation is used by an initiator to invite participants\n * into a new conversation. Invitation carries the chosen topic name\n * and encryption scheme and key material to be used for message encryption.\n */\n/** Version of consent proof payload */\nvar ConsentProofPayloadVersion;\n(function (ConsentProofPayloadVersion) {\n    ConsentProofPayloadVersion[ConsentProofPayloadVersion[\"CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED\"] = 0] = \"CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED\";\n    ConsentProofPayloadVersion[ConsentProofPayloadVersion[\"CONSENT_PROOF_PAYLOAD_VERSION_1\"] = 1] = \"CONSENT_PROOF_PAYLOAD_VERSION_1\";\n    ConsentProofPayloadVersion[ConsentProofPayloadVersion[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ConsentProofPayloadVersion || (ConsentProofPayloadVersion = {}));\nfunction consentProofPayloadVersionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED\":\n            return ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED;\n        case 1:\n        case \"CONSENT_PROOF_PAYLOAD_VERSION_1\":\n            return ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_1;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ConsentProofPayloadVersion.UNRECOGNIZED;\n    }\n}\nfunction consentProofPayloadVersionToJSON(object) {\n    switch (object) {\n        case ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED:\n            return \"CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED\";\n        case ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_1:\n            return \"CONSENT_PROOF_PAYLOAD_VERSION_1\";\n        case ConsentProofPayloadVersion.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseInvitationV1() {\n    return {\n        topic: \"\",\n        context: undefined,\n        aes256GcmHkdfSha256: undefined,\n        consentProof: undefined,\n    };\n}\nconst InvitationV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.topic !== \"\") {\n            writer.uint32(10).string(message.topic);\n        }\n        if (message.context !== undefined) {\n            InvitationV1_Context.encode(message.context, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.aes256GcmHkdfSha256 !== undefined) {\n            InvitationV1_Aes256gcmHkdfsha256.encode(message.aes256GcmHkdfSha256, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.consentProof !== undefined) {\n            ConsentProofPayload.encode(message.consentProof, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInvitationV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.topic = reader.string();\n                    break;\n                case 2:\n                    message.context = InvitationV1_Context.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.aes256GcmHkdfSha256 = InvitationV1_Aes256gcmHkdfsha256.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.consentProof = ConsentProofPayload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            topic: isSet(object.topic) ? String(object.topic) : \"\",\n            context: isSet(object.context)\n                ? InvitationV1_Context.fromJSON(object.context)\n                : undefined,\n            aes256GcmHkdfSha256: isSet(object.aes256GcmHkdfSha256)\n                ? InvitationV1_Aes256gcmHkdfsha256.fromJSON(object.aes256GcmHkdfSha256)\n                : undefined,\n            consentProof: isSet(object.consentProof)\n                ? ConsentProofPayload.fromJSON(object.consentProof)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.topic !== undefined && (obj.topic = message.topic);\n        message.context !== undefined &&\n            (obj.context = message.context\n                ? InvitationV1_Context.toJSON(message.context)\n                : undefined);\n        message.aes256GcmHkdfSha256 !== undefined &&\n            (obj.aes256GcmHkdfSha256 = message.aes256GcmHkdfSha256\n                ? InvitationV1_Aes256gcmHkdfsha256.toJSON(message.aes256GcmHkdfSha256)\n                : undefined);\n        message.consentProof !== undefined &&\n            (obj.consentProof = message.consentProof\n                ? ConsentProofPayload.toJSON(message.consentProof)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseInvitationV1();\n        message.topic = (_a = object.topic) !== null && _a !== void 0 ? _a : \"\";\n        message.context =\n            object.context !== undefined && object.context !== null\n                ? InvitationV1_Context.fromPartial(object.context)\n                : undefined;\n        message.aes256GcmHkdfSha256 =\n            object.aes256GcmHkdfSha256 !== undefined &&\n                object.aes256GcmHkdfSha256 !== null\n                ? InvitationV1_Aes256gcmHkdfsha256.fromPartial(object.aes256GcmHkdfSha256)\n                : undefined;\n        message.consentProof =\n            object.consentProof !== undefined && object.consentProof !== null\n                ? ConsentProofPayload.fromPartial(object.consentProof)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseInvitationV1_Aes256gcmHkdfsha256() {\n    return { keyMaterial: new Uint8Array() };\n}\nconst InvitationV1_Aes256gcmHkdfsha256 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.keyMaterial.length !== 0) {\n            writer.uint32(10).bytes(message.keyMaterial);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInvitationV1_Aes256gcmHkdfsha256();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyMaterial = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyMaterial: isSet(object.keyMaterial)\n                ? bytesFromBase64(object.keyMaterial)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyMaterial !== undefined &&\n            (obj.keyMaterial = base64FromBytes(message.keyMaterial !== undefined\n                ? message.keyMaterial\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseInvitationV1_Aes256gcmHkdfsha256();\n        message.keyMaterial = (_a = object.keyMaterial) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseInvitationV1_Context() {\n    return { conversationId: \"\", metadata: {} };\n}\nconst InvitationV1_Context = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.conversationId !== \"\") {\n            writer.uint32(10).string(message.conversationId);\n        }\n        Object.entries(message.metadata).forEach(([key, value]) => {\n            InvitationV1_Context_MetadataEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInvitationV1_Context();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversationId = reader.string();\n                    break;\n                case 2:\n                    const entry2 = InvitationV1_Context_MetadataEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.metadata[entry2.key] = entry2.value;\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversationId: isSet(object.conversationId)\n                ? String(object.conversationId)\n                : \"\",\n            metadata: isObject(object.metadata)\n                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {\n                    acc[key] = String(value);\n                    return acc;\n                }, {})\n                : {},\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.conversationId !== undefined &&\n            (obj.conversationId = message.conversationId);\n        obj.metadata = {};\n        if (message.metadata) {\n            Object.entries(message.metadata).forEach(([k, v]) => {\n                obj.metadata[k] = v;\n            });\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseInvitationV1_Context();\n        message.conversationId = (_a = object.conversationId) !== null && _a !== void 0 ? _a : \"\";\n        message.metadata = Object.entries((_b = object.metadata) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    },\n};\nfunction createBaseInvitationV1_Context_MetadataEntry() {\n    return { key: \"\", value: \"\" };\n}\nconst InvitationV1_Context_MetadataEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInvitationV1_Context_MetadataEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? String(object.value) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseInvitationV1_Context_MetadataEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseSealedInvitationHeaderV1() {\n    return { sender: undefined, recipient: undefined, createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst SealedInvitationHeaderV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.sender !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.encode(message.sender, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.recipient !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.encode(message.recipient, writer.uint32(18).fork()).ldelim();\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(24).uint64(message.createdNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSealedInvitationHeaderV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.recipient = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.createdNs = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromJSON(object.sender)\n                : undefined,\n            recipient: isSet(object.recipient)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromJSON(object.recipient)\n                : undefined,\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined &&\n            (obj.sender = message.sender\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.toJSON(message.sender)\n                : undefined);\n        message.recipient !== undefined &&\n            (obj.recipient = message.recipient\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.toJSON(message.recipient)\n                : undefined);\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSealedInvitationHeaderV1();\n        message.sender =\n            object.sender !== undefined && object.sender !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromPartial(object.sender)\n                : undefined;\n        message.recipient =\n            object.recipient !== undefined && object.recipient !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKeyBundle.fromPartial(object.recipient)\n                : undefined;\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseSealedInvitationV1() {\n    return { headerBytes: new Uint8Array(), ciphertext: undefined };\n}\nconst SealedInvitationV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(10).bytes(message.headerBytes);\n        }\n        if (message.ciphertext !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.encode(message.ciphertext, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSealedInvitationV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.ciphertext = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromJSON(object.ciphertext)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = message.ciphertext\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.toJSON(message.ciphertext)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSealedInvitationV1();\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.ciphertext =\n            object.ciphertext !== undefined && object.ciphertext !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromPartial(object.ciphertext)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSealedInvitation() {\n    return { v1: undefined };\n}\nconst SealedInvitation = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            SealedInvitationV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSealedInvitation();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = SealedInvitationV1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? SealedInvitationV1.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? SealedInvitationV1.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSealedInvitation();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? SealedInvitationV1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseConsentProofPayload() {\n    return { signature: \"\", timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, payloadVersion: 0 };\n}\nconst ConsentProofPayload = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.signature !== \"\") {\n            writer.uint32(10).string(message.signature);\n        }\n        if (!message.timestamp.isZero()) {\n            writer.uint32(16).uint64(message.timestamp);\n        }\n        if (message.payloadVersion !== 0) {\n            writer.uint32(24).int32(message.payloadVersion);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConsentProofPayload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signature = reader.string();\n                    break;\n                case 2:\n                    message.timestamp = reader.uint64();\n                    break;\n                case 3:\n                    message.payloadVersion = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            signature: isSet(object.signature) ? String(object.signature) : \"\",\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            payloadVersion: isSet(object.payloadVersion)\n                ? consentProofPayloadVersionFromJSON(object.payloadVersion)\n                : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.signature !== undefined && (obj.signature = message.signature);\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.payloadVersion !== undefined &&\n            (obj.payloadVersion = consentProofPayloadVersionToJSON(message.payloadVersion));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseConsentProofPayload();\n        message.signature = (_a = object.signature) !== null && _a !== void 0 ? _a : \"\";\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.payloadVersion = (_b = object.payloadVersion) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=invitation.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/invitation.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/message.pb.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/message.pb.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodedMessage: () => (/* binding */ DecodedMessage),\n/* harmony export */   Message: () => (/* binding */ Message),\n/* harmony export */   MessageHeaderV1: () => (/* binding */ MessageHeaderV1),\n/* harmony export */   MessageHeaderV2: () => (/* binding */ MessageHeaderV2),\n/* harmony export */   MessageV1: () => (/* binding */ MessageV1),\n/* harmony export */   MessageV2: () => (/* binding */ MessageV2),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conversation_reference.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/conversation_reference.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__);\n/* eslint-disable */\n\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseMessageHeaderV1() {\n    return { sender: undefined, recipient: undefined, timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst MessageHeaderV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.sender !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.encode(message.sender, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.recipient !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.encode(message.recipient, writer.uint32(18).fork()).ldelim();\n        }\n        if (!message.timestamp.isZero()) {\n            writer.uint32(24).uint64(message.timestamp);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageHeaderV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.recipient = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.timestamp = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromJSON(object.sender)\n                : undefined,\n            recipient: isSet(object.recipient)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromJSON(object.recipient)\n                : undefined,\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined &&\n            (obj.sender = message.sender\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.toJSON(message.sender)\n                : undefined);\n        message.recipient !== undefined &&\n            (obj.recipient = message.recipient\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.toJSON(message.recipient)\n                : undefined);\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMessageHeaderV1();\n        message.sender =\n            object.sender !== undefined && object.sender !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromPartial(object.sender)\n                : undefined;\n        message.recipient =\n            object.recipient !== undefined && object.recipient !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKeyBundle.fromPartial(object.recipient)\n                : undefined;\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseMessageV1() {\n    return { headerBytes: new Uint8Array(), ciphertext: undefined };\n}\nconst MessageV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(10).bytes(message.headerBytes);\n        }\n        if (message.ciphertext !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.encode(message.ciphertext, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.ciphertext = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromJSON(object.ciphertext)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = message.ciphertext\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.toJSON(message.ciphertext)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMessageV1();\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.ciphertext =\n            object.ciphertext !== undefined && object.ciphertext !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromPartial(object.ciphertext)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMessageHeaderV2() {\n    return { createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, topic: \"\" };\n}\nconst MessageHeaderV2 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (!message.createdNs.isZero()) {\n            writer.uint32(8).uint64(message.createdNs);\n        }\n        if (message.topic !== \"\") {\n            writer.uint32(18).string(message.topic);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageHeaderV2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 2:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            topic: isSet(object.topic) ? String(object.topic) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMessageHeaderV2();\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.topic = (_a = object.topic) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseMessageV2() {\n    return {\n        headerBytes: new Uint8Array(),\n        ciphertext: undefined,\n        senderHmac: undefined,\n        shouldPush: undefined,\n    };\n}\nconst MessageV2 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.headerBytes.length !== 0) {\n            writer.uint32(10).bytes(message.headerBytes);\n        }\n        if (message.ciphertext !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.encode(message.ciphertext, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.senderHmac !== undefined) {\n            writer.uint32(26).bytes(message.senderHmac);\n        }\n        if (message.shouldPush !== undefined) {\n            writer.uint32(32).bool(message.shouldPush);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageV2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.headerBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.ciphertext = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.senderHmac = reader.bytes();\n                    break;\n                case 4:\n                    message.shouldPush = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            headerBytes: isSet(object.headerBytes)\n                ? bytesFromBase64(object.headerBytes)\n                : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromJSON(object.ciphertext)\n                : undefined,\n            senderHmac: isSet(object.senderHmac)\n                ? bytesFromBase64(object.senderHmac)\n                : undefined,\n            shouldPush: isSet(object.shouldPush)\n                ? Boolean(object.shouldPush)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.headerBytes !== undefined &&\n            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined\n                ? message.headerBytes\n                : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = message.ciphertext\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.toJSON(message.ciphertext)\n                : undefined);\n        message.senderHmac !== undefined &&\n            (obj.senderHmac =\n                message.senderHmac !== undefined\n                    ? base64FromBytes(message.senderHmac)\n                    : undefined);\n        message.shouldPush !== undefined && (obj.shouldPush = message.shouldPush);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMessageV2();\n        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.ciphertext =\n            object.ciphertext !== undefined && object.ciphertext !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromPartial(object.ciphertext)\n                : undefined;\n        message.senderHmac = (_b = object.senderHmac) !== null && _b !== void 0 ? _b : undefined;\n        message.shouldPush = (_c = object.shouldPush) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    },\n};\nfunction createBaseMessage() {\n    return { v1: undefined, v2: undefined };\n}\nconst Message = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            MessageV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.v2 !== undefined) {\n            MessageV2.encode(message.v2, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = MessageV1.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.v2 = MessageV2.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? MessageV1.fromJSON(object.v1) : undefined,\n            v2: isSet(object.v2) ? MessageV2.fromJSON(object.v2) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? MessageV1.toJSON(message.v1) : undefined);\n        message.v2 !== undefined &&\n            (obj.v2 = message.v2 ? MessageV2.toJSON(message.v2) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMessage();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? MessageV1.fromPartial(object.v1)\n                : undefined;\n        message.v2 =\n            object.v2 !== undefined && object.v2 !== null\n                ? MessageV2.fromPartial(object.v2)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseDecodedMessage() {\n    return {\n        id: \"\",\n        messageVersion: \"\",\n        senderAddress: \"\",\n        recipientAddress: undefined,\n        sentNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        contentTopic: \"\",\n        conversation: undefined,\n        contentBytes: new Uint8Array(),\n    };\n}\nconst DecodedMessage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.messageVersion !== \"\") {\n            writer.uint32(18).string(message.messageVersion);\n        }\n        if (message.senderAddress !== \"\") {\n            writer.uint32(26).string(message.senderAddress);\n        }\n        if (message.recipientAddress !== undefined) {\n            writer.uint32(34).string(message.recipientAddress);\n        }\n        if (!message.sentNs.isZero()) {\n            writer.uint32(40).uint64(message.sentNs);\n        }\n        if (message.contentTopic !== \"\") {\n            writer.uint32(50).string(message.contentTopic);\n        }\n        if (message.conversation !== undefined) {\n            _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.encode(message.conversation, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.contentBytes.length !== 0) {\n            writer.uint32(66).bytes(message.contentBytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecodedMessage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.messageVersion = reader.string();\n                    break;\n                case 3:\n                    message.senderAddress = reader.string();\n                    break;\n                case 4:\n                    message.recipientAddress = reader.string();\n                    break;\n                case 5:\n                    message.sentNs = reader.uint64();\n                    break;\n                case 6:\n                    message.contentTopic = reader.string();\n                    break;\n                case 7:\n                    message.conversation = _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.contentBytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            id: isSet(object.id) ? String(object.id) : \"\",\n            messageVersion: isSet(object.messageVersion)\n                ? String(object.messageVersion)\n                : \"\",\n            senderAddress: isSet(object.senderAddress)\n                ? String(object.senderAddress)\n                : \"\",\n            recipientAddress: isSet(object.recipientAddress)\n                ? String(object.recipientAddress)\n                : undefined,\n            sentNs: isSet(object.sentNs) ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.sentNs) : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            contentTopic: isSet(object.contentTopic)\n                ? String(object.contentTopic)\n                : \"\",\n            conversation: isSet(object.conversation)\n                ? _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.fromJSON(object.conversation)\n                : undefined,\n            contentBytes: isSet(object.contentBytes)\n                ? bytesFromBase64(object.contentBytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined && (obj.id = message.id);\n        message.messageVersion !== undefined &&\n            (obj.messageVersion = message.messageVersion);\n        message.senderAddress !== undefined &&\n            (obj.senderAddress = message.senderAddress);\n        message.recipientAddress !== undefined &&\n            (obj.recipientAddress = message.recipientAddress);\n        message.sentNs !== undefined &&\n            (obj.sentNs = (message.sentNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.contentTopic !== undefined &&\n            (obj.contentTopic = message.contentTopic);\n        message.conversation !== undefined &&\n            (obj.conversation = message.conversation\n                ? _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.toJSON(message.conversation)\n                : undefined);\n        message.contentBytes !== undefined &&\n            (obj.contentBytes = base64FromBytes(message.contentBytes !== undefined\n                ? message.contentBytes\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseDecodedMessage();\n        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : \"\";\n        message.messageVersion = (_b = object.messageVersion) !== null && _b !== void 0 ? _b : \"\";\n        message.senderAddress = (_c = object.senderAddress) !== null && _c !== void 0 ? _c : \"\";\n        message.recipientAddress = (_d = object.recipientAddress) !== null && _d !== void 0 ? _d : undefined;\n        message.sentNs =\n            object.sentNs !== undefined && object.sentNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.sentNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.contentTopic = (_e = object.contentTopic) !== null && _e !== void 0 ? _e : \"\";\n        message.conversation =\n            object.conversation !== undefined && object.conversation !== null\n                ? _conversation_reference_pb__WEBPACK_IMPORTED_MODULE_3__.ConversationReference.fromPartial(object.conversation)\n                : undefined;\n        message.contentBytes = (_f = object.contentBytes) !== null && _f !== void 0 ? _f : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=message.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/message.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncryptedPrivateKeyBundle: () => (/* binding */ EncryptedPrivateKeyBundle),\n/* harmony export */   EncryptedPrivateKeyBundleV1: () => (/* binding */ EncryptedPrivateKeyBundleV1),\n/* harmony export */   PrivateKey: () => (/* binding */ PrivateKey),\n/* harmony export */   PrivateKeyBundle: () => (/* binding */ PrivateKeyBundle),\n/* harmony export */   PrivateKeyBundleV1: () => (/* binding */ PrivateKeyBundleV1),\n/* harmony export */   PrivateKeyBundleV2: () => (/* binding */ PrivateKeyBundleV2),\n/* harmony export */   PrivateKey_Secp256k1: () => (/* binding */ PrivateKey_Secp256k1),\n/* harmony export */   SignedPrivateKey: () => (/* binding */ SignedPrivateKey),\n/* harmony export */   SignedPrivateKey_Secp256k1: () => (/* binding */ SignedPrivateKey_Secp256k1),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _public_key_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./public_key.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\");\n/* harmony import */ var _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseSignedPrivateKey() {\n    return { createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, secp256k1: undefined, publicKey: undefined };\n}\nconst SignedPrivateKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (!message.createdNs.isZero()) {\n            writer.uint32(8).uint64(message.createdNs);\n        }\n        if (message.secp256k1 !== undefined) {\n            SignedPrivateKey_Secp256k1.encode(message.secp256k1, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.publicKey !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.encode(message.publicKey, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPrivateKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 2:\n                    message.secp256k1 = SignedPrivateKey_Secp256k1.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.publicKey = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            secp256k1: isSet(object.secp256k1)\n                ? SignedPrivateKey_Secp256k1.fromJSON(object.secp256k1)\n                : undefined,\n            publicKey: isSet(object.publicKey)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.fromJSON(object.publicKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.secp256k1 !== undefined &&\n            (obj.secp256k1 = message.secp256k1\n                ? SignedPrivateKey_Secp256k1.toJSON(message.secp256k1)\n                : undefined);\n        message.publicKey !== undefined &&\n            (obj.publicKey = message.publicKey\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.toJSON(message.publicKey)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignedPrivateKey();\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.secp256k1 =\n            object.secp256k1 !== undefined && object.secp256k1 !== null\n                ? SignedPrivateKey_Secp256k1.fromPartial(object.secp256k1)\n                : undefined;\n        message.publicKey =\n            object.publicKey !== undefined && object.publicKey !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.SignedPublicKey.fromPartial(object.publicKey)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignedPrivateKey_Secp256k1() {\n    return { bytes: new Uint8Array() };\n}\nconst SignedPrivateKey_Secp256k1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPrivateKey_Secp256k1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedPrivateKey_Secp256k1();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBasePrivateKeyBundleV2() {\n    return { identityKey: undefined, preKeys: [] };\n}\nconst PrivateKeyBundleV2 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            SignedPrivateKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.preKeys) {\n            SignedPrivateKey.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKeyBundleV2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = SignedPrivateKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.preKeys.push(SignedPrivateKey.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? SignedPrivateKey.fromJSON(object.identityKey)\n                : undefined,\n            preKeys: Array.isArray(object === null || object === void 0 ? void 0 : object.preKeys)\n                ? object.preKeys.map((e) => SignedPrivateKey.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? SignedPrivateKey.toJSON(message.identityKey)\n                : undefined);\n        if (message.preKeys) {\n            obj.preKeys = message.preKeys.map((e) => e ? SignedPrivateKey.toJSON(e) : undefined);\n        }\n        else {\n            obj.preKeys = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivateKeyBundleV2();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? SignedPrivateKey.fromPartial(object.identityKey)\n                : undefined;\n        message.preKeys =\n            ((_a = object.preKeys) === null || _a === void 0 ? void 0 : _a.map((e) => SignedPrivateKey.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBasePrivateKey() {\n    return { timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, secp256k1: undefined, publicKey: undefined };\n}\nconst PrivateKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (!message.timestamp.isZero()) {\n            writer.uint32(8).uint64(message.timestamp);\n        }\n        if (message.secp256k1 !== undefined) {\n            PrivateKey_Secp256k1.encode(message.secp256k1, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.publicKey !== undefined) {\n            _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.encode(message.publicKey, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.timestamp = reader.uint64();\n                    break;\n                case 2:\n                    message.secp256k1 = PrivateKey_Secp256k1.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.publicKey = _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            secp256k1: isSet(object.secp256k1)\n                ? PrivateKey_Secp256k1.fromJSON(object.secp256k1)\n                : undefined,\n            publicKey: isSet(object.publicKey)\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.fromJSON(object.publicKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.secp256k1 !== undefined &&\n            (obj.secp256k1 = message.secp256k1\n                ? PrivateKey_Secp256k1.toJSON(message.secp256k1)\n                : undefined);\n        message.publicKey !== undefined &&\n            (obj.publicKey = message.publicKey\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.toJSON(message.publicKey)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePrivateKey();\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.secp256k1 =\n            object.secp256k1 !== undefined && object.secp256k1 !== null\n                ? PrivateKey_Secp256k1.fromPartial(object.secp256k1)\n                : undefined;\n        message.publicKey =\n            object.publicKey !== undefined && object.publicKey !== null\n                ? _public_key_pb__WEBPACK_IMPORTED_MODULE_1__.PublicKey.fromPartial(object.publicKey)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePrivateKey_Secp256k1() {\n    return { bytes: new Uint8Array() };\n}\nconst PrivateKey_Secp256k1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKey_Secp256k1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivateKey_Secp256k1();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBasePrivateKeyBundleV1() {\n    return { identityKey: undefined, preKeys: [] };\n}\nconst PrivateKeyBundleV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            PrivateKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.preKeys) {\n            PrivateKey.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKeyBundleV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = PrivateKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.preKeys.push(PrivateKey.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? PrivateKey.fromJSON(object.identityKey)\n                : undefined,\n            preKeys: Array.isArray(object === null || object === void 0 ? void 0 : object.preKeys)\n                ? object.preKeys.map((e) => PrivateKey.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? PrivateKey.toJSON(message.identityKey)\n                : undefined);\n        if (message.preKeys) {\n            obj.preKeys = message.preKeys.map((e) => e ? PrivateKey.toJSON(e) : undefined);\n        }\n        else {\n            obj.preKeys = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivateKeyBundleV1();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? PrivateKey.fromPartial(object.identityKey)\n                : undefined;\n        message.preKeys =\n            ((_a = object.preKeys) === null || _a === void 0 ? void 0 : _a.map((e) => PrivateKey.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBasePrivateKeyBundle() {\n    return { v1: undefined, v2: undefined };\n}\nconst PrivateKeyBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            PrivateKeyBundleV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.v2 !== undefined) {\n            PrivateKeyBundleV2.encode(message.v2, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivateKeyBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = PrivateKeyBundleV1.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.v2 = PrivateKeyBundleV2.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? PrivateKeyBundleV1.fromJSON(object.v1) : undefined,\n            v2: isSet(object.v2) ? PrivateKeyBundleV2.fromJSON(object.v2) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? PrivateKeyBundleV1.toJSON(message.v1) : undefined);\n        message.v2 !== undefined &&\n            (obj.v2 = message.v2 ? PrivateKeyBundleV2.toJSON(message.v2) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePrivateKeyBundle();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? PrivateKeyBundleV1.fromPartial(object.v1)\n                : undefined;\n        message.v2 =\n            object.v2 !== undefined && object.v2 !== null\n                ? PrivateKeyBundleV2.fromPartial(object.v2)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseEncryptedPrivateKeyBundleV1() {\n    return { walletPreKey: new Uint8Array(), ciphertext: undefined };\n}\nconst EncryptedPrivateKeyBundleV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.walletPreKey.length !== 0) {\n            writer.uint32(10).bytes(message.walletPreKey);\n        }\n        if (message.ciphertext !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.encode(message.ciphertext, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptedPrivateKeyBundleV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletPreKey = reader.bytes();\n                    break;\n                case 2:\n                    message.ciphertext = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletPreKey: isSet(object.walletPreKey)\n                ? bytesFromBase64(object.walletPreKey)\n                : new Uint8Array(),\n            ciphertext: isSet(object.ciphertext)\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromJSON(object.ciphertext)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.walletPreKey !== undefined &&\n            (obj.walletPreKey = base64FromBytes(message.walletPreKey !== undefined\n                ? message.walletPreKey\n                : new Uint8Array()));\n        message.ciphertext !== undefined &&\n            (obj.ciphertext = message.ciphertext\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.toJSON(message.ciphertext)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseEncryptedPrivateKeyBundleV1();\n        message.walletPreKey = (_a = object.walletPreKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.ciphertext =\n            object.ciphertext !== undefined && object.ciphertext !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_2__.Ciphertext.fromPartial(object.ciphertext)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseEncryptedPrivateKeyBundle() {\n    return { v1: undefined };\n}\nconst EncryptedPrivateKeyBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            EncryptedPrivateKeyBundleV1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptedPrivateKeyBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = EncryptedPrivateKeyBundleV1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? EncryptedPrivateKeyBundleV1.fromJSON(object.v1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? EncryptedPrivateKeyBundleV1.toJSON(message.v1)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseEncryptedPrivateKeyBundle();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? EncryptedPrivateKeyBundleV1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=private_key.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_key.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_preferences.pb.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_preferences.pb.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrivatePreferencesAction: () => (/* binding */ PrivatePreferencesAction),\n/* harmony export */   PrivatePreferencesAction_AllowAddress: () => (/* binding */ PrivatePreferencesAction_AllowAddress),\n/* harmony export */   PrivatePreferencesAction_AllowGroup: () => (/* binding */ PrivatePreferencesAction_AllowGroup),\n/* harmony export */   PrivatePreferencesAction_AllowInboxId: () => (/* binding */ PrivatePreferencesAction_AllowInboxId),\n/* harmony export */   PrivatePreferencesAction_DenyAddress: () => (/* binding */ PrivatePreferencesAction_DenyAddress),\n/* harmony export */   PrivatePreferencesAction_DenyGroup: () => (/* binding */ PrivatePreferencesAction_DenyGroup),\n/* harmony export */   PrivatePreferencesAction_DenyInboxId: () => (/* binding */ PrivatePreferencesAction_DenyInboxId),\n/* harmony export */   PrivatePreferencesPayload: () => (/* binding */ PrivatePreferencesPayload),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ciphertext.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/ciphertext.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBasePrivatePreferencesAction() {\n    return {\n        allowAddress: undefined,\n        denyAddress: undefined,\n        allowGroup: undefined,\n        denyGroup: undefined,\n        allowInboxId: undefined,\n        denyInboxId: undefined,\n    };\n}\nconst PrivatePreferencesAction = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.allowAddress !== undefined) {\n            PrivatePreferencesAction_AllowAddress.encode(message.allowAddress, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.denyAddress !== undefined) {\n            PrivatePreferencesAction_DenyAddress.encode(message.denyAddress, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.allowGroup !== undefined) {\n            PrivatePreferencesAction_AllowGroup.encode(message.allowGroup, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.denyGroup !== undefined) {\n            PrivatePreferencesAction_DenyGroup.encode(message.denyGroup, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.allowInboxId !== undefined) {\n            PrivatePreferencesAction_AllowInboxId.encode(message.allowInboxId, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.denyInboxId !== undefined) {\n            PrivatePreferencesAction_DenyInboxId.encode(message.denyInboxId, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.allowAddress = PrivatePreferencesAction_AllowAddress.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.denyAddress = PrivatePreferencesAction_DenyAddress.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.allowGroup = PrivatePreferencesAction_AllowGroup.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.denyGroup = PrivatePreferencesAction_DenyGroup.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.allowInboxId = PrivatePreferencesAction_AllowInboxId.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denyInboxId = PrivatePreferencesAction_DenyInboxId.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            allowAddress: isSet(object.allowAddress)\n                ? PrivatePreferencesAction_AllowAddress.fromJSON(object.allowAddress)\n                : undefined,\n            denyAddress: isSet(object.denyAddress)\n                ? PrivatePreferencesAction_DenyAddress.fromJSON(object.denyAddress)\n                : undefined,\n            allowGroup: isSet(object.allowGroup)\n                ? PrivatePreferencesAction_AllowGroup.fromJSON(object.allowGroup)\n                : undefined,\n            denyGroup: isSet(object.denyGroup)\n                ? PrivatePreferencesAction_DenyGroup.fromJSON(object.denyGroup)\n                : undefined,\n            allowInboxId: isSet(object.allowInboxId)\n                ? PrivatePreferencesAction_AllowInboxId.fromJSON(object.allowInboxId)\n                : undefined,\n            denyInboxId: isSet(object.denyInboxId)\n                ? PrivatePreferencesAction_DenyInboxId.fromJSON(object.denyInboxId)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.allowAddress !== undefined &&\n            (obj.allowAddress = message.allowAddress\n                ? PrivatePreferencesAction_AllowAddress.toJSON(message.allowAddress)\n                : undefined);\n        message.denyAddress !== undefined &&\n            (obj.denyAddress = message.denyAddress\n                ? PrivatePreferencesAction_DenyAddress.toJSON(message.denyAddress)\n                : undefined);\n        message.allowGroup !== undefined &&\n            (obj.allowGroup = message.allowGroup\n                ? PrivatePreferencesAction_AllowGroup.toJSON(message.allowGroup)\n                : undefined);\n        message.denyGroup !== undefined &&\n            (obj.denyGroup = message.denyGroup\n                ? PrivatePreferencesAction_DenyGroup.toJSON(message.denyGroup)\n                : undefined);\n        message.allowInboxId !== undefined &&\n            (obj.allowInboxId = message.allowInboxId\n                ? PrivatePreferencesAction_AllowInboxId.toJSON(message.allowInboxId)\n                : undefined);\n        message.denyInboxId !== undefined &&\n            (obj.denyInboxId = message.denyInboxId\n                ? PrivatePreferencesAction_DenyInboxId.toJSON(message.denyInboxId)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePrivatePreferencesAction();\n        message.allowAddress =\n            object.allowAddress !== undefined && object.allowAddress !== null\n                ? PrivatePreferencesAction_AllowAddress.fromPartial(object.allowAddress)\n                : undefined;\n        message.denyAddress =\n            object.denyAddress !== undefined && object.denyAddress !== null\n                ? PrivatePreferencesAction_DenyAddress.fromPartial(object.denyAddress)\n                : undefined;\n        message.allowGroup =\n            object.allowGroup !== undefined && object.allowGroup !== null\n                ? PrivatePreferencesAction_AllowGroup.fromPartial(object.allowGroup)\n                : undefined;\n        message.denyGroup =\n            object.denyGroup !== undefined && object.denyGroup !== null\n                ? PrivatePreferencesAction_DenyGroup.fromPartial(object.denyGroup)\n                : undefined;\n        message.allowInboxId =\n            object.allowInboxId !== undefined && object.allowInboxId !== null\n                ? PrivatePreferencesAction_AllowInboxId.fromPartial(object.allowInboxId)\n                : undefined;\n        message.denyInboxId =\n            object.denyInboxId !== undefined && object.denyInboxId !== null\n                ? PrivatePreferencesAction_DenyInboxId.fromPartial(object.denyInboxId)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_AllowAddress() {\n    return { walletAddresses: [] };\n}\nconst PrivatePreferencesAction_AllowAddress = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.walletAddresses) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_AllowAddress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletAddresses.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletAddresses: Array.isArray(object === null || object === void 0 ? void 0 : object.walletAddresses)\n                ? object.walletAddresses.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.walletAddresses) {\n            obj.walletAddresses = message.walletAddresses.map((e) => e);\n        }\n        else {\n            obj.walletAddresses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_AllowAddress();\n        message.walletAddresses = ((_a = object.walletAddresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_DenyAddress() {\n    return { walletAddresses: [] };\n}\nconst PrivatePreferencesAction_DenyAddress = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.walletAddresses) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_DenyAddress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.walletAddresses.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            walletAddresses: Array.isArray(object === null || object === void 0 ? void 0 : object.walletAddresses)\n                ? object.walletAddresses.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.walletAddresses) {\n            obj.walletAddresses = message.walletAddresses.map((e) => e);\n        }\n        else {\n            obj.walletAddresses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_DenyAddress();\n        message.walletAddresses = ((_a = object.walletAddresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_AllowInboxId() {\n    return { inboxIds: [] };\n}\nconst PrivatePreferencesAction_AllowInboxId = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.inboxIds) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_AllowInboxId();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inboxIds.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inboxIds: Array.isArray(object === null || object === void 0 ? void 0 : object.inboxIds)\n                ? object.inboxIds.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.inboxIds) {\n            obj.inboxIds = message.inboxIds.map((e) => e);\n        }\n        else {\n            obj.inboxIds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_AllowInboxId();\n        message.inboxIds = ((_a = object.inboxIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_DenyInboxId() {\n    return { inboxIds: [] };\n}\nconst PrivatePreferencesAction_DenyInboxId = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.inboxIds) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_DenyInboxId();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inboxIds.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inboxIds: Array.isArray(object === null || object === void 0 ? void 0 : object.inboxIds)\n                ? object.inboxIds.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.inboxIds) {\n            obj.inboxIds = message.inboxIds.map((e) => e);\n        }\n        else {\n            obj.inboxIds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_DenyInboxId();\n        message.inboxIds = ((_a = object.inboxIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_AllowGroup() {\n    return { groupIds: [] };\n}\nconst PrivatePreferencesAction_AllowGroup = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.groupIds) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_AllowGroup();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.groupIds.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            groupIds: Array.isArray(object === null || object === void 0 ? void 0 : object.groupIds)\n                ? object.groupIds.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.groupIds) {\n            obj.groupIds = message.groupIds.map((e) => e);\n        }\n        else {\n            obj.groupIds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_AllowGroup();\n        message.groupIds = ((_a = object.groupIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesAction_DenyGroup() {\n    return { groupIds: [] };\n}\nconst PrivatePreferencesAction_DenyGroup = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        for (const v of message.groupIds) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesAction_DenyGroup();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.groupIds.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            groupIds: Array.isArray(object === null || object === void 0 ? void 0 : object.groupIds)\n                ? object.groupIds.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.groupIds) {\n            obj.groupIds = message.groupIds.map((e) => e);\n        }\n        else {\n            obj.groupIds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePrivatePreferencesAction_DenyGroup();\n        message.groupIds = ((_a = object.groupIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBasePrivatePreferencesPayload() {\n    return { v1: undefined };\n}\nconst PrivatePreferencesPayload = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrivatePreferencesPayload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePrivatePreferencesPayload();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? _ciphertext_pb__WEBPACK_IMPORTED_MODULE_1__.Ciphertext.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=private_preferences.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/private_preferences.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicKey: () => (/* binding */ PublicKey),\n/* harmony export */   PublicKeyBundle: () => (/* binding */ PublicKeyBundle),\n/* harmony export */   PublicKey_Secp256k1Uncompressed: () => (/* binding */ PublicKey_Secp256k1Uncompressed),\n/* harmony export */   SignedPublicKey: () => (/* binding */ SignedPublicKey),\n/* harmony export */   SignedPublicKeyBundle: () => (/* binding */ SignedPublicKeyBundle),\n/* harmony export */   UnsignedPublicKey: () => (/* binding */ UnsignedPublicKey),\n/* harmony export */   UnsignedPublicKey_Secp256k1Uncompressed: () => (/* binding */ UnsignedPublicKey_Secp256k1Uncompressed),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseUnsignedPublicKey() {\n    return { createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO, secp256k1Uncompressed: undefined };\n}\nconst UnsignedPublicKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (!message.createdNs.isZero()) {\n            writer.uint32(8).uint64(message.createdNs);\n        }\n        if (message.secp256k1Uncompressed !== undefined) {\n            UnsignedPublicKey_Secp256k1Uncompressed.encode(message.secp256k1Uncompressed, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUnsignedPublicKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 3:\n                    message.secp256k1Uncompressed =\n                        UnsignedPublicKey_Secp256k1Uncompressed.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            secp256k1Uncompressed: isSet(object.secp256k1Uncompressed)\n                ? UnsignedPublicKey_Secp256k1Uncompressed.fromJSON(object.secp256k1Uncompressed)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.secp256k1Uncompressed !== undefined &&\n            (obj.secp256k1Uncompressed = message.secp256k1Uncompressed\n                ? UnsignedPublicKey_Secp256k1Uncompressed.toJSON(message.secp256k1Uncompressed)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseUnsignedPublicKey();\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.secp256k1Uncompressed =\n            object.secp256k1Uncompressed !== undefined &&\n                object.secp256k1Uncompressed !== null\n                ? UnsignedPublicKey_Secp256k1Uncompressed.fromPartial(object.secp256k1Uncompressed)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseUnsignedPublicKey_Secp256k1Uncompressed() {\n    return { bytes: new Uint8Array() };\n}\nconst UnsignedPublicKey_Secp256k1Uncompressed = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUnsignedPublicKey_Secp256k1Uncompressed();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseUnsignedPublicKey_Secp256k1Uncompressed();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSignedPublicKey() {\n    return { keyBytes: new Uint8Array(), signature: undefined };\n}\nconst SignedPublicKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.keyBytes.length !== 0) {\n            writer.uint32(10).bytes(message.keyBytes);\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPublicKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyBytes: isSet(object.keyBytes)\n                ? bytesFromBase64(object.keyBytes)\n                : new Uint8Array(),\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyBytes !== undefined &&\n            (obj.keyBytes = base64FromBytes(message.keyBytes !== undefined ? message.keyBytes : new Uint8Array()));\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedPublicKey();\n        message.keyBytes = (_a = object.keyBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignedPublicKeyBundle() {\n    return { identityKey: undefined, preKey: undefined };\n}\nconst SignedPublicKeyBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            SignedPublicKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.preKey !== undefined) {\n            SignedPublicKey.encode(message.preKey, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPublicKeyBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = SignedPublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.preKey = SignedPublicKey.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? SignedPublicKey.fromJSON(object.identityKey)\n                : undefined,\n            preKey: isSet(object.preKey)\n                ? SignedPublicKey.fromJSON(object.preKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? SignedPublicKey.toJSON(message.identityKey)\n                : undefined);\n        message.preKey !== undefined &&\n            (obj.preKey = message.preKey\n                ? SignedPublicKey.toJSON(message.preKey)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignedPublicKeyBundle();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? SignedPublicKey.fromPartial(object.identityKey)\n                : undefined;\n        message.preKey =\n            object.preKey !== undefined && object.preKey !== null\n                ? SignedPublicKey.fromPartial(object.preKey)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePublicKey() {\n    return {\n        timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        signature: undefined,\n        secp256k1Uncompressed: undefined,\n    };\n}\nconst PublicKey = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (!message.timestamp.isZero()) {\n            writer.uint32(8).uint64(message.timestamp);\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.secp256k1Uncompressed !== undefined) {\n            PublicKey_Secp256k1Uncompressed.encode(message.secp256k1Uncompressed, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePublicKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.timestamp = reader.uint64();\n                    break;\n                case 2:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.secp256k1Uncompressed =\n                        PublicKey_Secp256k1Uncompressed.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            timestamp: isSet(object.timestamp)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n            secp256k1Uncompressed: isSet(object.secp256k1Uncompressed)\n                ? PublicKey_Secp256k1Uncompressed.fromJSON(object.secp256k1Uncompressed)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.timestamp !== undefined &&\n            (obj.timestamp = (message.timestamp || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        message.secp256k1Uncompressed !== undefined &&\n            (obj.secp256k1Uncompressed = message.secp256k1Uncompressed\n                ? PublicKey_Secp256k1Uncompressed.toJSON(message.secp256k1Uncompressed)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePublicKey();\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestamp)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        message.secp256k1Uncompressed =\n            object.secp256k1Uncompressed !== undefined &&\n                object.secp256k1Uncompressed !== null\n                ? PublicKey_Secp256k1Uncompressed.fromPartial(object.secp256k1Uncompressed)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePublicKey_Secp256k1Uncompressed() {\n    return { bytes: new Uint8Array() };\n}\nconst PublicKey_Secp256k1Uncompressed = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePublicKey_Secp256k1Uncompressed();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBasePublicKey_Secp256k1Uncompressed();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBasePublicKeyBundle() {\n    return { identityKey: undefined, preKey: undefined };\n}\nconst PublicKeyBundle = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.identityKey !== undefined) {\n            PublicKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.preKey !== undefined) {\n            PublicKey.encode(message.preKey, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePublicKeyBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identityKey = PublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.preKey = PublicKey.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            identityKey: isSet(object.identityKey)\n                ? PublicKey.fromJSON(object.identityKey)\n                : undefined,\n            preKey: isSet(object.preKey)\n                ? PublicKey.fromJSON(object.preKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identityKey !== undefined &&\n            (obj.identityKey = message.identityKey\n                ? PublicKey.toJSON(message.identityKey)\n                : undefined);\n        message.preKey !== undefined &&\n            (obj.preKey = message.preKey\n                ? PublicKey.toJSON(message.preKey)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePublicKeyBundle();\n        message.identityKey =\n            object.identityKey !== undefined && object.identityKey !== null\n                ? PublicKey.fromPartial(object.identityKey)\n                : undefined;\n        message.preKey =\n            object.preKey !== undefined && object.preKey !== null\n                ? PublicKey.fromPartial(object.preKey)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=public_key.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/public_key.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signature: () => (/* binding */ Signature),\n/* harmony export */   Signature_ECDSACompact: () => (/* binding */ Signature_ECDSACompact),\n/* harmony export */   Signature_WalletECDSACompact: () => (/* binding */ Signature_WalletECDSACompact),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseSignature() {\n    return { ecdsaCompact: undefined, walletEcdsaCompact: undefined };\n}\nconst Signature = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.ecdsaCompact !== undefined) {\n            Signature_ECDSACompact.encode(message.ecdsaCompact, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.walletEcdsaCompact !== undefined) {\n            Signature_WalletECDSACompact.encode(message.walletEcdsaCompact, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ecdsaCompact = Signature_ECDSACompact.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.walletEcdsaCompact = Signature_WalletECDSACompact.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ecdsaCompact: isSet(object.ecdsaCompact)\n                ? Signature_ECDSACompact.fromJSON(object.ecdsaCompact)\n                : undefined,\n            walletEcdsaCompact: isSet(object.walletEcdsaCompact)\n                ? Signature_WalletECDSACompact.fromJSON(object.walletEcdsaCompact)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ecdsaCompact !== undefined &&\n            (obj.ecdsaCompact = message.ecdsaCompact\n                ? Signature_ECDSACompact.toJSON(message.ecdsaCompact)\n                : undefined);\n        message.walletEcdsaCompact !== undefined &&\n            (obj.walletEcdsaCompact = message.walletEcdsaCompact\n                ? Signature_WalletECDSACompact.toJSON(message.walletEcdsaCompact)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignature();\n        message.ecdsaCompact =\n            object.ecdsaCompact !== undefined && object.ecdsaCompact !== null\n                ? Signature_ECDSACompact.fromPartial(object.ecdsaCompact)\n                : undefined;\n        message.walletEcdsaCompact =\n            object.walletEcdsaCompact !== undefined &&\n                object.walletEcdsaCompact !== null\n                ? Signature_WalletECDSACompact.fromPartial(object.walletEcdsaCompact)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignature_ECDSACompact() {\n    return { bytes: new Uint8Array(), recovery: 0 };\n}\nconst Signature_ECDSACompact = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        if (message.recovery !== 0) {\n            writer.uint32(16).uint32(message.recovery);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignature_ECDSACompact();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                case 2:\n                    message.recovery = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n            recovery: isSet(object.recovery) ? Number(object.recovery) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        message.recovery !== undefined &&\n            (obj.recovery = Math.round(message.recovery));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSignature_ECDSACompact();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.recovery = (_b = object.recovery) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction createBaseSignature_WalletECDSACompact() {\n    return { bytes: new Uint8Array(), recovery: 0 };\n}\nconst Signature_WalletECDSACompact = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.bytes.length !== 0) {\n            writer.uint32(10).bytes(message.bytes);\n        }\n        if (message.recovery !== 0) {\n            writer.uint32(16).uint32(message.recovery);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignature_WalletECDSACompact();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bytes = reader.bytes();\n                    break;\n                case 2:\n                    message.recovery = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n            recovery: isSet(object.recovery) ? Number(object.recovery) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        message.recovery !== undefined &&\n            (obj.recovery = Math.round(message.recovery));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSignature_WalletECDSACompact();\n        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.recovery = (_b = object.recovery) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=signature.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signed_payload.pb.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signed_payload.pb.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignedPayload: () => (/* binding */ SignedPayload),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable */\n\n\n\nconst protobufPackage = \"xmtp.message_contents\";\nfunction createBaseSignedPayload() {\n    return { payload: new Uint8Array(), signature: undefined };\n}\nconst SignedPayload = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Writer.create()) {\n        if (message.payload.length !== 0) {\n            writer.uint32(10).bytes(message.payload);\n        }\n        if (message.signature !== undefined) {\n            _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedPayload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payload = reader.bytes();\n                    break;\n                case 2:\n                    message.signature = _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payload: isSet(object.payload)\n                ? bytesFromBase64(object.payload)\n                : new Uint8Array(),\n            signature: isSet(object.signature)\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.signature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payload !== undefined &&\n            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        message.signature !== undefined &&\n            (obj.signature = message.signature\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.signature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignedPayload();\n        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? _signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.signature)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=signed_payload.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbWVzc2FnZV9jb250ZW50cy9zaWduZWRfcGF5bG9hZC5wYi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUN3QjtBQUNtQjtBQUNOO0FBQzlCO0FBQ1A7QUFDQSxhQUFhO0FBQ2I7QUFDTztBQUNQLDZCQUE2QixnRUFBVTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0RBQVM7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHdDQUF3QyxrRUFBVSxlQUFlLGtFQUFVO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxvREFBUztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQVM7QUFDM0I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQVM7QUFDM0I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQVM7QUFDM0I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdFQUFRLFVBQVUsNENBQUk7QUFDMUIsSUFBSSxnRUFBUSxRQUFRLDRDQUFJO0FBQ3hCLElBQUksbUVBQWE7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3Byb3RvL3RzL2Rpc3QvZXNtL21lc3NhZ2VfY29udGVudHMvc2lnbmVkX3BheWxvYWQucGIuanM/MWQ5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IExvbmcgZnJvbSBcImxvbmdcIjtcbmltcG9ydCB7IFNpZ25hdHVyZSB9IGZyb20gXCIuL3NpZ25hdHVyZS5wYlwiO1xuaW1wb3J0IF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gXCJ4bXRwLm1lc3NhZ2VfY29udGVudHNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VTaWduZWRQYXlsb2FkKCkge1xuICAgIHJldHVybiB7IHBheWxvYWQ6IG5ldyBVaW50OEFycmF5KCksIHNpZ25hdHVyZTogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgU2lnbmVkUGF5bG9hZCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wYXlsb2FkLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5wYXlsb2FkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zaWduYXR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgU2lnbmF0dXJlLmVuY29kZShtZXNzYWdlLnNpZ25hdHVyZSwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNpZ25lZFBheWxvYWQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBheWxvYWQgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZSA9IFNpZ25hdHVyZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXlsb2FkOiBpc1NldChvYmplY3QucGF5bG9hZClcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QucGF5bG9hZClcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgICBzaWduYXR1cmU6IGlzU2V0KG9iamVjdC5zaWduYXR1cmUpXG4gICAgICAgICAgICAgICAgPyBTaWduYXR1cmUuZnJvbUpTT04ob2JqZWN0LnNpZ25hdHVyZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnBheWxvYWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wYXlsb2FkID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UucGF5bG9hZCAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5wYXlsb2FkIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICBtZXNzYWdlLnNpZ25hdHVyZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnNpZ25hdHVyZSA9IG1lc3NhZ2Uuc2lnbmF0dXJlXG4gICAgICAgICAgICAgICAgPyBTaWduYXR1cmUudG9KU09OKG1lc3NhZ2Uuc2lnbmF0dXJlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlU2lnbmVkUGF5bG9hZCgpO1xuICAgICAgICBtZXNzYWdlLnBheWxvYWQgPSAoX2EgPSBvYmplY3QucGF5bG9hZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5zaWduYXR1cmUgPVxuICAgICAgICAgICAgb2JqZWN0LnNpZ25hdHVyZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5zaWduYXR1cmUgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFNpZ25hdHVyZS5mcm9tUGFydGlhbChvYmplY3Quc2lnbmF0dXJlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiNjQsIFwiYmFzZTY0XCIpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGJpbiA9IGdsb2JhbFRoaXMuYXRvYihiNjQpO1xuICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShiaW4ubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfVxufVxuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGlmIChnbG9iYWxUaGlzLkJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShhcnIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgYmluID0gW107XG4gICAgICAgIGFyci5mb3JFYWNoKChieXRlKSA9PiB7XG4gICAgICAgICAgICBiaW4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzLmJ0b2EoYmluLmpvaW4oXCJcIikpO1xuICAgIH1cbn1cbmlmIChfbTAudXRpbC5Mb25nICE9PSBMb25nKSB7XG4gICAgX20wLnV0aWwuTG9uZyA9IExvbmc7XG4gICAgX20wLmNvbmZpZ3VyZSgpO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25lZF9wYXlsb2FkLnBiLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signed_payload.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/api/v1/mls.pb.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/mls/api/v1/mls.pb.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchKeyPackagesRequest: () => (/* binding */ FetchKeyPackagesRequest),\n/* harmony export */   FetchKeyPackagesResponse: () => (/* binding */ FetchKeyPackagesResponse),\n/* harmony export */   FetchKeyPackagesResponse_KeyPackage: () => (/* binding */ FetchKeyPackagesResponse_KeyPackage),\n/* harmony export */   GetIdentityUpdatesRequest: () => (/* binding */ GetIdentityUpdatesRequest),\n/* harmony export */   GetIdentityUpdatesResponse: () => (/* binding */ GetIdentityUpdatesResponse),\n/* harmony export */   GetIdentityUpdatesResponse_NewInstallationUpdate: () => (/* binding */ GetIdentityUpdatesResponse_NewInstallationUpdate),\n/* harmony export */   GetIdentityUpdatesResponse_RevokedInstallationUpdate: () => (/* binding */ GetIdentityUpdatesResponse_RevokedInstallationUpdate),\n/* harmony export */   GetIdentityUpdatesResponse_Update: () => (/* binding */ GetIdentityUpdatesResponse_Update),\n/* harmony export */   GetIdentityUpdatesResponse_WalletUpdates: () => (/* binding */ GetIdentityUpdatesResponse_WalletUpdates),\n/* harmony export */   GroupMessage: () => (/* binding */ GroupMessage),\n/* harmony export */   GroupMessageInput: () => (/* binding */ GroupMessageInput),\n/* harmony export */   GroupMessageInput_V1: () => (/* binding */ GroupMessageInput_V1),\n/* harmony export */   GroupMessage_V1: () => (/* binding */ GroupMessage_V1),\n/* harmony export */   KeyPackageUpload: () => (/* binding */ KeyPackageUpload),\n/* harmony export */   MlsApiClientImpl: () => (/* binding */ MlsApiClientImpl),\n/* harmony export */   PagingInfo: () => (/* binding */ PagingInfo),\n/* harmony export */   QueryGroupMessagesRequest: () => (/* binding */ QueryGroupMessagesRequest),\n/* harmony export */   QueryGroupMessagesResponse: () => (/* binding */ QueryGroupMessagesResponse),\n/* harmony export */   QueryWelcomeMessagesRequest: () => (/* binding */ QueryWelcomeMessagesRequest),\n/* harmony export */   QueryWelcomeMessagesResponse: () => (/* binding */ QueryWelcomeMessagesResponse),\n/* harmony export */   RegisterInstallationRequest: () => (/* binding */ RegisterInstallationRequest),\n/* harmony export */   RegisterInstallationResponse: () => (/* binding */ RegisterInstallationResponse),\n/* harmony export */   RevokeInstallationRequest: () => (/* binding */ RevokeInstallationRequest),\n/* harmony export */   SendGroupMessagesRequest: () => (/* binding */ SendGroupMessagesRequest),\n/* harmony export */   SendWelcomeMessagesRequest: () => (/* binding */ SendWelcomeMessagesRequest),\n/* harmony export */   SortDirection: () => (/* binding */ SortDirection),\n/* harmony export */   SubscribeGroupMessagesRequest: () => (/* binding */ SubscribeGroupMessagesRequest),\n/* harmony export */   SubscribeGroupMessagesRequest_Filter: () => (/* binding */ SubscribeGroupMessagesRequest_Filter),\n/* harmony export */   SubscribeWelcomeMessagesRequest: () => (/* binding */ SubscribeWelcomeMessagesRequest),\n/* harmony export */   SubscribeWelcomeMessagesRequest_Filter: () => (/* binding */ SubscribeWelcomeMessagesRequest_Filter),\n/* harmony export */   UploadKeyPackageRequest: () => (/* binding */ UploadKeyPackageRequest),\n/* harmony export */   WelcomeMessage: () => (/* binding */ WelcomeMessage),\n/* harmony export */   WelcomeMessageInput: () => (/* binding */ WelcomeMessageInput),\n/* harmony export */   WelcomeMessageInput_V1: () => (/* binding */ WelcomeMessageInput_V1),\n/* harmony export */   WelcomeMessage_V1: () => (/* binding */ WelcomeMessage_V1),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage),\n/* harmony export */   sortDirectionFromJSON: () => (/* binding */ sortDirectionFromJSON),\n/* harmony export */   sortDirectionToJSON: () => (/* binding */ sortDirectionToJSON)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../message_contents/signature.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/message_contents/signature.pb.js\");\n/* harmony import */ var _google_protobuf_empty_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../google/protobuf/empty.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/google/protobuf/empty.pb.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ \"(ssr)/./node_modules/rxjs/dist/cjs/operators/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n/* eslint-disable */\n\n\n\n\n\nconst protobufPackage = \"xmtp.mls.api.v1\";\n/** Message API */\n/** Sort direction for queries */\nvar SortDirection;\n(function (SortDirection) {\n    SortDirection[SortDirection[\"SORT_DIRECTION_UNSPECIFIED\"] = 0] = \"SORT_DIRECTION_UNSPECIFIED\";\n    SortDirection[SortDirection[\"SORT_DIRECTION_ASCENDING\"] = 1] = \"SORT_DIRECTION_ASCENDING\";\n    SortDirection[SortDirection[\"SORT_DIRECTION_DESCENDING\"] = 2] = \"SORT_DIRECTION_DESCENDING\";\n    SortDirection[SortDirection[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SortDirection || (SortDirection = {}));\nfunction sortDirectionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"SORT_DIRECTION_UNSPECIFIED\":\n            return SortDirection.SORT_DIRECTION_UNSPECIFIED;\n        case 1:\n        case \"SORT_DIRECTION_ASCENDING\":\n            return SortDirection.SORT_DIRECTION_ASCENDING;\n        case 2:\n        case \"SORT_DIRECTION_DESCENDING\":\n            return SortDirection.SORT_DIRECTION_DESCENDING;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SortDirection.UNRECOGNIZED;\n    }\n}\nfunction sortDirectionToJSON(object) {\n    switch (object) {\n        case SortDirection.SORT_DIRECTION_UNSPECIFIED:\n            return \"SORT_DIRECTION_UNSPECIFIED\";\n        case SortDirection.SORT_DIRECTION_ASCENDING:\n            return \"SORT_DIRECTION_ASCENDING\";\n        case SortDirection.SORT_DIRECTION_DESCENDING:\n            return \"SORT_DIRECTION_DESCENDING\";\n        case SortDirection.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseWelcomeMessage() {\n    return { v1: undefined };\n}\nconst WelcomeMessage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            WelcomeMessage_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWelcomeMessage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = WelcomeMessage_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? WelcomeMessage_V1.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? WelcomeMessage_V1.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseWelcomeMessage();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? WelcomeMessage_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseWelcomeMessage_V1() {\n    return {\n        id: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        installationKey: new Uint8Array(),\n        data: new Uint8Array(),\n        hpkePublicKey: new Uint8Array(),\n    };\n}\nconst WelcomeMessage_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (!message.id.isZero()) {\n            writer.uint32(8).uint64(message.id);\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(16).uint64(message.createdNs);\n        }\n        if (message.installationKey.length !== 0) {\n            writer.uint32(26).bytes(message.installationKey);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(34).bytes(message.data);\n        }\n        if (message.hpkePublicKey.length !== 0) {\n            writer.uint32(42).bytes(message.hpkePublicKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWelcomeMessage_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.uint64();\n                    break;\n                case 2:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 3:\n                    message.installationKey = reader.bytes();\n                    break;\n                case 4:\n                    message.data = reader.bytes();\n                    break;\n                case 5:\n                    message.hpkePublicKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            id: isSet(object.id) ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.id) : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            installationKey: isSet(object.installationKey)\n                ? bytesFromBase64(object.installationKey)\n                : new Uint8Array(),\n            data: isSet(object.data)\n                ? bytesFromBase64(object.data)\n                : new Uint8Array(),\n            hpkePublicKey: isSet(object.hpkePublicKey)\n                ? bytesFromBase64(object.hpkePublicKey)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined &&\n            (obj.id = (message.id || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.installationKey !== undefined &&\n            (obj.installationKey = base64FromBytes(message.installationKey !== undefined\n                ? message.installationKey\n                : new Uint8Array()));\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.hpkePublicKey !== undefined &&\n            (obj.hpkePublicKey = base64FromBytes(message.hpkePublicKey !== undefined\n                ? message.hpkePublicKey\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseWelcomeMessage_V1();\n        message.id =\n            object.id !== undefined && object.id !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.id)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.installationKey = (_a = object.installationKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.hpkePublicKey = (_c = object.hpkePublicKey) !== null && _c !== void 0 ? _c : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseWelcomeMessageInput() {\n    return { v1: undefined };\n}\nconst WelcomeMessageInput = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            WelcomeMessageInput_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWelcomeMessageInput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = WelcomeMessageInput_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? WelcomeMessageInput_V1.fromJSON(object.v1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? WelcomeMessageInput_V1.toJSON(message.v1)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseWelcomeMessageInput();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? WelcomeMessageInput_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseWelcomeMessageInput_V1() {\n    return {\n        installationKey: new Uint8Array(),\n        data: new Uint8Array(),\n        hpkePublicKey: new Uint8Array(),\n    };\n}\nconst WelcomeMessageInput_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.installationKey.length !== 0) {\n            writer.uint32(10).bytes(message.installationKey);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.hpkePublicKey.length !== 0) {\n            writer.uint32(26).bytes(message.hpkePublicKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWelcomeMessageInput_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationKey = reader.bytes();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.hpkePublicKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationKey: isSet(object.installationKey)\n                ? bytesFromBase64(object.installationKey)\n                : new Uint8Array(),\n            data: isSet(object.data)\n                ? bytesFromBase64(object.data)\n                : new Uint8Array(),\n            hpkePublicKey: isSet(object.hpkePublicKey)\n                ? bytesFromBase64(object.hpkePublicKey)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.installationKey !== undefined &&\n            (obj.installationKey = base64FromBytes(message.installationKey !== undefined\n                ? message.installationKey\n                : new Uint8Array()));\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.hpkePublicKey !== undefined &&\n            (obj.hpkePublicKey = base64FromBytes(message.hpkePublicKey !== undefined\n                ? message.hpkePublicKey\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseWelcomeMessageInput_V1();\n        message.installationKey = (_a = object.installationKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.hpkePublicKey = (_c = object.hpkePublicKey) !== null && _c !== void 0 ? _c : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseGroupMessage() {\n    return { v1: undefined };\n}\nconst GroupMessage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            GroupMessage_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMessage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = GroupMessage_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? GroupMessage_V1.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? GroupMessage_V1.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseGroupMessage();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? GroupMessage_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseGroupMessage_V1() {\n    return {\n        id: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        createdNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        groupId: new Uint8Array(),\n        data: new Uint8Array(),\n        senderHmac: new Uint8Array(),\n    };\n}\nconst GroupMessage_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (!message.id.isZero()) {\n            writer.uint32(8).uint64(message.id);\n        }\n        if (!message.createdNs.isZero()) {\n            writer.uint32(16).uint64(message.createdNs);\n        }\n        if (message.groupId.length !== 0) {\n            writer.uint32(26).bytes(message.groupId);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(34).bytes(message.data);\n        }\n        if (message.senderHmac.length !== 0) {\n            writer.uint32(42).bytes(message.senderHmac);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMessage_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.uint64();\n                    break;\n                case 2:\n                    message.createdNs = reader.uint64();\n                    break;\n                case 3:\n                    message.groupId = reader.bytes();\n                    break;\n                case 4:\n                    message.data = reader.bytes();\n                    break;\n                case 5:\n                    message.senderHmac = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            id: isSet(object.id) ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.id) : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            createdNs: isSet(object.createdNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            groupId: isSet(object.groupId)\n                ? bytesFromBase64(object.groupId)\n                : new Uint8Array(),\n            data: isSet(object.data)\n                ? bytesFromBase64(object.data)\n                : new Uint8Array(),\n            senderHmac: isSet(object.senderHmac)\n                ? bytesFromBase64(object.senderHmac)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.id !== undefined &&\n            (obj.id = (message.id || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.createdNs !== undefined &&\n            (obj.createdNs = (message.createdNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.groupId !== undefined &&\n            (obj.groupId = base64FromBytes(message.groupId !== undefined ? message.groupId : new Uint8Array()));\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.senderHmac !== undefined &&\n            (obj.senderHmac = base64FromBytes(message.senderHmac !== undefined ? message.senderHmac : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseGroupMessage_V1();\n        message.id =\n            object.id !== undefined && object.id !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.id)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.createdNs =\n            object.createdNs !== undefined && object.createdNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.createdNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.groupId = (_a = object.groupId) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.senderHmac = (_c = object.senderHmac) !== null && _c !== void 0 ? _c : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseGroupMessageInput() {\n    return { v1: undefined };\n}\nconst GroupMessageInput = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            GroupMessageInput_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMessageInput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = GroupMessageInput_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? GroupMessageInput_V1.fromJSON(object.v1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? GroupMessageInput_V1.toJSON(message.v1)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseGroupMessageInput();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? GroupMessageInput_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseGroupMessageInput_V1() {\n    return { data: new Uint8Array(), senderHmac: new Uint8Array() };\n}\nconst GroupMessageInput_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        if (message.senderHmac.length !== 0) {\n            writer.uint32(18).bytes(message.senderHmac);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMessageInput_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                case 2:\n                    message.senderHmac = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            data: isSet(object.data)\n                ? bytesFromBase64(object.data)\n                : new Uint8Array(),\n            senderHmac: isSet(object.senderHmac)\n                ? bytesFromBase64(object.senderHmac)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.senderHmac !== undefined &&\n            (obj.senderHmac = base64FromBytes(message.senderHmac !== undefined ? message.senderHmac : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGroupMessageInput_V1();\n        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.senderHmac = (_b = object.senderHmac) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSendGroupMessagesRequest() {\n    return { messages: [] };\n}\nconst SendGroupMessagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.messages) {\n            GroupMessageInput.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendGroupMessagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.messages.push(GroupMessageInput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            messages: Array.isArray(object === null || object === void 0 ? void 0 : object.messages)\n                ? object.messages.map((e) => GroupMessageInput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.messages) {\n            obj.messages = message.messages.map((e) => e ? GroupMessageInput.toJSON(e) : undefined);\n        }\n        else {\n            obj.messages = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSendGroupMessagesRequest();\n        message.messages =\n            ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => GroupMessageInput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSendWelcomeMessagesRequest() {\n    return { messages: [] };\n}\nconst SendWelcomeMessagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.messages) {\n            WelcomeMessageInput.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendWelcomeMessagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.messages.push(WelcomeMessageInput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            messages: Array.isArray(object === null || object === void 0 ? void 0 : object.messages)\n                ? object.messages.map((e) => WelcomeMessageInput.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.messages) {\n            obj.messages = message.messages.map((e) => e ? WelcomeMessageInput.toJSON(e) : undefined);\n        }\n        else {\n            obj.messages = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSendWelcomeMessagesRequest();\n        message.messages =\n            ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => WelcomeMessageInput.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseKeyPackageUpload() {\n    return { keyPackageTlsSerialized: new Uint8Array() };\n}\nconst KeyPackageUpload = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.keyPackageTlsSerialized.length !== 0) {\n            writer.uint32(10).bytes(message.keyPackageTlsSerialized);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseKeyPackageUpload();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyPackageTlsSerialized = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyPackageTlsSerialized: isSet(object.keyPackageTlsSerialized)\n                ? bytesFromBase64(object.keyPackageTlsSerialized)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyPackageTlsSerialized !== undefined &&\n            (obj.keyPackageTlsSerialized = base64FromBytes(message.keyPackageTlsSerialized !== undefined\n                ? message.keyPackageTlsSerialized\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseKeyPackageUpload();\n        message.keyPackageTlsSerialized =\n            (_a = object.keyPackageTlsSerialized) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseRegisterInstallationRequest() {\n    return { keyPackage: undefined, isInboxIdCredential: false };\n}\nconst RegisterInstallationRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.keyPackage !== undefined) {\n            KeyPackageUpload.encode(message.keyPackage, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.isInboxIdCredential === true) {\n            writer.uint32(16).bool(message.isInboxIdCredential);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRegisterInstallationRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyPackage = KeyPackageUpload.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.isInboxIdCredential = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyPackage: isSet(object.keyPackage)\n                ? KeyPackageUpload.fromJSON(object.keyPackage)\n                : undefined,\n            isInboxIdCredential: isSet(object.isInboxIdCredential)\n                ? Boolean(object.isInboxIdCredential)\n                : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyPackage !== undefined &&\n            (obj.keyPackage = message.keyPackage\n                ? KeyPackageUpload.toJSON(message.keyPackage)\n                : undefined);\n        message.isInboxIdCredential !== undefined &&\n            (obj.isInboxIdCredential = message.isInboxIdCredential);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseRegisterInstallationRequest();\n        message.keyPackage =\n            object.keyPackage !== undefined && object.keyPackage !== null\n                ? KeyPackageUpload.fromPartial(object.keyPackage)\n                : undefined;\n        message.isInboxIdCredential = (_a = object.isInboxIdCredential) !== null && _a !== void 0 ? _a : false;\n        return message;\n    },\n};\nfunction createBaseRegisterInstallationResponse() {\n    return { installationKey: new Uint8Array() };\n}\nconst RegisterInstallationResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.installationKey.length !== 0) {\n            writer.uint32(10).bytes(message.installationKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRegisterInstallationResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationKey: isSet(object.installationKey)\n                ? bytesFromBase64(object.installationKey)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.installationKey !== undefined &&\n            (obj.installationKey = base64FromBytes(message.installationKey !== undefined\n                ? message.installationKey\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseRegisterInstallationResponse();\n        message.installationKey = (_a = object.installationKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseUploadKeyPackageRequest() {\n    return { keyPackage: undefined, isInboxIdCredential: false };\n}\nconst UploadKeyPackageRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.keyPackage !== undefined) {\n            KeyPackageUpload.encode(message.keyPackage, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.isInboxIdCredential === true) {\n            writer.uint32(16).bool(message.isInboxIdCredential);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUploadKeyPackageRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyPackage = KeyPackageUpload.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.isInboxIdCredential = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyPackage: isSet(object.keyPackage)\n                ? KeyPackageUpload.fromJSON(object.keyPackage)\n                : undefined,\n            isInboxIdCredential: isSet(object.isInboxIdCredential)\n                ? Boolean(object.isInboxIdCredential)\n                : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyPackage !== undefined &&\n            (obj.keyPackage = message.keyPackage\n                ? KeyPackageUpload.toJSON(message.keyPackage)\n                : undefined);\n        message.isInboxIdCredential !== undefined &&\n            (obj.isInboxIdCredential = message.isInboxIdCredential);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseUploadKeyPackageRequest();\n        message.keyPackage =\n            object.keyPackage !== undefined && object.keyPackage !== null\n                ? KeyPackageUpload.fromPartial(object.keyPackage)\n                : undefined;\n        message.isInboxIdCredential = (_a = object.isInboxIdCredential) !== null && _a !== void 0 ? _a : false;\n        return message;\n    },\n};\nfunction createBaseFetchKeyPackagesRequest() {\n    return { installationKeys: [] };\n}\nconst FetchKeyPackagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.installationKeys) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFetchKeyPackagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationKeys.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationKeys: Array.isArray(object === null || object === void 0 ? void 0 : object.installationKeys)\n                ? object.installationKeys.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.installationKeys) {\n            obj.installationKeys = message.installationKeys.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.installationKeys = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseFetchKeyPackagesRequest();\n        message.installationKeys = ((_a = object.installationKeys) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseFetchKeyPackagesResponse() {\n    return { keyPackages: [] };\n}\nconst FetchKeyPackagesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.keyPackages) {\n            FetchKeyPackagesResponse_KeyPackage.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFetchKeyPackagesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyPackages.push(FetchKeyPackagesResponse_KeyPackage.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyPackages: Array.isArray(object === null || object === void 0 ? void 0 : object.keyPackages)\n                ? object.keyPackages.map((e) => FetchKeyPackagesResponse_KeyPackage.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.keyPackages) {\n            obj.keyPackages = message.keyPackages.map((e) => e ? FetchKeyPackagesResponse_KeyPackage.toJSON(e) : undefined);\n        }\n        else {\n            obj.keyPackages = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseFetchKeyPackagesResponse();\n        message.keyPackages =\n            ((_a = object.keyPackages) === null || _a === void 0 ? void 0 : _a.map((e) => FetchKeyPackagesResponse_KeyPackage.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseFetchKeyPackagesResponse_KeyPackage() {\n    return { keyPackageTlsSerialized: new Uint8Array() };\n}\nconst FetchKeyPackagesResponse_KeyPackage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.keyPackageTlsSerialized.length !== 0) {\n            writer.uint32(10).bytes(message.keyPackageTlsSerialized);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFetchKeyPackagesResponse_KeyPackage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyPackageTlsSerialized = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyPackageTlsSerialized: isSet(object.keyPackageTlsSerialized)\n                ? bytesFromBase64(object.keyPackageTlsSerialized)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyPackageTlsSerialized !== undefined &&\n            (obj.keyPackageTlsSerialized = base64FromBytes(message.keyPackageTlsSerialized !== undefined\n                ? message.keyPackageTlsSerialized\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseFetchKeyPackagesResponse_KeyPackage();\n        message.keyPackageTlsSerialized =\n            (_a = object.keyPackageTlsSerialized) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseRevokeInstallationRequest() {\n    return { installationKey: new Uint8Array(), walletSignature: undefined };\n}\nconst RevokeInstallationRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.installationKey.length !== 0) {\n            writer.uint32(10).bytes(message.installationKey);\n        }\n        if (message.walletSignature !== undefined) {\n            _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.encode(message.walletSignature, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRevokeInstallationRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationKey = reader.bytes();\n                    break;\n                case 2:\n                    message.walletSignature = _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationKey: isSet(object.installationKey)\n                ? bytesFromBase64(object.installationKey)\n                : new Uint8Array(),\n            walletSignature: isSet(object.walletSignature)\n                ? _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromJSON(object.walletSignature)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.installationKey !== undefined &&\n            (obj.installationKey = base64FromBytes(message.installationKey !== undefined\n                ? message.installationKey\n                : new Uint8Array()));\n        message.walletSignature !== undefined &&\n            (obj.walletSignature = message.walletSignature\n                ? _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.toJSON(message.walletSignature)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseRevokeInstallationRequest();\n        message.installationKey = (_a = object.installationKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.walletSignature =\n            object.walletSignature !== undefined && object.walletSignature !== null\n                ? _message_contents_signature_pb__WEBPACK_IMPORTED_MODULE_1__.Signature.fromPartial(object.walletSignature)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesRequest() {\n    return { accountAddresses: [], startTimeNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst GetIdentityUpdatesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.accountAddresses) {\n            writer.uint32(10).string(v);\n        }\n        if (!message.startTimeNs.isZero()) {\n            writer.uint32(16).uint64(message.startTimeNs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accountAddresses.push(reader.string());\n                    break;\n                case 2:\n                    message.startTimeNs = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accountAddresses: Array.isArray(object === null || object === void 0 ? void 0 : object.accountAddresses)\n                ? object.accountAddresses.map((e) => String(e))\n                : [],\n            startTimeNs: isSet(object.startTimeNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.startTimeNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.accountAddresses) {\n            obj.accountAddresses = message.accountAddresses.map((e) => e);\n        }\n        else {\n            obj.accountAddresses = [];\n        }\n        message.startTimeNs !== undefined &&\n            (obj.startTimeNs = (message.startTimeNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetIdentityUpdatesRequest();\n        message.accountAddresses = ((_a = object.accountAddresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        message.startTimeNs =\n            object.startTimeNs !== undefined && object.startTimeNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.startTimeNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesResponse() {\n    return { updates: [] };\n}\nconst GetIdentityUpdatesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.updates) {\n            GetIdentityUpdatesResponse_WalletUpdates.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.updates.push(GetIdentityUpdatesResponse_WalletUpdates.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            updates: Array.isArray(object === null || object === void 0 ? void 0 : object.updates)\n                ? object.updates.map((e) => GetIdentityUpdatesResponse_WalletUpdates.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.updates) {\n            obj.updates = message.updates.map((e) => e ? GetIdentityUpdatesResponse_WalletUpdates.toJSON(e) : undefined);\n        }\n        else {\n            obj.updates = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetIdentityUpdatesResponse();\n        message.updates =\n            ((_a = object.updates) === null || _a === void 0 ? void 0 : _a.map((e) => GetIdentityUpdatesResponse_WalletUpdates.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesResponse_NewInstallationUpdate() {\n    return {\n        installationKey: new Uint8Array(),\n        credentialIdentity: new Uint8Array(),\n    };\n}\nconst GetIdentityUpdatesResponse_NewInstallationUpdate = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.installationKey.length !== 0) {\n            writer.uint32(10).bytes(message.installationKey);\n        }\n        if (message.credentialIdentity.length !== 0) {\n            writer.uint32(18).bytes(message.credentialIdentity);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesResponse_NewInstallationUpdate();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationKey = reader.bytes();\n                    break;\n                case 2:\n                    message.credentialIdentity = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationKey: isSet(object.installationKey)\n                ? bytesFromBase64(object.installationKey)\n                : new Uint8Array(),\n            credentialIdentity: isSet(object.credentialIdentity)\n                ? bytesFromBase64(object.credentialIdentity)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.installationKey !== undefined &&\n            (obj.installationKey = base64FromBytes(message.installationKey !== undefined\n                ? message.installationKey\n                : new Uint8Array()));\n        message.credentialIdentity !== undefined &&\n            (obj.credentialIdentity = base64FromBytes(message.credentialIdentity !== undefined\n                ? message.credentialIdentity\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGetIdentityUpdatesResponse_NewInstallationUpdate();\n        message.installationKey = (_a = object.installationKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.credentialIdentity = (_b = object.credentialIdentity) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesResponse_RevokedInstallationUpdate() {\n    return { installationKey: new Uint8Array() };\n}\nconst GetIdentityUpdatesResponse_RevokedInstallationUpdate = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.installationKey.length !== 0) {\n            writer.uint32(10).bytes(message.installationKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesResponse_RevokedInstallationUpdate();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationKey: isSet(object.installationKey)\n                ? bytesFromBase64(object.installationKey)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.installationKey !== undefined &&\n            (obj.installationKey = base64FromBytes(message.installationKey !== undefined\n                ? message.installationKey\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetIdentityUpdatesResponse_RevokedInstallationUpdate();\n        message.installationKey = (_a = object.installationKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesResponse_Update() {\n    return {\n        timestampNs: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        newInstallation: undefined,\n        revokedInstallation: undefined,\n    };\n}\nconst GetIdentityUpdatesResponse_Update = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (!message.timestampNs.isZero()) {\n            writer.uint32(8).uint64(message.timestampNs);\n        }\n        if (message.newInstallation !== undefined) {\n            GetIdentityUpdatesResponse_NewInstallationUpdate.encode(message.newInstallation, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.revokedInstallation !== undefined) {\n            GetIdentityUpdatesResponse_RevokedInstallationUpdate.encode(message.revokedInstallation, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesResponse_Update();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.timestampNs = reader.uint64();\n                    break;\n                case 2:\n                    message.newInstallation =\n                        GetIdentityUpdatesResponse_NewInstallationUpdate.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.revokedInstallation =\n                        GetIdentityUpdatesResponse_RevokedInstallationUpdate.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            timestampNs: isSet(object.timestampNs)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n            newInstallation: isSet(object.newInstallation)\n                ? GetIdentityUpdatesResponse_NewInstallationUpdate.fromJSON(object.newInstallation)\n                : undefined,\n            revokedInstallation: isSet(object.revokedInstallation)\n                ? GetIdentityUpdatesResponse_RevokedInstallationUpdate.fromJSON(object.revokedInstallation)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.timestampNs !== undefined &&\n            (obj.timestampNs = (message.timestampNs || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        message.newInstallation !== undefined &&\n            (obj.newInstallation = message.newInstallation\n                ? GetIdentityUpdatesResponse_NewInstallationUpdate.toJSON(message.newInstallation)\n                : undefined);\n        message.revokedInstallation !== undefined &&\n            (obj.revokedInstallation = message.revokedInstallation\n                ? GetIdentityUpdatesResponse_RevokedInstallationUpdate.toJSON(message.revokedInstallation)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseGetIdentityUpdatesResponse_Update();\n        message.timestampNs =\n            object.timestampNs !== undefined && object.timestampNs !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.timestampNs)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        message.newInstallation =\n            object.newInstallation !== undefined && object.newInstallation !== null\n                ? GetIdentityUpdatesResponse_NewInstallationUpdate.fromPartial(object.newInstallation)\n                : undefined;\n        message.revokedInstallation =\n            object.revokedInstallation !== undefined &&\n                object.revokedInstallation !== null\n                ? GetIdentityUpdatesResponse_RevokedInstallationUpdate.fromPartial(object.revokedInstallation)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseGetIdentityUpdatesResponse_WalletUpdates() {\n    return { updates: [] };\n}\nconst GetIdentityUpdatesResponse_WalletUpdates = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.updates) {\n            GetIdentityUpdatesResponse_Update.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetIdentityUpdatesResponse_WalletUpdates();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.updates.push(GetIdentityUpdatesResponse_Update.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            updates: Array.isArray(object === null || object === void 0 ? void 0 : object.updates)\n                ? object.updates.map((e) => GetIdentityUpdatesResponse_Update.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.updates) {\n            obj.updates = message.updates.map((e) => e ? GetIdentityUpdatesResponse_Update.toJSON(e) : undefined);\n        }\n        else {\n            obj.updates = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGetIdentityUpdatesResponse_WalletUpdates();\n        message.updates =\n            ((_a = object.updates) === null || _a === void 0 ? void 0 : _a.map((e) => GetIdentityUpdatesResponse_Update.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBasePagingInfo() {\n    return { direction: 0, limit: 0, idCursor: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst PagingInfo = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.direction !== 0) {\n            writer.uint32(8).int32(message.direction);\n        }\n        if (message.limit !== 0) {\n            writer.uint32(16).uint32(message.limit);\n        }\n        if (!message.idCursor.isZero()) {\n            writer.uint32(24).uint64(message.idCursor);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePagingInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.direction = reader.int32();\n                    break;\n                case 2:\n                    message.limit = reader.uint32();\n                    break;\n                case 3:\n                    message.idCursor = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            direction: isSet(object.direction)\n                ? sortDirectionFromJSON(object.direction)\n                : 0,\n            limit: isSet(object.limit) ? Number(object.limit) : 0,\n            idCursor: isSet(object.idCursor)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.idCursor)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.direction !== undefined &&\n            (obj.direction = sortDirectionToJSON(message.direction));\n        message.limit !== undefined && (obj.limit = Math.round(message.limit));\n        message.idCursor !== undefined &&\n            (obj.idCursor = (message.idCursor || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBasePagingInfo();\n        message.direction = (_a = object.direction) !== null && _a !== void 0 ? _a : 0;\n        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : 0;\n        message.idCursor =\n            object.idCursor !== undefined && object.idCursor !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.idCursor)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseQueryGroupMessagesRequest() {\n    return { groupId: new Uint8Array(), pagingInfo: undefined };\n}\nconst QueryGroupMessagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.groupId.length !== 0) {\n            writer.uint32(10).bytes(message.groupId);\n        }\n        if (message.pagingInfo !== undefined) {\n            PagingInfo.encode(message.pagingInfo, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryGroupMessagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.groupId = reader.bytes();\n                    break;\n                case 2:\n                    message.pagingInfo = PagingInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            groupId: isSet(object.groupId)\n                ? bytesFromBase64(object.groupId)\n                : new Uint8Array(),\n            pagingInfo: isSet(object.pagingInfo)\n                ? PagingInfo.fromJSON(object.pagingInfo)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.groupId !== undefined &&\n            (obj.groupId = base64FromBytes(message.groupId !== undefined ? message.groupId : new Uint8Array()));\n        message.pagingInfo !== undefined &&\n            (obj.pagingInfo = message.pagingInfo\n                ? PagingInfo.toJSON(message.pagingInfo)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseQueryGroupMessagesRequest();\n        message.groupId = (_a = object.groupId) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.pagingInfo =\n            object.pagingInfo !== undefined && object.pagingInfo !== null\n                ? PagingInfo.fromPartial(object.pagingInfo)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseQueryGroupMessagesResponse() {\n    return { messages: [], pagingInfo: undefined };\n}\nconst QueryGroupMessagesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.messages) {\n            GroupMessage.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagingInfo !== undefined) {\n            PagingInfo.encode(message.pagingInfo, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryGroupMessagesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.messages.push(GroupMessage.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagingInfo = PagingInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            messages: Array.isArray(object === null || object === void 0 ? void 0 : object.messages)\n                ? object.messages.map((e) => GroupMessage.fromJSON(e))\n                : [],\n            pagingInfo: isSet(object.pagingInfo)\n                ? PagingInfo.fromJSON(object.pagingInfo)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.messages) {\n            obj.messages = message.messages.map((e) => e ? GroupMessage.toJSON(e) : undefined);\n        }\n        else {\n            obj.messages = [];\n        }\n        message.pagingInfo !== undefined &&\n            (obj.pagingInfo = message.pagingInfo\n                ? PagingInfo.toJSON(message.pagingInfo)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseQueryGroupMessagesResponse();\n        message.messages =\n            ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => GroupMessage.fromPartial(e))) || [];\n        message.pagingInfo =\n            object.pagingInfo !== undefined && object.pagingInfo !== null\n                ? PagingInfo.fromPartial(object.pagingInfo)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseQueryWelcomeMessagesRequest() {\n    return { installationKey: new Uint8Array(), pagingInfo: undefined };\n}\nconst QueryWelcomeMessagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.installationKey.length !== 0) {\n            writer.uint32(10).bytes(message.installationKey);\n        }\n        if (message.pagingInfo !== undefined) {\n            PagingInfo.encode(message.pagingInfo, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryWelcomeMessagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationKey = reader.bytes();\n                    break;\n                case 2:\n                    message.pagingInfo = PagingInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationKey: isSet(object.installationKey)\n                ? bytesFromBase64(object.installationKey)\n                : new Uint8Array(),\n            pagingInfo: isSet(object.pagingInfo)\n                ? PagingInfo.fromJSON(object.pagingInfo)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.installationKey !== undefined &&\n            (obj.installationKey = base64FromBytes(message.installationKey !== undefined\n                ? message.installationKey\n                : new Uint8Array()));\n        message.pagingInfo !== undefined &&\n            (obj.pagingInfo = message.pagingInfo\n                ? PagingInfo.toJSON(message.pagingInfo)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseQueryWelcomeMessagesRequest();\n        message.installationKey = (_a = object.installationKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.pagingInfo =\n            object.pagingInfo !== undefined && object.pagingInfo !== null\n                ? PagingInfo.fromPartial(object.pagingInfo)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseQueryWelcomeMessagesResponse() {\n    return { messages: [], pagingInfo: undefined };\n}\nconst QueryWelcomeMessagesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.messages) {\n            WelcomeMessage.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagingInfo !== undefined) {\n            PagingInfo.encode(message.pagingInfo, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseQueryWelcomeMessagesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.messages.push(WelcomeMessage.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagingInfo = PagingInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            messages: Array.isArray(object === null || object === void 0 ? void 0 : object.messages)\n                ? object.messages.map((e) => WelcomeMessage.fromJSON(e))\n                : [],\n            pagingInfo: isSet(object.pagingInfo)\n                ? PagingInfo.fromJSON(object.pagingInfo)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.messages) {\n            obj.messages = message.messages.map((e) => e ? WelcomeMessage.toJSON(e) : undefined);\n        }\n        else {\n            obj.messages = [];\n        }\n        message.pagingInfo !== undefined &&\n            (obj.pagingInfo = message.pagingInfo\n                ? PagingInfo.toJSON(message.pagingInfo)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseQueryWelcomeMessagesResponse();\n        message.messages =\n            ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => WelcomeMessage.fromPartial(e))) || [];\n        message.pagingInfo =\n            object.pagingInfo !== undefined && object.pagingInfo !== null\n                ? PagingInfo.fromPartial(object.pagingInfo)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSubscribeGroupMessagesRequest() {\n    return { filters: [] };\n}\nconst SubscribeGroupMessagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.filters) {\n            SubscribeGroupMessagesRequest_Filter.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSubscribeGroupMessagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.filters.push(SubscribeGroupMessagesRequest_Filter.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            filters: Array.isArray(object === null || object === void 0 ? void 0 : object.filters)\n                ? object.filters.map((e) => SubscribeGroupMessagesRequest_Filter.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.filters) {\n            obj.filters = message.filters.map((e) => e ? SubscribeGroupMessagesRequest_Filter.toJSON(e) : undefined);\n        }\n        else {\n            obj.filters = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSubscribeGroupMessagesRequest();\n        message.filters =\n            ((_a = object.filters) === null || _a === void 0 ? void 0 : _a.map((e) => SubscribeGroupMessagesRequest_Filter.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSubscribeGroupMessagesRequest_Filter() {\n    return { groupId: new Uint8Array(), idCursor: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst SubscribeGroupMessagesRequest_Filter = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.groupId.length !== 0) {\n            writer.uint32(10).bytes(message.groupId);\n        }\n        if (!message.idCursor.isZero()) {\n            writer.uint32(16).uint64(message.idCursor);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSubscribeGroupMessagesRequest_Filter();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.groupId = reader.bytes();\n                    break;\n                case 2:\n                    message.idCursor = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            groupId: isSet(object.groupId)\n                ? bytesFromBase64(object.groupId)\n                : new Uint8Array(),\n            idCursor: isSet(object.idCursor)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.idCursor)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.groupId !== undefined &&\n            (obj.groupId = base64FromBytes(message.groupId !== undefined ? message.groupId : new Uint8Array()));\n        message.idCursor !== undefined &&\n            (obj.idCursor = (message.idCursor || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSubscribeGroupMessagesRequest_Filter();\n        message.groupId = (_a = object.groupId) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.idCursor =\n            object.idCursor !== undefined && object.idCursor !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.idCursor)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseSubscribeWelcomeMessagesRequest() {\n    return { filters: [] };\n}\nconst SubscribeWelcomeMessagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        for (const v of message.filters) {\n            SubscribeWelcomeMessagesRequest_Filter.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSubscribeWelcomeMessagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.filters.push(SubscribeWelcomeMessagesRequest_Filter.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            filters: Array.isArray(object === null || object === void 0 ? void 0 : object.filters)\n                ? object.filters.map((e) => SubscribeWelcomeMessagesRequest_Filter.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.filters) {\n            obj.filters = message.filters.map((e) => e ? SubscribeWelcomeMessagesRequest_Filter.toJSON(e) : undefined);\n        }\n        else {\n            obj.filters = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSubscribeWelcomeMessagesRequest();\n        message.filters =\n            ((_a = object.filters) === null || _a === void 0 ? void 0 : _a.map((e) => SubscribeWelcomeMessagesRequest_Filter.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSubscribeWelcomeMessagesRequest_Filter() {\n    return { installationKey: new Uint8Array(), idCursor: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst SubscribeWelcomeMessagesRequest_Filter = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Writer.create()) {\n        if (message.installationKey.length !== 0) {\n            writer.uint32(10).bytes(message.installationKey);\n        }\n        if (!message.idCursor.isZero()) {\n            writer.uint32(16).uint64(message.idCursor);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSubscribeWelcomeMessagesRequest_Filter();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationKey = reader.bytes();\n                    break;\n                case 2:\n                    message.idCursor = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationKey: isSet(object.installationKey)\n                ? bytesFromBase64(object.installationKey)\n                : new Uint8Array(),\n            idCursor: isSet(object.idCursor)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.idCursor)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.installationKey !== undefined &&\n            (obj.installationKey = base64FromBytes(message.installationKey !== undefined\n                ? message.installationKey\n                : new Uint8Array()));\n        message.idCursor !== undefined &&\n            (obj.idCursor = (message.idCursor || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSubscribeWelcomeMessagesRequest_Filter();\n        message.installationKey = (_a = object.installationKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.idCursor =\n            object.idCursor !== undefined && object.idCursor !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.idCursor)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nclass MlsApiClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.SendGroupMessages = this.SendGroupMessages.bind(this);\n        this.SendWelcomeMessages = this.SendWelcomeMessages.bind(this);\n        this.RegisterInstallation = this.RegisterInstallation.bind(this);\n        this.UploadKeyPackage = this.UploadKeyPackage.bind(this);\n        this.FetchKeyPackages = this.FetchKeyPackages.bind(this);\n        this.RevokeInstallation = this.RevokeInstallation.bind(this);\n        this.GetIdentityUpdates = this.GetIdentityUpdates.bind(this);\n        this.QueryGroupMessages = this.QueryGroupMessages.bind(this);\n        this.QueryWelcomeMessages = this.QueryWelcomeMessages.bind(this);\n        this.SubscribeGroupMessages = this.SubscribeGroupMessages.bind(this);\n        this.SubscribeWelcomeMessages = this.SubscribeWelcomeMessages.bind(this);\n    }\n    SendGroupMessages(request) {\n        const data = SendGroupMessagesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls.api.v1.MlsApi\", \"SendGroupMessages\", data);\n        return promise.then((data) => _google_protobuf_empty_pb__WEBPACK_IMPORTED_MODULE_2__.Empty.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    SendWelcomeMessages(request) {\n        const data = SendWelcomeMessagesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls.api.v1.MlsApi\", \"SendWelcomeMessages\", data);\n        return promise.then((data) => _google_protobuf_empty_pb__WEBPACK_IMPORTED_MODULE_2__.Empty.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    RegisterInstallation(request) {\n        const data = RegisterInstallationRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls.api.v1.MlsApi\", \"RegisterInstallation\", data);\n        return promise.then((data) => RegisterInstallationResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    UploadKeyPackage(request) {\n        const data = UploadKeyPackageRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls.api.v1.MlsApi\", \"UploadKeyPackage\", data);\n        return promise.then((data) => _google_protobuf_empty_pb__WEBPACK_IMPORTED_MODULE_2__.Empty.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    FetchKeyPackages(request) {\n        const data = FetchKeyPackagesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls.api.v1.MlsApi\", \"FetchKeyPackages\", data);\n        return promise.then((data) => FetchKeyPackagesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    RevokeInstallation(request) {\n        const data = RevokeInstallationRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls.api.v1.MlsApi\", \"RevokeInstallation\", data);\n        return promise.then((data) => _google_protobuf_empty_pb__WEBPACK_IMPORTED_MODULE_2__.Empty.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    GetIdentityUpdates(request) {\n        const data = GetIdentityUpdatesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls.api.v1.MlsApi\", \"GetIdentityUpdates\", data);\n        return promise.then((data) => GetIdentityUpdatesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    QueryGroupMessages(request) {\n        const data = QueryGroupMessagesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls.api.v1.MlsApi\", \"QueryGroupMessages\", data);\n        return promise.then((data) => QueryGroupMessagesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    QueryWelcomeMessages(request) {\n        const data = QueryWelcomeMessagesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls.api.v1.MlsApi\", \"QueryWelcomeMessages\", data);\n        return promise.then((data) => QueryWelcomeMessagesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data)));\n    }\n    SubscribeGroupMessages(request) {\n        const data = SubscribeGroupMessagesRequest.encode(request).finish();\n        const result = this.rpc.serverStreamingRequest(\"xmtp.mls.api.v1.MlsApi\", \"SubscribeGroupMessages\", data);\n        return result.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)((data) => GroupMessage.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data))));\n    }\n    SubscribeWelcomeMessages(request) {\n        const data = SubscribeWelcomeMessagesRequest.encode(request).finish();\n        const result = this.rpc.serverStreamingRequest(\"xmtp.mls.api.v1.MlsApi\", \"SubscribeWelcomeMessages\", data);\n        return result.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)((data) => WelcomeMessage.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().Reader)(data))));\n    }\n}\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=mls.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/api/v1/mls.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/database/intents.pb.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/mls/database/intents.pb.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountAddresses: () => (/* binding */ AccountAddresses),\n/* harmony export */   AddMembersData: () => (/* binding */ AddMembersData),\n/* harmony export */   AddMembersData_V1: () => (/* binding */ AddMembersData_V1),\n/* harmony export */   AddressesOrInstallationIds: () => (/* binding */ AddressesOrInstallationIds),\n/* harmony export */   AdminListUpdateType: () => (/* binding */ AdminListUpdateType),\n/* harmony export */   InstallationIds: () => (/* binding */ InstallationIds),\n/* harmony export */   PermissionPolicyOption: () => (/* binding */ PermissionPolicyOption),\n/* harmony export */   PermissionUpdateType: () => (/* binding */ PermissionUpdateType),\n/* harmony export */   PostCommitAction: () => (/* binding */ PostCommitAction),\n/* harmony export */   PostCommitAction_Installation: () => (/* binding */ PostCommitAction_Installation),\n/* harmony export */   PostCommitAction_SendWelcomes: () => (/* binding */ PostCommitAction_SendWelcomes),\n/* harmony export */   RemoveMembersData: () => (/* binding */ RemoveMembersData),\n/* harmony export */   RemoveMembersData_V1: () => (/* binding */ RemoveMembersData_V1),\n/* harmony export */   SendMessageData: () => (/* binding */ SendMessageData),\n/* harmony export */   SendMessageData_V1: () => (/* binding */ SendMessageData_V1),\n/* harmony export */   UpdateAdminListsData: () => (/* binding */ UpdateAdminListsData),\n/* harmony export */   UpdateAdminListsData_V1: () => (/* binding */ UpdateAdminListsData_V1),\n/* harmony export */   UpdateGroupMembershipData: () => (/* binding */ UpdateGroupMembershipData),\n/* harmony export */   UpdateGroupMembershipData_V1: () => (/* binding */ UpdateGroupMembershipData_V1),\n/* harmony export */   UpdateGroupMembershipData_V1_MembershipUpdatesEntry: () => (/* binding */ UpdateGroupMembershipData_V1_MembershipUpdatesEntry),\n/* harmony export */   UpdateMetadataData: () => (/* binding */ UpdateMetadataData),\n/* harmony export */   UpdateMetadataData_V1: () => (/* binding */ UpdateMetadataData_V1),\n/* harmony export */   UpdatePermissionData: () => (/* binding */ UpdatePermissionData),\n/* harmony export */   UpdatePermissionData_V1: () => (/* binding */ UpdatePermissionData_V1),\n/* harmony export */   adminListUpdateTypeFromJSON: () => (/* binding */ adminListUpdateTypeFromJSON),\n/* harmony export */   adminListUpdateTypeToJSON: () => (/* binding */ adminListUpdateTypeToJSON),\n/* harmony export */   permissionPolicyOptionFromJSON: () => (/* binding */ permissionPolicyOptionFromJSON),\n/* harmony export */   permissionPolicyOptionToJSON: () => (/* binding */ permissionPolicyOptionToJSON),\n/* harmony export */   permissionUpdateTypeFromJSON: () => (/* binding */ permissionUpdateTypeFromJSON),\n/* harmony export */   permissionUpdateTypeToJSON: () => (/* binding */ permissionUpdateTypeToJSON),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.mls.database\";\n/** Type of update to admin lists */\nvar AdminListUpdateType;\n(function (AdminListUpdateType) {\n    AdminListUpdateType[AdminListUpdateType[\"ADMIN_LIST_UPDATE_TYPE_UNSPECIFIED\"] = 0] = \"ADMIN_LIST_UPDATE_TYPE_UNSPECIFIED\";\n    AdminListUpdateType[AdminListUpdateType[\"ADMIN_LIST_UPDATE_TYPE_ADD_ADMIN\"] = 1] = \"ADMIN_LIST_UPDATE_TYPE_ADD_ADMIN\";\n    AdminListUpdateType[AdminListUpdateType[\"ADMIN_LIST_UPDATE_TYPE_REMOVE_ADMIN\"] = 2] = \"ADMIN_LIST_UPDATE_TYPE_REMOVE_ADMIN\";\n    AdminListUpdateType[AdminListUpdateType[\"ADMIN_LIST_UPDATE_TYPE_ADD_SUPER_ADMIN\"] = 3] = \"ADMIN_LIST_UPDATE_TYPE_ADD_SUPER_ADMIN\";\n    AdminListUpdateType[AdminListUpdateType[\"ADMIN_LIST_UPDATE_TYPE_REMOVE_SUPER_ADMIN\"] = 4] = \"ADMIN_LIST_UPDATE_TYPE_REMOVE_SUPER_ADMIN\";\n    AdminListUpdateType[AdminListUpdateType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AdminListUpdateType || (AdminListUpdateType = {}));\nfunction adminListUpdateTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"ADMIN_LIST_UPDATE_TYPE_UNSPECIFIED\":\n            return AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_UNSPECIFIED;\n        case 1:\n        case \"ADMIN_LIST_UPDATE_TYPE_ADD_ADMIN\":\n            return AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_ADD_ADMIN;\n        case 2:\n        case \"ADMIN_LIST_UPDATE_TYPE_REMOVE_ADMIN\":\n            return AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_REMOVE_ADMIN;\n        case 3:\n        case \"ADMIN_LIST_UPDATE_TYPE_ADD_SUPER_ADMIN\":\n            return AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_ADD_SUPER_ADMIN;\n        case 4:\n        case \"ADMIN_LIST_UPDATE_TYPE_REMOVE_SUPER_ADMIN\":\n            return AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_REMOVE_SUPER_ADMIN;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return AdminListUpdateType.UNRECOGNIZED;\n    }\n}\nfunction adminListUpdateTypeToJSON(object) {\n    switch (object) {\n        case AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_UNSPECIFIED:\n            return \"ADMIN_LIST_UPDATE_TYPE_UNSPECIFIED\";\n        case AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_ADD_ADMIN:\n            return \"ADMIN_LIST_UPDATE_TYPE_ADD_ADMIN\";\n        case AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_REMOVE_ADMIN:\n            return \"ADMIN_LIST_UPDATE_TYPE_REMOVE_ADMIN\";\n        case AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_ADD_SUPER_ADMIN:\n            return \"ADMIN_LIST_UPDATE_TYPE_ADD_SUPER_ADMIN\";\n        case AdminListUpdateType.ADMIN_LIST_UPDATE_TYPE_REMOVE_SUPER_ADMIN:\n            return \"ADMIN_LIST_UPDATE_TYPE_REMOVE_SUPER_ADMIN\";\n        case AdminListUpdateType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\n/** Type of Permission to Update */\nvar PermissionUpdateType;\n(function (PermissionUpdateType) {\n    PermissionUpdateType[PermissionUpdateType[\"PERMISSION_UPDATE_TYPE_UNSPECIFIED\"] = 0] = \"PERMISSION_UPDATE_TYPE_UNSPECIFIED\";\n    PermissionUpdateType[PermissionUpdateType[\"PERMISSION_UPDATE_TYPE_ADD_MEMBER\"] = 1] = \"PERMISSION_UPDATE_TYPE_ADD_MEMBER\";\n    PermissionUpdateType[PermissionUpdateType[\"PERMISSION_UPDATE_TYPE_REMOVE_MEMBER\"] = 2] = \"PERMISSION_UPDATE_TYPE_REMOVE_MEMBER\";\n    PermissionUpdateType[PermissionUpdateType[\"PERMISSION_UPDATE_TYPE_ADD_ADMIN\"] = 3] = \"PERMISSION_UPDATE_TYPE_ADD_ADMIN\";\n    PermissionUpdateType[PermissionUpdateType[\"PERMISSION_UPDATE_TYPE_REMOVE_ADMIN\"] = 4] = \"PERMISSION_UPDATE_TYPE_REMOVE_ADMIN\";\n    PermissionUpdateType[PermissionUpdateType[\"PERMISSION_UPDATE_TYPE_UPDATE_METADATA\"] = 5] = \"PERMISSION_UPDATE_TYPE_UPDATE_METADATA\";\n    PermissionUpdateType[PermissionUpdateType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(PermissionUpdateType || (PermissionUpdateType = {}));\nfunction permissionUpdateTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"PERMISSION_UPDATE_TYPE_UNSPECIFIED\":\n            return PermissionUpdateType.PERMISSION_UPDATE_TYPE_UNSPECIFIED;\n        case 1:\n        case \"PERMISSION_UPDATE_TYPE_ADD_MEMBER\":\n            return PermissionUpdateType.PERMISSION_UPDATE_TYPE_ADD_MEMBER;\n        case 2:\n        case \"PERMISSION_UPDATE_TYPE_REMOVE_MEMBER\":\n            return PermissionUpdateType.PERMISSION_UPDATE_TYPE_REMOVE_MEMBER;\n        case 3:\n        case \"PERMISSION_UPDATE_TYPE_ADD_ADMIN\":\n            return PermissionUpdateType.PERMISSION_UPDATE_TYPE_ADD_ADMIN;\n        case 4:\n        case \"PERMISSION_UPDATE_TYPE_REMOVE_ADMIN\":\n            return PermissionUpdateType.PERMISSION_UPDATE_TYPE_REMOVE_ADMIN;\n        case 5:\n        case \"PERMISSION_UPDATE_TYPE_UPDATE_METADATA\":\n            return PermissionUpdateType.PERMISSION_UPDATE_TYPE_UPDATE_METADATA;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return PermissionUpdateType.UNRECOGNIZED;\n    }\n}\nfunction permissionUpdateTypeToJSON(object) {\n    switch (object) {\n        case PermissionUpdateType.PERMISSION_UPDATE_TYPE_UNSPECIFIED:\n            return \"PERMISSION_UPDATE_TYPE_UNSPECIFIED\";\n        case PermissionUpdateType.PERMISSION_UPDATE_TYPE_ADD_MEMBER:\n            return \"PERMISSION_UPDATE_TYPE_ADD_MEMBER\";\n        case PermissionUpdateType.PERMISSION_UPDATE_TYPE_REMOVE_MEMBER:\n            return \"PERMISSION_UPDATE_TYPE_REMOVE_MEMBER\";\n        case PermissionUpdateType.PERMISSION_UPDATE_TYPE_ADD_ADMIN:\n            return \"PERMISSION_UPDATE_TYPE_ADD_ADMIN\";\n        case PermissionUpdateType.PERMISSION_UPDATE_TYPE_REMOVE_ADMIN:\n            return \"PERMISSION_UPDATE_TYPE_REMOVE_ADMIN\";\n        case PermissionUpdateType.PERMISSION_UPDATE_TYPE_UPDATE_METADATA:\n            return \"PERMISSION_UPDATE_TYPE_UPDATE_METADATA\";\n        case PermissionUpdateType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\n/** Permission Policy */\nvar PermissionPolicyOption;\n(function (PermissionPolicyOption) {\n    PermissionPolicyOption[PermissionPolicyOption[\"PERMISSION_POLICY_OPTION_UNSPECIFIED\"] = 0] = \"PERMISSION_POLICY_OPTION_UNSPECIFIED\";\n    PermissionPolicyOption[PermissionPolicyOption[\"PERMISSION_POLICY_OPTION_ALLOW\"] = 1] = \"PERMISSION_POLICY_OPTION_ALLOW\";\n    PermissionPolicyOption[PermissionPolicyOption[\"PERMISSION_POLICY_OPTION_DENY\"] = 2] = \"PERMISSION_POLICY_OPTION_DENY\";\n    PermissionPolicyOption[PermissionPolicyOption[\"PERMISSION_POLICY_OPTION_ADMIN_ONLY\"] = 3] = \"PERMISSION_POLICY_OPTION_ADMIN_ONLY\";\n    PermissionPolicyOption[PermissionPolicyOption[\"PERMISSION_POLICY_OPTION_SUPER_ADMIN_ONLY\"] = 4] = \"PERMISSION_POLICY_OPTION_SUPER_ADMIN_ONLY\";\n    PermissionPolicyOption[PermissionPolicyOption[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(PermissionPolicyOption || (PermissionPolicyOption = {}));\nfunction permissionPolicyOptionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"PERMISSION_POLICY_OPTION_UNSPECIFIED\":\n            return PermissionPolicyOption.PERMISSION_POLICY_OPTION_UNSPECIFIED;\n        case 1:\n        case \"PERMISSION_POLICY_OPTION_ALLOW\":\n            return PermissionPolicyOption.PERMISSION_POLICY_OPTION_ALLOW;\n        case 2:\n        case \"PERMISSION_POLICY_OPTION_DENY\":\n            return PermissionPolicyOption.PERMISSION_POLICY_OPTION_DENY;\n        case 3:\n        case \"PERMISSION_POLICY_OPTION_ADMIN_ONLY\":\n            return PermissionPolicyOption.PERMISSION_POLICY_OPTION_ADMIN_ONLY;\n        case 4:\n        case \"PERMISSION_POLICY_OPTION_SUPER_ADMIN_ONLY\":\n            return PermissionPolicyOption.PERMISSION_POLICY_OPTION_SUPER_ADMIN_ONLY;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return PermissionPolicyOption.UNRECOGNIZED;\n    }\n}\nfunction permissionPolicyOptionToJSON(object) {\n    switch (object) {\n        case PermissionPolicyOption.PERMISSION_POLICY_OPTION_UNSPECIFIED:\n            return \"PERMISSION_POLICY_OPTION_UNSPECIFIED\";\n        case PermissionPolicyOption.PERMISSION_POLICY_OPTION_ALLOW:\n            return \"PERMISSION_POLICY_OPTION_ALLOW\";\n        case PermissionPolicyOption.PERMISSION_POLICY_OPTION_DENY:\n            return \"PERMISSION_POLICY_OPTION_DENY\";\n        case PermissionPolicyOption.PERMISSION_POLICY_OPTION_ADMIN_ONLY:\n            return \"PERMISSION_POLICY_OPTION_ADMIN_ONLY\";\n        case PermissionPolicyOption.PERMISSION_POLICY_OPTION_SUPER_ADMIN_ONLY:\n            return \"PERMISSION_POLICY_OPTION_SUPER_ADMIN_ONLY\";\n        case PermissionPolicyOption.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseSendMessageData() {\n    return { v1: undefined };\n}\nconst SendMessageData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            SendMessageData_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendMessageData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = SendMessageData_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? SendMessageData_V1.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? SendMessageData_V1.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSendMessageData();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? SendMessageData_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSendMessageData_V1() {\n    return { payloadBytes: new Uint8Array() };\n}\nconst SendMessageData_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.payloadBytes.length !== 0) {\n            writer.uint32(10).bytes(message.payloadBytes);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendMessageData_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.payloadBytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            payloadBytes: isSet(object.payloadBytes)\n                ? bytesFromBase64(object.payloadBytes)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.payloadBytes !== undefined &&\n            (obj.payloadBytes = base64FromBytes(message.payloadBytes !== undefined\n                ? message.payloadBytes\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSendMessageData_V1();\n        message.payloadBytes = (_a = object.payloadBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseAccountAddresses() {\n    return { accountAddresses: [] };\n}\nconst AccountAddresses = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        for (const v of message.accountAddresses) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAccountAddresses();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accountAddresses.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accountAddresses: Array.isArray(object === null || object === void 0 ? void 0 : object.accountAddresses)\n                ? object.accountAddresses.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.accountAddresses) {\n            obj.accountAddresses = message.accountAddresses.map((e) => e);\n        }\n        else {\n            obj.accountAddresses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseAccountAddresses();\n        message.accountAddresses = ((_a = object.accountAddresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseInstallationIds() {\n    return { installationIds: [] };\n}\nconst InstallationIds = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        for (const v of message.installationIds) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInstallationIds();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationIds.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationIds: Array.isArray(object === null || object === void 0 ? void 0 : object.installationIds)\n                ? object.installationIds.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.installationIds) {\n            obj.installationIds = message.installationIds.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.installationIds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseInstallationIds();\n        message.installationIds = ((_a = object.installationIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseAddressesOrInstallationIds() {\n    return { accountAddresses: undefined, installationIds: undefined };\n}\nconst AddressesOrInstallationIds = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.accountAddresses !== undefined) {\n            AccountAddresses.encode(message.accountAddresses, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.installationIds !== undefined) {\n            InstallationIds.encode(message.installationIds, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAddressesOrInstallationIds();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.accountAddresses = AccountAddresses.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.installationIds = InstallationIds.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            accountAddresses: isSet(object.accountAddresses)\n                ? AccountAddresses.fromJSON(object.accountAddresses)\n                : undefined,\n            installationIds: isSet(object.installationIds)\n                ? InstallationIds.fromJSON(object.installationIds)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.accountAddresses !== undefined &&\n            (obj.accountAddresses = message.accountAddresses\n                ? AccountAddresses.toJSON(message.accountAddresses)\n                : undefined);\n        message.installationIds !== undefined &&\n            (obj.installationIds = message.installationIds\n                ? InstallationIds.toJSON(message.installationIds)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseAddressesOrInstallationIds();\n        message.accountAddresses =\n            object.accountAddresses !== undefined && object.accountAddresses !== null\n                ? AccountAddresses.fromPartial(object.accountAddresses)\n                : undefined;\n        message.installationIds =\n            object.installationIds !== undefined && object.installationIds !== null\n                ? InstallationIds.fromPartial(object.installationIds)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseAddMembersData() {\n    return { v1: undefined };\n}\nconst AddMembersData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            AddMembersData_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAddMembersData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = AddMembersData_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1) ? AddMembersData_V1.fromJSON(object.v1) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1 ? AddMembersData_V1.toJSON(message.v1) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseAddMembersData();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? AddMembersData_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseAddMembersData_V1() {\n    return { addressesOrInstallationIds: undefined };\n}\nconst AddMembersData_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.addressesOrInstallationIds !== undefined) {\n            AddressesOrInstallationIds.encode(message.addressesOrInstallationIds, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAddMembersData_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.addressesOrInstallationIds =\n                        AddressesOrInstallationIds.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            addressesOrInstallationIds: isSet(object.addressesOrInstallationIds)\n                ? AddressesOrInstallationIds.fromJSON(object.addressesOrInstallationIds)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.addressesOrInstallationIds !== undefined &&\n            (obj.addressesOrInstallationIds = message.addressesOrInstallationIds\n                ? AddressesOrInstallationIds.toJSON(message.addressesOrInstallationIds)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseAddMembersData_V1();\n        message.addressesOrInstallationIds =\n            object.addressesOrInstallationIds !== undefined &&\n                object.addressesOrInstallationIds !== null\n                ? AddressesOrInstallationIds.fromPartial(object.addressesOrInstallationIds)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseRemoveMembersData() {\n    return { v1: undefined };\n}\nconst RemoveMembersData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            RemoveMembersData_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRemoveMembersData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = RemoveMembersData_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? RemoveMembersData_V1.fromJSON(object.v1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? RemoveMembersData_V1.toJSON(message.v1)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseRemoveMembersData();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? RemoveMembersData_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseRemoveMembersData_V1() {\n    return { addressesOrInstallationIds: undefined };\n}\nconst RemoveMembersData_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.addressesOrInstallationIds !== undefined) {\n            AddressesOrInstallationIds.encode(message.addressesOrInstallationIds, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRemoveMembersData_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.addressesOrInstallationIds =\n                        AddressesOrInstallationIds.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            addressesOrInstallationIds: isSet(object.addressesOrInstallationIds)\n                ? AddressesOrInstallationIds.fromJSON(object.addressesOrInstallationIds)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.addressesOrInstallationIds !== undefined &&\n            (obj.addressesOrInstallationIds = message.addressesOrInstallationIds\n                ? AddressesOrInstallationIds.toJSON(message.addressesOrInstallationIds)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseRemoveMembersData_V1();\n        message.addressesOrInstallationIds =\n            object.addressesOrInstallationIds !== undefined &&\n                object.addressesOrInstallationIds !== null\n                ? AddressesOrInstallationIds.fromPartial(object.addressesOrInstallationIds)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseUpdateGroupMembershipData() {\n    return { v1: undefined };\n}\nconst UpdateGroupMembershipData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            UpdateGroupMembershipData_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateGroupMembershipData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = UpdateGroupMembershipData_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? UpdateGroupMembershipData_V1.fromJSON(object.v1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? UpdateGroupMembershipData_V1.toJSON(message.v1)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseUpdateGroupMembershipData();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? UpdateGroupMembershipData_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseUpdateGroupMembershipData_V1() {\n    return { membershipUpdates: {}, removedMembers: [] };\n}\nconst UpdateGroupMembershipData_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        Object.entries(message.membershipUpdates).forEach(([key, value]) => {\n            UpdateGroupMembershipData_V1_MembershipUpdatesEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();\n        });\n        for (const v of message.removedMembers) {\n            writer.uint32(18).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateGroupMembershipData_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    const entry1 = UpdateGroupMembershipData_V1_MembershipUpdatesEntry.decode(reader, reader.uint32());\n                    if (entry1.value !== undefined) {\n                        message.membershipUpdates[entry1.key] = entry1.value;\n                    }\n                    break;\n                case 2:\n                    message.removedMembers.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            membershipUpdates: isObject(object.membershipUpdates)\n                ? Object.entries(object.membershipUpdates).reduce((acc, [key, value]) => {\n                    acc[key] = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(value);\n                    return acc;\n                }, {})\n                : {},\n            removedMembers: Array.isArray(object === null || object === void 0 ? void 0 : object.removedMembers)\n                ? object.removedMembers.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        obj.membershipUpdates = {};\n        if (message.membershipUpdates) {\n            Object.entries(message.membershipUpdates).forEach(([k, v]) => {\n                obj.membershipUpdates[k] = v.toString();\n            });\n        }\n        if (message.removedMembers) {\n            obj.removedMembers = message.removedMembers.map((e) => e);\n        }\n        else {\n            obj.removedMembers = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseUpdateGroupMembershipData_V1();\n        message.membershipUpdates = Object.entries((_a = object.membershipUpdates) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(value);\n            }\n            return acc;\n        }, {});\n        message.removedMembers = ((_b = object.removedMembers) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseUpdateGroupMembershipData_V1_MembershipUpdatesEntry() {\n    return { key: \"\", value: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst UpdateGroupMembershipData_V1_MembershipUpdatesEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (!message.value.isZero()) {\n            writer.uint32(16).uint64(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateGroupMembershipData_V1_MembershipUpdatesEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.value) : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined &&\n            (obj.value = (message.value || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseUpdateGroupMembershipData_V1_MembershipUpdatesEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value =\n            object.value !== undefined && object.value !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.value)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseUpdateMetadataData() {\n    return { v1: undefined };\n}\nconst UpdateMetadataData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            UpdateMetadataData_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateMetadataData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = UpdateMetadataData_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? UpdateMetadataData_V1.fromJSON(object.v1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? UpdateMetadataData_V1.toJSON(message.v1)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseUpdateMetadataData();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? UpdateMetadataData_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseUpdateMetadataData_V1() {\n    return { fieldName: \"\", fieldValue: \"\" };\n}\nconst UpdateMetadataData_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.fieldName !== \"\") {\n            writer.uint32(10).string(message.fieldName);\n        }\n        if (message.fieldValue !== \"\") {\n            writer.uint32(18).string(message.fieldValue);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateMetadataData_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.fieldName = reader.string();\n                    break;\n                case 2:\n                    message.fieldValue = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            fieldName: isSet(object.fieldName) ? String(object.fieldName) : \"\",\n            fieldValue: isSet(object.fieldValue) ? String(object.fieldValue) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.fieldName !== undefined && (obj.fieldName = message.fieldName);\n        message.fieldValue !== undefined && (obj.fieldValue = message.fieldValue);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseUpdateMetadataData_V1();\n        message.fieldName = (_a = object.fieldName) !== null && _a !== void 0 ? _a : \"\";\n        message.fieldValue = (_b = object.fieldValue) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseUpdateAdminListsData() {\n    return { v1: undefined };\n}\nconst UpdateAdminListsData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            UpdateAdminListsData_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateAdminListsData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = UpdateAdminListsData_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? UpdateAdminListsData_V1.fromJSON(object.v1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? UpdateAdminListsData_V1.toJSON(message.v1)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseUpdateAdminListsData();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? UpdateAdminListsData_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseUpdateAdminListsData_V1() {\n    return { adminListUpdateType: 0, inboxId: \"\" };\n}\nconst UpdateAdminListsData_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.adminListUpdateType !== 0) {\n            writer.uint32(8).int32(message.adminListUpdateType);\n        }\n        if (message.inboxId !== \"\") {\n            writer.uint32(18).string(message.inboxId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateAdminListsData_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.adminListUpdateType = reader.int32();\n                    break;\n                case 2:\n                    message.inboxId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            adminListUpdateType: isSet(object.adminListUpdateType)\n                ? adminListUpdateTypeFromJSON(object.adminListUpdateType)\n                : 0,\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.adminListUpdateType !== undefined &&\n            (obj.adminListUpdateType = adminListUpdateTypeToJSON(message.adminListUpdateType));\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseUpdateAdminListsData_V1();\n        message.adminListUpdateType = (_a = object.adminListUpdateType) !== null && _a !== void 0 ? _a : 0;\n        message.inboxId = (_b = object.inboxId) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseUpdatePermissionData() {\n    return { v1: undefined };\n}\nconst UpdatePermissionData = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            UpdatePermissionData_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdatePermissionData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = UpdatePermissionData_V1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? UpdatePermissionData_V1.fromJSON(object.v1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? UpdatePermissionData_V1.toJSON(message.v1)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseUpdatePermissionData();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? UpdatePermissionData_V1.fromPartial(object.v1)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseUpdatePermissionData_V1() {\n    return {\n        permissionUpdateType: 0,\n        permissionPolicyOption: 0,\n        metadataFieldName: undefined,\n    };\n}\nconst UpdatePermissionData_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.permissionUpdateType !== 0) {\n            writer.uint32(8).int32(message.permissionUpdateType);\n        }\n        if (message.permissionPolicyOption !== 0) {\n            writer.uint32(16).int32(message.permissionPolicyOption);\n        }\n        if (message.metadataFieldName !== undefined) {\n            writer.uint32(26).string(message.metadataFieldName);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdatePermissionData_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.permissionUpdateType = reader.int32();\n                    break;\n                case 2:\n                    message.permissionPolicyOption = reader.int32();\n                    break;\n                case 3:\n                    message.metadataFieldName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            permissionUpdateType: isSet(object.permissionUpdateType)\n                ? permissionUpdateTypeFromJSON(object.permissionUpdateType)\n                : 0,\n            permissionPolicyOption: isSet(object.permissionPolicyOption)\n                ? permissionPolicyOptionFromJSON(object.permissionPolicyOption)\n                : 0,\n            metadataFieldName: isSet(object.metadataFieldName)\n                ? String(object.metadataFieldName)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.permissionUpdateType !== undefined &&\n            (obj.permissionUpdateType = permissionUpdateTypeToJSON(message.permissionUpdateType));\n        message.permissionPolicyOption !== undefined &&\n            (obj.permissionPolicyOption = permissionPolicyOptionToJSON(message.permissionPolicyOption));\n        message.metadataFieldName !== undefined &&\n            (obj.metadataFieldName = message.metadataFieldName);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseUpdatePermissionData_V1();\n        message.permissionUpdateType = (_a = object.permissionUpdateType) !== null && _a !== void 0 ? _a : 0;\n        message.permissionPolicyOption = (_b = object.permissionPolicyOption) !== null && _b !== void 0 ? _b : 0;\n        message.metadataFieldName = (_c = object.metadataFieldName) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    },\n};\nfunction createBasePostCommitAction() {\n    return { sendWelcomes: undefined };\n}\nconst PostCommitAction = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.sendWelcomes !== undefined) {\n            PostCommitAction_SendWelcomes.encode(message.sendWelcomes, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePostCommitAction();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sendWelcomes = PostCommitAction_SendWelcomes.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sendWelcomes: isSet(object.sendWelcomes)\n                ? PostCommitAction_SendWelcomes.fromJSON(object.sendWelcomes)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sendWelcomes !== undefined &&\n            (obj.sendWelcomes = message.sendWelcomes\n                ? PostCommitAction_SendWelcomes.toJSON(message.sendWelcomes)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePostCommitAction();\n        message.sendWelcomes =\n            object.sendWelcomes !== undefined && object.sendWelcomes !== null\n                ? PostCommitAction_SendWelcomes.fromPartial(object.sendWelcomes)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePostCommitAction_Installation() {\n    return { installationKey: new Uint8Array(), hpkePublicKey: new Uint8Array() };\n}\nconst PostCommitAction_Installation = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.installationKey.length !== 0) {\n            writer.uint32(10).bytes(message.installationKey);\n        }\n        if (message.hpkePublicKey.length !== 0) {\n            writer.uint32(18).bytes(message.hpkePublicKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePostCommitAction_Installation();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationKey = reader.bytes();\n                    break;\n                case 2:\n                    message.hpkePublicKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationKey: isSet(object.installationKey)\n                ? bytesFromBase64(object.installationKey)\n                : new Uint8Array(),\n            hpkePublicKey: isSet(object.hpkePublicKey)\n                ? bytesFromBase64(object.hpkePublicKey)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.installationKey !== undefined &&\n            (obj.installationKey = base64FromBytes(message.installationKey !== undefined\n                ? message.installationKey\n                : new Uint8Array()));\n        message.hpkePublicKey !== undefined &&\n            (obj.hpkePublicKey = base64FromBytes(message.hpkePublicKey !== undefined\n                ? message.hpkePublicKey\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBasePostCommitAction_Installation();\n        message.installationKey = (_a = object.installationKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.hpkePublicKey = (_b = object.hpkePublicKey) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBasePostCommitAction_SendWelcomes() {\n    return { installations: [], welcomeMessage: new Uint8Array() };\n}\nconst PostCommitAction_SendWelcomes = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        for (const v of message.installations) {\n            PostCommitAction_Installation.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.welcomeMessage.length !== 0) {\n            writer.uint32(18).bytes(message.welcomeMessage);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePostCommitAction_SendWelcomes();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installations.push(PostCommitAction_Installation.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.welcomeMessage = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installations: Array.isArray(object === null || object === void 0 ? void 0 : object.installations)\n                ? object.installations.map((e) => PostCommitAction_Installation.fromJSON(e))\n                : [],\n            welcomeMessage: isSet(object.welcomeMessage)\n                ? bytesFromBase64(object.welcomeMessage)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.installations) {\n            obj.installations = message.installations.map((e) => e ? PostCommitAction_Installation.toJSON(e) : undefined);\n        }\n        else {\n            obj.installations = [];\n        }\n        message.welcomeMessage !== undefined &&\n            (obj.welcomeMessage = base64FromBytes(message.welcomeMessage !== undefined\n                ? message.welcomeMessage\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBasePostCommitAction_SendWelcomes();\n        message.installations =\n            ((_a = object.installations) === null || _a === void 0 ? void 0 : _a.map((e) => PostCommitAction_Installation.fromPartial(e))) || [];\n        message.welcomeMessage = (_b = object.welcomeMessage) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=intents.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/database/intents.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/content.pb.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/content.pb.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Compression: () => (/* binding */ Compression),\n/* harmony export */   ContentTypeId: () => (/* binding */ ContentTypeId),\n/* harmony export */   EncodedContent: () => (/* binding */ EncodedContent),\n/* harmony export */   EncodedContent_ParametersEntry: () => (/* binding */ EncodedContent_ParametersEntry),\n/* harmony export */   MessageHistoryKeyType: () => (/* binding */ MessageHistoryKeyType),\n/* harmony export */   MessageHistoryReply: () => (/* binding */ MessageHistoryReply),\n/* harmony export */   MessageHistoryRequest: () => (/* binding */ MessageHistoryRequest),\n/* harmony export */   PlaintextEnvelope: () => (/* binding */ PlaintextEnvelope),\n/* harmony export */   PlaintextEnvelope_V1: () => (/* binding */ PlaintextEnvelope_V1),\n/* harmony export */   PlaintextEnvelope_V2: () => (/* binding */ PlaintextEnvelope_V2),\n/* harmony export */   compressionFromJSON: () => (/* binding */ compressionFromJSON),\n/* harmony export */   compressionToJSON: () => (/* binding */ compressionToJSON),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.mls.message_contents\";\n/**\n * Message content encoding structures\n * Copied from V2 code so that we can eventually retire all V2 message content\n */\n/**\n * Recognized compression algorithms\n * protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH\n */\nvar Compression;\n(function (Compression) {\n    Compression[Compression[\"COMPRESSION_DEFLATE\"] = 0] = \"COMPRESSION_DEFLATE\";\n    Compression[Compression[\"COMPRESSION_GZIP\"] = 1] = \"COMPRESSION_GZIP\";\n    Compression[Compression[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Compression || (Compression = {}));\nfunction compressionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"COMPRESSION_DEFLATE\":\n            return Compression.COMPRESSION_DEFLATE;\n        case 1:\n        case \"COMPRESSION_GZIP\":\n            return Compression.COMPRESSION_GZIP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return Compression.UNRECOGNIZED;\n    }\n}\nfunction compressionToJSON(object) {\n    switch (object) {\n        case Compression.COMPRESSION_DEFLATE:\n            return \"COMPRESSION_DEFLATE\";\n        case Compression.COMPRESSION_GZIP:\n            return \"COMPRESSION_GZIP\";\n        case Compression.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseContentTypeId() {\n    return { authorityId: \"\", typeId: \"\", versionMajor: 0, versionMinor: 0 };\n}\nconst ContentTypeId = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.authorityId !== \"\") {\n            writer.uint32(10).string(message.authorityId);\n        }\n        if (message.typeId !== \"\") {\n            writer.uint32(18).string(message.typeId);\n        }\n        if (message.versionMajor !== 0) {\n            writer.uint32(24).uint32(message.versionMajor);\n        }\n        if (message.versionMinor !== 0) {\n            writer.uint32(32).uint32(message.versionMinor);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContentTypeId();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.authorityId = reader.string();\n                    break;\n                case 2:\n                    message.typeId = reader.string();\n                    break;\n                case 3:\n                    message.versionMajor = reader.uint32();\n                    break;\n                case 4:\n                    message.versionMinor = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            authorityId: isSet(object.authorityId) ? String(object.authorityId) : \"\",\n            typeId: isSet(object.typeId) ? String(object.typeId) : \"\",\n            versionMajor: isSet(object.versionMajor)\n                ? Number(object.versionMajor)\n                : 0,\n            versionMinor: isSet(object.versionMinor)\n                ? Number(object.versionMinor)\n                : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.authorityId !== undefined &&\n            (obj.authorityId = message.authorityId);\n        message.typeId !== undefined && (obj.typeId = message.typeId);\n        message.versionMajor !== undefined &&\n            (obj.versionMajor = Math.round(message.versionMajor));\n        message.versionMinor !== undefined &&\n            (obj.versionMinor = Math.round(message.versionMinor));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseContentTypeId();\n        message.authorityId = (_a = object.authorityId) !== null && _a !== void 0 ? _a : \"\";\n        message.typeId = (_b = object.typeId) !== null && _b !== void 0 ? _b : \"\";\n        message.versionMajor = (_c = object.versionMajor) !== null && _c !== void 0 ? _c : 0;\n        message.versionMinor = (_d = object.versionMinor) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    },\n};\nfunction createBaseEncodedContent() {\n    return {\n        type: undefined,\n        parameters: {},\n        fallback: undefined,\n        compression: undefined,\n        content: new Uint8Array(),\n    };\n}\nconst EncodedContent = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.type !== undefined) {\n            ContentTypeId.encode(message.type, writer.uint32(10).fork()).ldelim();\n        }\n        Object.entries(message.parameters).forEach(([key, value]) => {\n            EncodedContent_ParametersEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();\n        });\n        if (message.fallback !== undefined) {\n            writer.uint32(26).string(message.fallback);\n        }\n        if (message.compression !== undefined) {\n            writer.uint32(40).int32(message.compression);\n        }\n        if (message.content.length !== 0) {\n            writer.uint32(34).bytes(message.content);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedContent();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = ContentTypeId.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    const entry2 = EncodedContent_ParametersEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.parameters[entry2.key] = entry2.value;\n                    }\n                    break;\n                case 3:\n                    message.fallback = reader.string();\n                    break;\n                case 5:\n                    message.compression = reader.int32();\n                    break;\n                case 4:\n                    message.content = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            type: isSet(object.type)\n                ? ContentTypeId.fromJSON(object.type)\n                : undefined,\n            parameters: isObject(object.parameters)\n                ? Object.entries(object.parameters).reduce((acc, [key, value]) => {\n                    acc[key] = String(value);\n                    return acc;\n                }, {})\n                : {},\n            fallback: isSet(object.fallback) ? String(object.fallback) : undefined,\n            compression: isSet(object.compression)\n                ? compressionFromJSON(object.compression)\n                : undefined,\n            content: isSet(object.content)\n                ? bytesFromBase64(object.content)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined &&\n            (obj.type = message.type\n                ? ContentTypeId.toJSON(message.type)\n                : undefined);\n        obj.parameters = {};\n        if (message.parameters) {\n            Object.entries(message.parameters).forEach(([k, v]) => {\n                obj.parameters[k] = v;\n            });\n        }\n        message.fallback !== undefined && (obj.fallback = message.fallback);\n        message.compression !== undefined &&\n            (obj.compression =\n                message.compression !== undefined\n                    ? compressionToJSON(message.compression)\n                    : undefined);\n        message.content !== undefined &&\n            (obj.content = base64FromBytes(message.content !== undefined ? message.content : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseEncodedContent();\n        message.type =\n            object.type !== undefined && object.type !== null\n                ? ContentTypeId.fromPartial(object.type)\n                : undefined;\n        message.parameters = Object.entries((_a = object.parameters) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        message.fallback = (_b = object.fallback) !== null && _b !== void 0 ? _b : undefined;\n        message.compression = (_c = object.compression) !== null && _c !== void 0 ? _c : undefined;\n        message.content = (_d = object.content) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseEncodedContent_ParametersEntry() {\n    return { key: \"\", value: \"\" };\n}\nconst EncodedContent_ParametersEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedContent_ParametersEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? String(object.value) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseEncodedContent_ParametersEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBasePlaintextEnvelope() {\n    return { v1: undefined, v2: undefined };\n}\nconst PlaintextEnvelope = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.v1 !== undefined) {\n            PlaintextEnvelope_V1.encode(message.v1, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.v2 !== undefined) {\n            PlaintextEnvelope_V2.encode(message.v2, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePlaintextEnvelope();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.v1 = PlaintextEnvelope_V1.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.v2 = PlaintextEnvelope_V2.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            v1: isSet(object.v1)\n                ? PlaintextEnvelope_V1.fromJSON(object.v1)\n                : undefined,\n            v2: isSet(object.v2)\n                ? PlaintextEnvelope_V2.fromJSON(object.v2)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.v1 !== undefined &&\n            (obj.v1 = message.v1\n                ? PlaintextEnvelope_V1.toJSON(message.v1)\n                : undefined);\n        message.v2 !== undefined &&\n            (obj.v2 = message.v2\n                ? PlaintextEnvelope_V2.toJSON(message.v2)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBasePlaintextEnvelope();\n        message.v1 =\n            object.v1 !== undefined && object.v1 !== null\n                ? PlaintextEnvelope_V1.fromPartial(object.v1)\n                : undefined;\n        message.v2 =\n            object.v2 !== undefined && object.v2 !== null\n                ? PlaintextEnvelope_V2.fromPartial(object.v2)\n                : undefined;\n        return message;\n    },\n};\nfunction createBasePlaintextEnvelope_V1() {\n    return { content: new Uint8Array(), idempotencyKey: \"\" };\n}\nconst PlaintextEnvelope_V1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.content.length !== 0) {\n            writer.uint32(10).bytes(message.content);\n        }\n        if (message.idempotencyKey !== \"\") {\n            writer.uint32(18).string(message.idempotencyKey);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePlaintextEnvelope_V1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.content = reader.bytes();\n                    break;\n                case 2:\n                    message.idempotencyKey = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            content: isSet(object.content)\n                ? bytesFromBase64(object.content)\n                : new Uint8Array(),\n            idempotencyKey: isSet(object.idempotencyKey)\n                ? String(object.idempotencyKey)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.content !== undefined &&\n            (obj.content = base64FromBytes(message.content !== undefined ? message.content : new Uint8Array()));\n        message.idempotencyKey !== undefined &&\n            (obj.idempotencyKey = message.idempotencyKey);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBasePlaintextEnvelope_V1();\n        message.content = (_a = object.content) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.idempotencyKey = (_b = object.idempotencyKey) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBasePlaintextEnvelope_V2() {\n    return {\n        idempotencyKey: \"\",\n        content: undefined,\n        request: undefined,\n        reply: undefined,\n    };\n}\nconst PlaintextEnvelope_V2 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.idempotencyKey !== \"\") {\n            writer.uint32(10).string(message.idempotencyKey);\n        }\n        if (message.content !== undefined) {\n            writer.uint32(18).bytes(message.content);\n        }\n        if (message.request !== undefined) {\n            MessageHistoryRequest.encode(message.request, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.reply !== undefined) {\n            MessageHistoryReply.encode(message.reply, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePlaintextEnvelope_V2();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.idempotencyKey = reader.string();\n                    break;\n                case 2:\n                    message.content = reader.bytes();\n                    break;\n                case 3:\n                    message.request = MessageHistoryRequest.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.reply = MessageHistoryReply.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            idempotencyKey: isSet(object.idempotencyKey)\n                ? String(object.idempotencyKey)\n                : \"\",\n            content: isSet(object.content)\n                ? bytesFromBase64(object.content)\n                : undefined,\n            request: isSet(object.request)\n                ? MessageHistoryRequest.fromJSON(object.request)\n                : undefined,\n            reply: isSet(object.reply)\n                ? MessageHistoryReply.fromJSON(object.reply)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.idempotencyKey !== undefined &&\n            (obj.idempotencyKey = message.idempotencyKey);\n        message.content !== undefined &&\n            (obj.content =\n                message.content !== undefined\n                    ? base64FromBytes(message.content)\n                    : undefined);\n        message.request !== undefined &&\n            (obj.request = message.request\n                ? MessageHistoryRequest.toJSON(message.request)\n                : undefined);\n        message.reply !== undefined &&\n            (obj.reply = message.reply\n                ? MessageHistoryReply.toJSON(message.reply)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBasePlaintextEnvelope_V2();\n        message.idempotencyKey = (_a = object.idempotencyKey) !== null && _a !== void 0 ? _a : \"\";\n        message.content = (_b = object.content) !== null && _b !== void 0 ? _b : undefined;\n        message.request =\n            object.request !== undefined && object.request !== null\n                ? MessageHistoryRequest.fromPartial(object.request)\n                : undefined;\n        message.reply =\n            object.reply !== undefined && object.reply !== null\n                ? MessageHistoryReply.fromPartial(object.reply)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMessageHistoryRequest() {\n    return { requestId: \"\", pinCode: \"\" };\n}\nconst MessageHistoryRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.requestId !== \"\") {\n            writer.uint32(10).string(message.requestId);\n        }\n        if (message.pinCode !== \"\") {\n            writer.uint32(18).string(message.pinCode);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageHistoryRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requestId = reader.string();\n                    break;\n                case 2:\n                    message.pinCode = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requestId: isSet(object.requestId) ? String(object.requestId) : \"\",\n            pinCode: isSet(object.pinCode) ? String(object.pinCode) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.requestId !== undefined && (obj.requestId = message.requestId);\n        message.pinCode !== undefined && (obj.pinCode = message.pinCode);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMessageHistoryRequest();\n        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : \"\";\n        message.pinCode = (_b = object.pinCode) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseMessageHistoryReply() {\n    return { requestId: \"\", url: \"\", encryptionKey: undefined };\n}\nconst MessageHistoryReply = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.requestId !== \"\") {\n            writer.uint32(10).string(message.requestId);\n        }\n        if (message.url !== \"\") {\n            writer.uint32(18).string(message.url);\n        }\n        if (message.encryptionKey !== undefined) {\n            MessageHistoryKeyType.encode(message.encryptionKey, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageHistoryReply();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requestId = reader.string();\n                    break;\n                case 2:\n                    message.url = reader.string();\n                    break;\n                case 3:\n                    message.encryptionKey = MessageHistoryKeyType.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requestId: isSet(object.requestId) ? String(object.requestId) : \"\",\n            url: isSet(object.url) ? String(object.url) : \"\",\n            encryptionKey: isSet(object.encryptionKey)\n                ? MessageHistoryKeyType.fromJSON(object.encryptionKey)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.requestId !== undefined && (obj.requestId = message.requestId);\n        message.url !== undefined && (obj.url = message.url);\n        message.encryptionKey !== undefined &&\n            (obj.encryptionKey = message.encryptionKey\n                ? MessageHistoryKeyType.toJSON(message.encryptionKey)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMessageHistoryReply();\n        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : \"\";\n        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : \"\";\n        message.encryptionKey =\n            object.encryptionKey !== undefined && object.encryptionKey !== null\n                ? MessageHistoryKeyType.fromPartial(object.encryptionKey)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMessageHistoryKeyType() {\n    return { chacha20Poly1305: undefined };\n}\nconst MessageHistoryKeyType = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.chacha20Poly1305 !== undefined) {\n            writer.uint32(10).bytes(message.chacha20Poly1305);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMessageHistoryKeyType();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.chacha20Poly1305 = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            chacha20Poly1305: isSet(object.chacha20Poly1305)\n                ? bytesFromBase64(object.chacha20Poly1305)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.chacha20Poly1305 !== undefined &&\n            (obj.chacha20Poly1305 =\n                message.chacha20Poly1305 !== undefined\n                    ? base64FromBytes(message.chacha20Poly1305)\n                    : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMessageHistoryKeyType();\n        message.chacha20Poly1305 = (_a = object.chacha20Poly1305) !== null && _a !== void 0 ? _a : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=content.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/content.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_membership.pb.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_membership.pb.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GroupMembership: () => (/* binding */ GroupMembership),\n/* harmony export */   GroupMembership_MembersEntry: () => (/* binding */ GroupMembership_MembersEntry),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.mls.message_contents\";\nfunction createBaseGroupMembership() {\n    return { members: {} };\n}\nconst GroupMembership = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        Object.entries(message.members).forEach(([key, value]) => {\n            GroupMembership_MembersEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMembership();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    const entry1 = GroupMembership_MembersEntry.decode(reader, reader.uint32());\n                    if (entry1.value !== undefined) {\n                        message.members[entry1.key] = entry1.value;\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            members: isObject(object.members)\n                ? Object.entries(object.members).reduce((acc, [key, value]) => {\n                    acc[key] = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(value);\n                    return acc;\n                }, {})\n                : {},\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        obj.members = {};\n        if (message.members) {\n            Object.entries(message.members).forEach(([k, v]) => {\n                obj.members[k] = v.toString();\n            });\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGroupMembership();\n        message.members = Object.entries((_a = object.members) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    },\n};\nfunction createBaseGroupMembership_MembersEntry() {\n    return { key: \"\", value: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO };\n}\nconst GroupMembership_MembersEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (!message.value.isZero()) {\n            writer.uint32(16).uint64(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMembership_MembersEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.value) : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined &&\n            (obj.value = (message.value || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGroupMembership_MembersEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value =\n            object.value !== undefined && object.value !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.value)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=group_membership.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_membership.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_metadata.pb.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_metadata.pb.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationType: () => (/* binding */ ConversationType),\n/* harmony export */   DmMembers: () => (/* binding */ DmMembers),\n/* harmony export */   GroupMetadataV1: () => (/* binding */ GroupMetadataV1),\n/* harmony export */   Inbox: () => (/* binding */ Inbox),\n/* harmony export */   conversationTypeFromJSON: () => (/* binding */ conversationTypeFromJSON),\n/* harmony export */   conversationTypeToJSON: () => (/* binding */ conversationTypeToJSON),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.mls.message_contents\";\n/** Group immutable metadata */\n/** Defines the type of conversation */\nvar ConversationType;\n(function (ConversationType) {\n    ConversationType[ConversationType[\"CONVERSATION_TYPE_UNSPECIFIED\"] = 0] = \"CONVERSATION_TYPE_UNSPECIFIED\";\n    ConversationType[ConversationType[\"CONVERSATION_TYPE_GROUP\"] = 1] = \"CONVERSATION_TYPE_GROUP\";\n    ConversationType[ConversationType[\"CONVERSATION_TYPE_DM\"] = 2] = \"CONVERSATION_TYPE_DM\";\n    ConversationType[ConversationType[\"CONVERSATION_TYPE_SYNC\"] = 3] = \"CONVERSATION_TYPE_SYNC\";\n    ConversationType[ConversationType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ConversationType || (ConversationType = {}));\nfunction conversationTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"CONVERSATION_TYPE_UNSPECIFIED\":\n            return ConversationType.CONVERSATION_TYPE_UNSPECIFIED;\n        case 1:\n        case \"CONVERSATION_TYPE_GROUP\":\n            return ConversationType.CONVERSATION_TYPE_GROUP;\n        case 2:\n        case \"CONVERSATION_TYPE_DM\":\n            return ConversationType.CONVERSATION_TYPE_DM;\n        case 3:\n        case \"CONVERSATION_TYPE_SYNC\":\n            return ConversationType.CONVERSATION_TYPE_SYNC;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ConversationType.UNRECOGNIZED;\n    }\n}\nfunction conversationTypeToJSON(object) {\n    switch (object) {\n        case ConversationType.CONVERSATION_TYPE_UNSPECIFIED:\n            return \"CONVERSATION_TYPE_UNSPECIFIED\";\n        case ConversationType.CONVERSATION_TYPE_GROUP:\n            return \"CONVERSATION_TYPE_GROUP\";\n        case ConversationType.CONVERSATION_TYPE_DM:\n            return \"CONVERSATION_TYPE_DM\";\n        case ConversationType.CONVERSATION_TYPE_SYNC:\n            return \"CONVERSATION_TYPE_SYNC\";\n        case ConversationType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseGroupMetadataV1() {\n    return {\n        conversationType: 0,\n        creatorAccountAddress: \"\",\n        creatorInboxId: \"\",\n        dmMembers: undefined,\n    };\n}\nconst GroupMetadataV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.conversationType !== 0) {\n            writer.uint32(8).int32(message.conversationType);\n        }\n        if (message.creatorAccountAddress !== \"\") {\n            writer.uint32(18).string(message.creatorAccountAddress);\n        }\n        if (message.creatorInboxId !== \"\") {\n            writer.uint32(26).string(message.creatorInboxId);\n        }\n        if (message.dmMembers !== undefined) {\n            DmMembers.encode(message.dmMembers, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMetadataV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.conversationType = reader.int32();\n                    break;\n                case 2:\n                    message.creatorAccountAddress = reader.string();\n                    break;\n                case 3:\n                    message.creatorInboxId = reader.string();\n                    break;\n                case 4:\n                    message.dmMembers = DmMembers.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            conversationType: isSet(object.conversationType)\n                ? conversationTypeFromJSON(object.conversationType)\n                : 0,\n            creatorAccountAddress: isSet(object.creatorAccountAddress)\n                ? String(object.creatorAccountAddress)\n                : \"\",\n            creatorInboxId: isSet(object.creatorInboxId)\n                ? String(object.creatorInboxId)\n                : \"\",\n            dmMembers: isSet(object.dmMembers)\n                ? DmMembers.fromJSON(object.dmMembers)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.conversationType !== undefined &&\n            (obj.conversationType = conversationTypeToJSON(message.conversationType));\n        message.creatorAccountAddress !== undefined &&\n            (obj.creatorAccountAddress = message.creatorAccountAddress);\n        message.creatorInboxId !== undefined &&\n            (obj.creatorInboxId = message.creatorInboxId);\n        message.dmMembers !== undefined &&\n            (obj.dmMembers = message.dmMembers\n                ? DmMembers.toJSON(message.dmMembers)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseGroupMetadataV1();\n        message.conversationType = (_a = object.conversationType) !== null && _a !== void 0 ? _a : 0;\n        message.creatorAccountAddress = (_b = object.creatorAccountAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.creatorInboxId = (_c = object.creatorInboxId) !== null && _c !== void 0 ? _c : \"\";\n        message.dmMembers =\n            object.dmMembers !== undefined && object.dmMembers !== null\n                ? DmMembers.fromPartial(object.dmMembers)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseInbox() {\n    return { inboxId: \"\" };\n}\nconst Inbox = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.inboxId !== \"\") {\n            writer.uint32(10).string(message.inboxId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInbox();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inboxId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseInbox();\n        message.inboxId = (_a = object.inboxId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseDmMembers() {\n    return { dmMemberOne: undefined, dmMemberTwo: undefined };\n}\nconst DmMembers = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.dmMemberOne !== undefined) {\n            Inbox.encode(message.dmMemberOne, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.dmMemberTwo !== undefined) {\n            Inbox.encode(message.dmMemberTwo, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDmMembers();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.dmMemberOne = Inbox.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.dmMemberTwo = Inbox.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            dmMemberOne: isSet(object.dmMemberOne)\n                ? Inbox.fromJSON(object.dmMemberOne)\n                : undefined,\n            dmMemberTwo: isSet(object.dmMemberTwo)\n                ? Inbox.fromJSON(object.dmMemberTwo)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.dmMemberOne !== undefined &&\n            (obj.dmMemberOne = message.dmMemberOne\n                ? Inbox.toJSON(message.dmMemberOne)\n                : undefined);\n        message.dmMemberTwo !== undefined &&\n            (obj.dmMemberTwo = message.dmMemberTwo\n                ? Inbox.toJSON(message.dmMemberTwo)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseDmMembers();\n        message.dmMemberOne =\n            object.dmMemberOne !== undefined && object.dmMemberOne !== null\n                ? Inbox.fromPartial(object.dmMemberOne)\n                : undefined;\n        message.dmMemberTwo =\n            object.dmMemberTwo !== undefined && object.dmMemberTwo !== null\n                ? Inbox.fromPartial(object.dmMemberTwo)\n                : undefined;\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=group_metadata.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_metadata.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_mutable_metadata.pb.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_mutable_metadata.pb.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GroupMutableMetadataV1: () => (/* binding */ GroupMutableMetadataV1),\n/* harmony export */   GroupMutableMetadataV1_AttributesEntry: () => (/* binding */ GroupMutableMetadataV1_AttributesEntry),\n/* harmony export */   Inboxes: () => (/* binding */ Inboxes),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.mls.message_contents\";\nfunction createBaseGroupMutableMetadataV1() {\n    return { attributes: {}, adminList: undefined, superAdminList: undefined };\n}\nconst GroupMutableMetadataV1 = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        Object.entries(message.attributes).forEach(([key, value]) => {\n            GroupMutableMetadataV1_AttributesEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();\n        });\n        if (message.adminList !== undefined) {\n            Inboxes.encode(message.adminList, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.superAdminList !== undefined) {\n            Inboxes.encode(message.superAdminList, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMutableMetadataV1();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    const entry1 = GroupMutableMetadataV1_AttributesEntry.decode(reader, reader.uint32());\n                    if (entry1.value !== undefined) {\n                        message.attributes[entry1.key] = entry1.value;\n                    }\n                    break;\n                case 2:\n                    message.adminList = Inboxes.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.superAdminList = Inboxes.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            attributes: isObject(object.attributes)\n                ? Object.entries(object.attributes).reduce((acc, [key, value]) => {\n                    acc[key] = String(value);\n                    return acc;\n                }, {})\n                : {},\n            adminList: isSet(object.adminList)\n                ? Inboxes.fromJSON(object.adminList)\n                : undefined,\n            superAdminList: isSet(object.superAdminList)\n                ? Inboxes.fromJSON(object.superAdminList)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        obj.attributes = {};\n        if (message.attributes) {\n            Object.entries(message.attributes).forEach(([k, v]) => {\n                obj.attributes[k] = v;\n            });\n        }\n        message.adminList !== undefined &&\n            (obj.adminList = message.adminList\n                ? Inboxes.toJSON(message.adminList)\n                : undefined);\n        message.superAdminList !== undefined &&\n            (obj.superAdminList = message.superAdminList\n                ? Inboxes.toJSON(message.superAdminList)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGroupMutableMetadataV1();\n        message.attributes = Object.entries((_a = object.attributes) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        message.adminList =\n            object.adminList !== undefined && object.adminList !== null\n                ? Inboxes.fromPartial(object.adminList)\n                : undefined;\n        message.superAdminList =\n            object.superAdminList !== undefined && object.superAdminList !== null\n                ? Inboxes.fromPartial(object.superAdminList)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseGroupMutableMetadataV1_AttributesEntry() {\n    return { key: \"\", value: \"\" };\n}\nconst GroupMutableMetadataV1_AttributesEntry = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMutableMetadataV1_AttributesEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? String(object.value) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGroupMutableMetadataV1_AttributesEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseInboxes() {\n    return { inboxIds: [] };\n}\nconst Inboxes = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        for (const v of message.inboxIds) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInboxes();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inboxIds.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inboxIds: Array.isArray(object === null || object === void 0 ? void 0 : object.inboxIds)\n                ? object.inboxIds.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.inboxIds) {\n            obj.inboxIds = message.inboxIds.map((e) => e);\n        }\n        else {\n            obj.inboxIds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseInboxes();\n        message.inboxIds = ((_a = object.inboxIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=group_mutable_metadata.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/group_mutable_metadata.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/transcript_messages.pb.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/transcript_messages.pb.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GroupMembershipChanges: () => (/* binding */ GroupMembershipChanges),\n/* harmony export */   GroupUpdated: () => (/* binding */ GroupUpdated),\n/* harmony export */   GroupUpdated_Inbox: () => (/* binding */ GroupUpdated_Inbox),\n/* harmony export */   GroupUpdated_MetadataFieldChange: () => (/* binding */ GroupUpdated_MetadataFieldChange),\n/* harmony export */   MembershipChange: () => (/* binding */ MembershipChange),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */\n\n\nconst protobufPackage = \"xmtp.mls.message_contents\";\nfunction createBaseMembershipChange() {\n    return {\n        installationIds: [],\n        accountAddress: \"\",\n        initiatedByAccountAddress: \"\",\n    };\n}\nconst MembershipChange = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        for (const v of message.installationIds) {\n            writer.uint32(10).bytes(v);\n        }\n        if (message.accountAddress !== \"\") {\n            writer.uint32(18).string(message.accountAddress);\n        }\n        if (message.initiatedByAccountAddress !== \"\") {\n            writer.uint32(26).string(message.initiatedByAccountAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMembershipChange();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.installationIds.push(reader.bytes());\n                    break;\n                case 2:\n                    message.accountAddress = reader.string();\n                    break;\n                case 3:\n                    message.initiatedByAccountAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            installationIds: Array.isArray(object === null || object === void 0 ? void 0 : object.installationIds)\n                ? object.installationIds.map((e) => bytesFromBase64(e))\n                : [],\n            accountAddress: isSet(object.accountAddress)\n                ? String(object.accountAddress)\n                : \"\",\n            initiatedByAccountAddress: isSet(object.initiatedByAccountAddress)\n                ? String(object.initiatedByAccountAddress)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.installationIds) {\n            obj.installationIds = message.installationIds.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.installationIds = [];\n        }\n        message.accountAddress !== undefined &&\n            (obj.accountAddress = message.accountAddress);\n        message.initiatedByAccountAddress !== undefined &&\n            (obj.initiatedByAccountAddress = message.initiatedByAccountAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMembershipChange();\n        message.installationIds = ((_a = object.installationIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        message.accountAddress = (_b = object.accountAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.initiatedByAccountAddress = (_c = object.initiatedByAccountAddress) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseGroupMembershipChanges() {\n    return {\n        membersAdded: [],\n        membersRemoved: [],\n        installationsAdded: [],\n        installationsRemoved: [],\n    };\n}\nconst GroupMembershipChanges = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        for (const v of message.membersAdded) {\n            MembershipChange.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.membersRemoved) {\n            MembershipChange.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.installationsAdded) {\n            MembershipChange.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.installationsRemoved) {\n            MembershipChange.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupMembershipChanges();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.membersAdded.push(MembershipChange.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.membersRemoved.push(MembershipChange.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.installationsAdded.push(MembershipChange.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.installationsRemoved.push(MembershipChange.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            membersAdded: Array.isArray(object === null || object === void 0 ? void 0 : object.membersAdded)\n                ? object.membersAdded.map((e) => MembershipChange.fromJSON(e))\n                : [],\n            membersRemoved: Array.isArray(object === null || object === void 0 ? void 0 : object.membersRemoved)\n                ? object.membersRemoved.map((e) => MembershipChange.fromJSON(e))\n                : [],\n            installationsAdded: Array.isArray(object === null || object === void 0 ? void 0 : object.installationsAdded)\n                ? object.installationsAdded.map((e) => MembershipChange.fromJSON(e))\n                : [],\n            installationsRemoved: Array.isArray(object === null || object === void 0 ? void 0 : object.installationsRemoved)\n                ? object.installationsRemoved.map((e) => MembershipChange.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.membersAdded) {\n            obj.membersAdded = message.membersAdded.map((e) => e ? MembershipChange.toJSON(e) : undefined);\n        }\n        else {\n            obj.membersAdded = [];\n        }\n        if (message.membersRemoved) {\n            obj.membersRemoved = message.membersRemoved.map((e) => e ? MembershipChange.toJSON(e) : undefined);\n        }\n        else {\n            obj.membersRemoved = [];\n        }\n        if (message.installationsAdded) {\n            obj.installationsAdded = message.installationsAdded.map((e) => e ? MembershipChange.toJSON(e) : undefined);\n        }\n        else {\n            obj.installationsAdded = [];\n        }\n        if (message.installationsRemoved) {\n            obj.installationsRemoved = message.installationsRemoved.map((e) => e ? MembershipChange.toJSON(e) : undefined);\n        }\n        else {\n            obj.installationsRemoved = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseGroupMembershipChanges();\n        message.membersAdded =\n            ((_a = object.membersAdded) === null || _a === void 0 ? void 0 : _a.map((e) => MembershipChange.fromPartial(e))) || [];\n        message.membersRemoved =\n            ((_b = object.membersRemoved) === null || _b === void 0 ? void 0 : _b.map((e) => MembershipChange.fromPartial(e))) || [];\n        message.installationsAdded =\n            ((_c = object.installationsAdded) === null || _c === void 0 ? void 0 : _c.map((e) => MembershipChange.fromPartial(e))) ||\n                [];\n        message.installationsRemoved =\n            ((_d = object.installationsRemoved) === null || _d === void 0 ? void 0 : _d.map((e) => MembershipChange.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGroupUpdated() {\n    return {\n        initiatedByInboxId: \"\",\n        addedInboxes: [],\n        removedInboxes: [],\n        metadataFieldChanges: [],\n    };\n}\nconst GroupUpdated = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.initiatedByInboxId !== \"\") {\n            writer.uint32(10).string(message.initiatedByInboxId);\n        }\n        for (const v of message.addedInboxes) {\n            GroupUpdated_Inbox.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.removedInboxes) {\n            GroupUpdated_Inbox.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.metadataFieldChanges) {\n            GroupUpdated_MetadataFieldChange.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupUpdated();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.initiatedByInboxId = reader.string();\n                    break;\n                case 2:\n                    message.addedInboxes.push(GroupUpdated_Inbox.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.removedInboxes.push(GroupUpdated_Inbox.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.metadataFieldChanges.push(GroupUpdated_MetadataFieldChange.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            initiatedByInboxId: isSet(object.initiatedByInboxId)\n                ? String(object.initiatedByInboxId)\n                : \"\",\n            addedInboxes: Array.isArray(object === null || object === void 0 ? void 0 : object.addedInboxes)\n                ? object.addedInboxes.map((e) => GroupUpdated_Inbox.fromJSON(e))\n                : [],\n            removedInboxes: Array.isArray(object === null || object === void 0 ? void 0 : object.removedInboxes)\n                ? object.removedInboxes.map((e) => GroupUpdated_Inbox.fromJSON(e))\n                : [],\n            metadataFieldChanges: Array.isArray(object === null || object === void 0 ? void 0 : object.metadataFieldChanges)\n                ? object.metadataFieldChanges.map((e) => GroupUpdated_MetadataFieldChange.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.initiatedByInboxId !== undefined &&\n            (obj.initiatedByInboxId = message.initiatedByInboxId);\n        if (message.addedInboxes) {\n            obj.addedInboxes = message.addedInboxes.map((e) => e ? GroupUpdated_Inbox.toJSON(e) : undefined);\n        }\n        else {\n            obj.addedInboxes = [];\n        }\n        if (message.removedInboxes) {\n            obj.removedInboxes = message.removedInboxes.map((e) => e ? GroupUpdated_Inbox.toJSON(e) : undefined);\n        }\n        else {\n            obj.removedInboxes = [];\n        }\n        if (message.metadataFieldChanges) {\n            obj.metadataFieldChanges = message.metadataFieldChanges.map((e) => e ? GroupUpdated_MetadataFieldChange.toJSON(e) : undefined);\n        }\n        else {\n            obj.metadataFieldChanges = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseGroupUpdated();\n        message.initiatedByInboxId = (_a = object.initiatedByInboxId) !== null && _a !== void 0 ? _a : \"\";\n        message.addedInboxes =\n            ((_b = object.addedInboxes) === null || _b === void 0 ? void 0 : _b.map((e) => GroupUpdated_Inbox.fromPartial(e))) || [];\n        message.removedInboxes =\n            ((_c = object.removedInboxes) === null || _c === void 0 ? void 0 : _c.map((e) => GroupUpdated_Inbox.fromPartial(e))) ||\n                [];\n        message.metadataFieldChanges =\n            ((_d = object.metadataFieldChanges) === null || _d === void 0 ? void 0 : _d.map((e) => GroupUpdated_MetadataFieldChange.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGroupUpdated_Inbox() {\n    return { inboxId: \"\" };\n}\nconst GroupUpdated_Inbox = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.inboxId !== \"\") {\n            writer.uint32(10).string(message.inboxId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupUpdated_Inbox();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inboxId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGroupUpdated_Inbox();\n        message.inboxId = (_a = object.inboxId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseGroupUpdated_MetadataFieldChange() {\n    return { fieldName: \"\", oldValue: undefined, newValue: undefined };\n}\nconst GroupUpdated_MetadataFieldChange = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Writer.create()) {\n        if (message.fieldName !== \"\") {\n            writer.uint32(10).string(message.fieldName);\n        }\n        if (message.oldValue !== undefined) {\n            writer.uint32(18).string(message.oldValue);\n        }\n        if (message.newValue !== undefined) {\n            writer.uint32(26).string(message.newValue);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroupUpdated_MetadataFieldChange();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.fieldName = reader.string();\n                    break;\n                case 2:\n                    message.oldValue = reader.string();\n                    break;\n                case 3:\n                    message.newValue = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            fieldName: isSet(object.fieldName) ? String(object.fieldName) : \"\",\n            oldValue: isSet(object.oldValue) ? String(object.oldValue) : undefined,\n            newValue: isSet(object.newValue) ? String(object.newValue) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.fieldName !== undefined && (obj.fieldName = message.fieldName);\n        message.oldValue !== undefined && (obj.oldValue = message.oldValue);\n        message.newValue !== undefined && (obj.newValue = message.newValue);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseGroupUpdated_MetadataFieldChange();\n        message.fieldName = (_a = object.fieldName) !== null && _a !== void 0 ? _a : \"\";\n        message.oldValue = (_b = object.oldValue) !== null && _b !== void 0 ? _b : undefined;\n        message.newValue = (_c = object.newValue) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=transcript_messages.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls/message_contents/transcript_messages.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls_validation/v1/service.pb.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/mls_validation/v1/service.pb.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GetAssociationStateRequest: () => (/* binding */ GetAssociationStateRequest),\n/* harmony export */   GetAssociationStateResponse: () => (/* binding */ GetAssociationStateResponse),\n/* harmony export */   ValidateGroupMessagesRequest: () => (/* binding */ ValidateGroupMessagesRequest),\n/* harmony export */   ValidateGroupMessagesRequest_GroupMessage: () => (/* binding */ ValidateGroupMessagesRequest_GroupMessage),\n/* harmony export */   ValidateGroupMessagesResponse: () => (/* binding */ ValidateGroupMessagesResponse),\n/* harmony export */   ValidateGroupMessagesResponse_ValidationResponse: () => (/* binding */ ValidateGroupMessagesResponse_ValidationResponse),\n/* harmony export */   ValidateInboxIdKeyPackagesRequest: () => (/* binding */ ValidateInboxIdKeyPackagesRequest),\n/* harmony export */   ValidateInboxIdKeyPackagesRequest_KeyPackage: () => (/* binding */ ValidateInboxIdKeyPackagesRequest_KeyPackage),\n/* harmony export */   ValidateInboxIdKeyPackagesResponse: () => (/* binding */ ValidateInboxIdKeyPackagesResponse),\n/* harmony export */   ValidateInboxIdKeyPackagesResponse_Response: () => (/* binding */ ValidateInboxIdKeyPackagesResponse_Response),\n/* harmony export */   ValidateInboxIdsRequest: () => (/* binding */ ValidateInboxIdsRequest),\n/* harmony export */   ValidateInboxIdsRequest_ValidationRequest: () => (/* binding */ ValidateInboxIdsRequest_ValidationRequest),\n/* harmony export */   ValidateInboxIdsResponse: () => (/* binding */ ValidateInboxIdsResponse),\n/* harmony export */   ValidateInboxIdsResponse_ValidationResponse: () => (/* binding */ ValidateInboxIdsResponse_ValidationResponse),\n/* harmony export */   ValidateKeyPackagesRequest: () => (/* binding */ ValidateKeyPackagesRequest),\n/* harmony export */   ValidateKeyPackagesRequest_KeyPackage: () => (/* binding */ ValidateKeyPackagesRequest_KeyPackage),\n/* harmony export */   ValidateKeyPackagesResponse: () => (/* binding */ ValidateKeyPackagesResponse),\n/* harmony export */   ValidateKeyPackagesResponse_ValidationResponse: () => (/* binding */ ValidateKeyPackagesResponse_ValidationResponse),\n/* harmony export */   ValidationApiClientImpl: () => (/* binding */ ValidationApiClientImpl),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../identity/credential.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/credential.pb.js\");\n/* harmony import */ var _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../identity/associations/association.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/associations/association.pb.js\");\n/* harmony import */ var _identity_api_v1_identity_pb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../identity/api/v1/identity.pb */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/identity/api/v1/identity.pb.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__);\n/* eslint-disable */\n\n\n\n\n\nconst protobufPackage = \"xmtp.mls_validation.v1\";\nfunction createBaseValidateInboxIdKeyPackagesRequest() {\n    return { keyPackages: [] };\n}\nconst ValidateInboxIdKeyPackagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        for (const v of message.keyPackages) {\n            ValidateInboxIdKeyPackagesRequest_KeyPackage.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateInboxIdKeyPackagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyPackages.push(ValidateInboxIdKeyPackagesRequest_KeyPackage.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyPackages: Array.isArray(object === null || object === void 0 ? void 0 : object.keyPackages)\n                ? object.keyPackages.map((e) => ValidateInboxIdKeyPackagesRequest_KeyPackage.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.keyPackages) {\n            obj.keyPackages = message.keyPackages.map((e) => e ? ValidateInboxIdKeyPackagesRequest_KeyPackage.toJSON(e) : undefined);\n        }\n        else {\n            obj.keyPackages = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValidateInboxIdKeyPackagesRequest();\n        message.keyPackages =\n            ((_a = object.keyPackages) === null || _a === void 0 ? void 0 : _a.map((e) => ValidateInboxIdKeyPackagesRequest_KeyPackage.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseValidateInboxIdKeyPackagesRequest_KeyPackage() {\n    return {\n        keyPackageBytesTlsSerialized: new Uint8Array(),\n        isInboxIdCredential: false,\n    };\n}\nconst ValidateInboxIdKeyPackagesRequest_KeyPackage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.keyPackageBytesTlsSerialized.length !== 0) {\n            writer.uint32(10).bytes(message.keyPackageBytesTlsSerialized);\n        }\n        if (message.isInboxIdCredential === true) {\n            writer.uint32(16).bool(message.isInboxIdCredential);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateInboxIdKeyPackagesRequest_KeyPackage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyPackageBytesTlsSerialized = reader.bytes();\n                    break;\n                case 2:\n                    message.isInboxIdCredential = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyPackageBytesTlsSerialized: isSet(object.keyPackageBytesTlsSerialized)\n                ? bytesFromBase64(object.keyPackageBytesTlsSerialized)\n                : new Uint8Array(),\n            isInboxIdCredential: isSet(object.isInboxIdCredential)\n                ? Boolean(object.isInboxIdCredential)\n                : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyPackageBytesTlsSerialized !== undefined &&\n            (obj.keyPackageBytesTlsSerialized = base64FromBytes(message.keyPackageBytesTlsSerialized !== undefined\n                ? message.keyPackageBytesTlsSerialized\n                : new Uint8Array()));\n        message.isInboxIdCredential !== undefined &&\n            (obj.isInboxIdCredential = message.isInboxIdCredential);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseValidateInboxIdKeyPackagesRequest_KeyPackage();\n        message.keyPackageBytesTlsSerialized =\n            (_a = object.keyPackageBytesTlsSerialized) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.isInboxIdCredential = (_b = object.isInboxIdCredential) !== null && _b !== void 0 ? _b : false;\n        return message;\n    },\n};\nfunction createBaseValidateInboxIdKeyPackagesResponse() {\n    return { responses: [] };\n}\nconst ValidateInboxIdKeyPackagesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        for (const v of message.responses) {\n            ValidateInboxIdKeyPackagesResponse_Response.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateInboxIdKeyPackagesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(ValidateInboxIdKeyPackagesResponse_Response.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => ValidateInboxIdKeyPackagesResponse_Response.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? ValidateInboxIdKeyPackagesResponse_Response.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValidateInboxIdKeyPackagesResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => ValidateInboxIdKeyPackagesResponse_Response.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseValidateInboxIdKeyPackagesResponse_Response() {\n    return {\n        isOk: false,\n        errorMessage: \"\",\n        credential: undefined,\n        installationPublicKey: new Uint8Array(),\n        expiration: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n    };\n}\nconst ValidateInboxIdKeyPackagesResponse_Response = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.isOk === true) {\n            writer.uint32(8).bool(message.isOk);\n        }\n        if (message.errorMessage !== \"\") {\n            writer.uint32(18).string(message.errorMessage);\n        }\n        if (message.credential !== undefined) {\n            _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.encode(message.credential, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.installationPublicKey.length !== 0) {\n            writer.uint32(34).bytes(message.installationPublicKey);\n        }\n        if (!message.expiration.isZero()) {\n            writer.uint32(40).uint64(message.expiration);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateInboxIdKeyPackagesResponse_Response();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.isOk = reader.bool();\n                    break;\n                case 2:\n                    message.errorMessage = reader.string();\n                    break;\n                case 3:\n                    message.credential = _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.installationPublicKey = reader.bytes();\n                    break;\n                case 5:\n                    message.expiration = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            isOk: isSet(object.isOk) ? Boolean(object.isOk) : false,\n            errorMessage: isSet(object.errorMessage)\n                ? String(object.errorMessage)\n                : \"\",\n            credential: isSet(object.credential)\n                ? _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.fromJSON(object.credential)\n                : undefined,\n            installationPublicKey: isSet(object.installationPublicKey)\n                ? bytesFromBase64(object.installationPublicKey)\n                : new Uint8Array(),\n            expiration: isSet(object.expiration)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.expiration)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.isOk !== undefined && (obj.isOk = message.isOk);\n        message.errorMessage !== undefined &&\n            (obj.errorMessage = message.errorMessage);\n        message.credential !== undefined &&\n            (obj.credential = message.credential\n                ? _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.toJSON(message.credential)\n                : undefined);\n        message.installationPublicKey !== undefined &&\n            (obj.installationPublicKey = base64FromBytes(message.installationPublicKey !== undefined\n                ? message.installationPublicKey\n                : new Uint8Array()));\n        message.expiration !== undefined &&\n            (obj.expiration = (message.expiration || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseValidateInboxIdKeyPackagesResponse_Response();\n        message.isOk = (_a = object.isOk) !== null && _a !== void 0 ? _a : false;\n        message.errorMessage = (_b = object.errorMessage) !== null && _b !== void 0 ? _b : \"\";\n        message.credential =\n            object.credential !== undefined && object.credential !== null\n                ? _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.fromPartial(object.credential)\n                : undefined;\n        message.installationPublicKey =\n            (_c = object.installationPublicKey) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.expiration =\n            object.expiration !== undefined && object.expiration !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.expiration)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseValidateKeyPackagesRequest() {\n    return { keyPackages: [] };\n}\nconst ValidateKeyPackagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        for (const v of message.keyPackages) {\n            ValidateKeyPackagesRequest_KeyPackage.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateKeyPackagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyPackages.push(ValidateKeyPackagesRequest_KeyPackage.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyPackages: Array.isArray(object === null || object === void 0 ? void 0 : object.keyPackages)\n                ? object.keyPackages.map((e) => ValidateKeyPackagesRequest_KeyPackage.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.keyPackages) {\n            obj.keyPackages = message.keyPackages.map((e) => e ? ValidateKeyPackagesRequest_KeyPackage.toJSON(e) : undefined);\n        }\n        else {\n            obj.keyPackages = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValidateKeyPackagesRequest();\n        message.keyPackages =\n            ((_a = object.keyPackages) === null || _a === void 0 ? void 0 : _a.map((e) => ValidateKeyPackagesRequest_KeyPackage.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseValidateKeyPackagesRequest_KeyPackage() {\n    return {\n        keyPackageBytesTlsSerialized: new Uint8Array(),\n        isInboxIdCredential: false,\n    };\n}\nconst ValidateKeyPackagesRequest_KeyPackage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.keyPackageBytesTlsSerialized.length !== 0) {\n            writer.uint32(10).bytes(message.keyPackageBytesTlsSerialized);\n        }\n        if (message.isInboxIdCredential === true) {\n            writer.uint32(16).bool(message.isInboxIdCredential);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateKeyPackagesRequest_KeyPackage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.keyPackageBytesTlsSerialized = reader.bytes();\n                    break;\n                case 2:\n                    message.isInboxIdCredential = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            keyPackageBytesTlsSerialized: isSet(object.keyPackageBytesTlsSerialized)\n                ? bytesFromBase64(object.keyPackageBytesTlsSerialized)\n                : new Uint8Array(),\n            isInboxIdCredential: isSet(object.isInboxIdCredential)\n                ? Boolean(object.isInboxIdCredential)\n                : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.keyPackageBytesTlsSerialized !== undefined &&\n            (obj.keyPackageBytesTlsSerialized = base64FromBytes(message.keyPackageBytesTlsSerialized !== undefined\n                ? message.keyPackageBytesTlsSerialized\n                : new Uint8Array()));\n        message.isInboxIdCredential !== undefined &&\n            (obj.isInboxIdCredential = message.isInboxIdCredential);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseValidateKeyPackagesRequest_KeyPackage();\n        message.keyPackageBytesTlsSerialized =\n            (_a = object.keyPackageBytesTlsSerialized) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.isInboxIdCredential = (_b = object.isInboxIdCredential) !== null && _b !== void 0 ? _b : false;\n        return message;\n    },\n};\nfunction createBaseValidateKeyPackagesResponse() {\n    return { responses: [] };\n}\nconst ValidateKeyPackagesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        for (const v of message.responses) {\n            ValidateKeyPackagesResponse_ValidationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateKeyPackagesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(ValidateKeyPackagesResponse_ValidationResponse.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => ValidateKeyPackagesResponse_ValidationResponse.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? ValidateKeyPackagesResponse_ValidationResponse.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValidateKeyPackagesResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => ValidateKeyPackagesResponse_ValidationResponse.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseValidateKeyPackagesResponse_ValidationResponse() {\n    return {\n        isOk: false,\n        errorMessage: \"\",\n        installationId: new Uint8Array(),\n        accountAddress: \"\",\n        credentialIdentityBytes: new Uint8Array(),\n        expiration: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n    };\n}\nconst ValidateKeyPackagesResponse_ValidationResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.isOk === true) {\n            writer.uint32(8).bool(message.isOk);\n        }\n        if (message.errorMessage !== \"\") {\n            writer.uint32(18).string(message.errorMessage);\n        }\n        if (message.installationId.length !== 0) {\n            writer.uint32(26).bytes(message.installationId);\n        }\n        if (message.accountAddress !== \"\") {\n            writer.uint32(34).string(message.accountAddress);\n        }\n        if (message.credentialIdentityBytes.length !== 0) {\n            writer.uint32(42).bytes(message.credentialIdentityBytes);\n        }\n        if (!message.expiration.isZero()) {\n            writer.uint32(48).uint64(message.expiration);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateKeyPackagesResponse_ValidationResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.isOk = reader.bool();\n                    break;\n                case 2:\n                    message.errorMessage = reader.string();\n                    break;\n                case 3:\n                    message.installationId = reader.bytes();\n                    break;\n                case 4:\n                    message.accountAddress = reader.string();\n                    break;\n                case 5:\n                    message.credentialIdentityBytes = reader.bytes();\n                    break;\n                case 6:\n                    message.expiration = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            isOk: isSet(object.isOk) ? Boolean(object.isOk) : false,\n            errorMessage: isSet(object.errorMessage)\n                ? String(object.errorMessage)\n                : \"\",\n            installationId: isSet(object.installationId)\n                ? bytesFromBase64(object.installationId)\n                : new Uint8Array(),\n            accountAddress: isSet(object.accountAddress)\n                ? String(object.accountAddress)\n                : \"\",\n            credentialIdentityBytes: isSet(object.credentialIdentityBytes)\n                ? bytesFromBase64(object.credentialIdentityBytes)\n                : new Uint8Array(),\n            expiration: isSet(object.expiration)\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.expiration)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.isOk !== undefined && (obj.isOk = message.isOk);\n        message.errorMessage !== undefined &&\n            (obj.errorMessage = message.errorMessage);\n        message.installationId !== undefined &&\n            (obj.installationId = base64FromBytes(message.installationId !== undefined\n                ? message.installationId\n                : new Uint8Array()));\n        message.accountAddress !== undefined &&\n            (obj.accountAddress = message.accountAddress);\n        message.credentialIdentityBytes !== undefined &&\n            (obj.credentialIdentityBytes = base64FromBytes(message.credentialIdentityBytes !== undefined\n                ? message.credentialIdentityBytes\n                : new Uint8Array()));\n        message.expiration !== undefined &&\n            (obj.expiration = (message.expiration || long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseValidateKeyPackagesResponse_ValidationResponse();\n        message.isOk = (_a = object.isOk) !== null && _a !== void 0 ? _a : false;\n        message.errorMessage = (_b = object.errorMessage) !== null && _b !== void 0 ? _b : \"\";\n        message.installationId = (_c = object.installationId) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.accountAddress = (_d = object.accountAddress) !== null && _d !== void 0 ? _d : \"\";\n        message.credentialIdentityBytes =\n            (_e = object.credentialIdentityBytes) !== null && _e !== void 0 ? _e : new Uint8Array();\n        message.expiration =\n            object.expiration !== undefined && object.expiration !== null\n                ? long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromValue(object.expiration)\n                : long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UZERO;\n        return message;\n    },\n};\nfunction createBaseValidateGroupMessagesRequest() {\n    return { groupMessages: [] };\n}\nconst ValidateGroupMessagesRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        for (const v of message.groupMessages) {\n            ValidateGroupMessagesRequest_GroupMessage.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateGroupMessagesRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.groupMessages.push(ValidateGroupMessagesRequest_GroupMessage.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            groupMessages: Array.isArray(object === null || object === void 0 ? void 0 : object.groupMessages)\n                ? object.groupMessages.map((e) => ValidateGroupMessagesRequest_GroupMessage.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.groupMessages) {\n            obj.groupMessages = message.groupMessages.map((e) => e ? ValidateGroupMessagesRequest_GroupMessage.toJSON(e) : undefined);\n        }\n        else {\n            obj.groupMessages = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValidateGroupMessagesRequest();\n        message.groupMessages =\n            ((_a = object.groupMessages) === null || _a === void 0 ? void 0 : _a.map((e) => ValidateGroupMessagesRequest_GroupMessage.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseValidateGroupMessagesRequest_GroupMessage() {\n    return { groupMessageBytesTlsSerialized: new Uint8Array() };\n}\nconst ValidateGroupMessagesRequest_GroupMessage = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.groupMessageBytesTlsSerialized.length !== 0) {\n            writer.uint32(10).bytes(message.groupMessageBytesTlsSerialized);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateGroupMessagesRequest_GroupMessage();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.groupMessageBytesTlsSerialized = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            groupMessageBytesTlsSerialized: isSet(object.groupMessageBytesTlsSerialized)\n                ? bytesFromBase64(object.groupMessageBytesTlsSerialized)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.groupMessageBytesTlsSerialized !== undefined &&\n            (obj.groupMessageBytesTlsSerialized = base64FromBytes(message.groupMessageBytesTlsSerialized !== undefined\n                ? message.groupMessageBytesTlsSerialized\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValidateGroupMessagesRequest_GroupMessage();\n        message.groupMessageBytesTlsSerialized =\n            (_a = object.groupMessageBytesTlsSerialized) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseValidateGroupMessagesResponse() {\n    return { responses: [] };\n}\nconst ValidateGroupMessagesResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        for (const v of message.responses) {\n            ValidateGroupMessagesResponse_ValidationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateGroupMessagesResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(ValidateGroupMessagesResponse_ValidationResponse.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => ValidateGroupMessagesResponse_ValidationResponse.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e\n                ? ValidateGroupMessagesResponse_ValidationResponse.toJSON(e)\n                : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValidateGroupMessagesResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => ValidateGroupMessagesResponse_ValidationResponse.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseValidateGroupMessagesResponse_ValidationResponse() {\n    return { isOk: false, errorMessage: \"\", groupId: \"\" };\n}\nconst ValidateGroupMessagesResponse_ValidationResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.isOk === true) {\n            writer.uint32(8).bool(message.isOk);\n        }\n        if (message.errorMessage !== \"\") {\n            writer.uint32(18).string(message.errorMessage);\n        }\n        if (message.groupId !== \"\") {\n            writer.uint32(26).string(message.groupId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateGroupMessagesResponse_ValidationResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.isOk = reader.bool();\n                    break;\n                case 2:\n                    message.errorMessage = reader.string();\n                    break;\n                case 3:\n                    message.groupId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            isOk: isSet(object.isOk) ? Boolean(object.isOk) : false,\n            errorMessage: isSet(object.errorMessage)\n                ? String(object.errorMessage)\n                : \"\",\n            groupId: isSet(object.groupId) ? String(object.groupId) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.isOk !== undefined && (obj.isOk = message.isOk);\n        message.errorMessage !== undefined &&\n            (obj.errorMessage = message.errorMessage);\n        message.groupId !== undefined && (obj.groupId = message.groupId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseValidateGroupMessagesResponse_ValidationResponse();\n        message.isOk = (_a = object.isOk) !== null && _a !== void 0 ? _a : false;\n        message.errorMessage = (_b = object.errorMessage) !== null && _b !== void 0 ? _b : \"\";\n        message.groupId = (_c = object.groupId) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseGetAssociationStateRequest() {\n    return { oldUpdates: [], newUpdates: [] };\n}\nconst GetAssociationStateRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        for (const v of message.oldUpdates) {\n            _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.newUpdates) {\n            _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetAssociationStateRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.oldUpdates.push(_identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.newUpdates.push(_identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            oldUpdates: Array.isArray(object === null || object === void 0 ? void 0 : object.oldUpdates)\n                ? object.oldUpdates.map((e) => _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromJSON(e))\n                : [],\n            newUpdates: Array.isArray(object === null || object === void 0 ? void 0 : object.newUpdates)\n                ? object.newUpdates.map((e) => _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.oldUpdates) {\n            obj.oldUpdates = message.oldUpdates.map((e) => e ? _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.toJSON(e) : undefined);\n        }\n        else {\n            obj.oldUpdates = [];\n        }\n        if (message.newUpdates) {\n            obj.newUpdates = message.newUpdates.map((e) => e ? _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.toJSON(e) : undefined);\n        }\n        else {\n            obj.newUpdates = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseGetAssociationStateRequest();\n        message.oldUpdates =\n            ((_a = object.oldUpdates) === null || _a === void 0 ? void 0 : _a.map((e) => _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromPartial(e))) || [];\n        message.newUpdates =\n            ((_b = object.newUpdates) === null || _b === void 0 ? void 0 : _b.map((e) => _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseGetAssociationStateResponse() {\n    return { associationState: undefined, stateDiff: undefined };\n}\nconst GetAssociationStateResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.associationState !== undefined) {\n            _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationState.encode(message.associationState, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.stateDiff !== undefined) {\n            _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationStateDiff.encode(message.stateDiff, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetAssociationStateResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.associationState = _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationState.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.stateDiff = _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationStateDiff.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            associationState: isSet(object.associationState)\n                ? _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationState.fromJSON(object.associationState)\n                : undefined,\n            stateDiff: isSet(object.stateDiff)\n                ? _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationStateDiff.fromJSON(object.stateDiff)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.associationState !== undefined &&\n            (obj.associationState = message.associationState\n                ? _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationState.toJSON(message.associationState)\n                : undefined);\n        message.stateDiff !== undefined &&\n            (obj.stateDiff = message.stateDiff\n                ? _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationStateDiff.toJSON(message.stateDiff)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseGetAssociationStateResponse();\n        message.associationState =\n            object.associationState !== undefined && object.associationState !== null\n                ? _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationState.fromPartial(object.associationState)\n                : undefined;\n        message.stateDiff =\n            object.stateDiff !== undefined && object.stateDiff !== null\n                ? _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.AssociationStateDiff.fromPartial(object.stateDiff)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseValidateInboxIdsRequest() {\n    return { requests: [] };\n}\nconst ValidateInboxIdsRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        for (const v of message.requests) {\n            ValidateInboxIdsRequest_ValidationRequest.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateInboxIdsRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.requests.push(ValidateInboxIdsRequest_ValidationRequest.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            requests: Array.isArray(object === null || object === void 0 ? void 0 : object.requests)\n                ? object.requests.map((e) => ValidateInboxIdsRequest_ValidationRequest.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.requests) {\n            obj.requests = message.requests.map((e) => e ? ValidateInboxIdsRequest_ValidationRequest.toJSON(e) : undefined);\n        }\n        else {\n            obj.requests = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValidateInboxIdsRequest();\n        message.requests =\n            ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => ValidateInboxIdsRequest_ValidationRequest.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseValidateInboxIdsRequest_ValidationRequest() {\n    return {\n        credential: undefined,\n        installationPublicKey: new Uint8Array(),\n        identityUpdates: [],\n    };\n}\nconst ValidateInboxIdsRequest_ValidationRequest = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.credential !== undefined) {\n            _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.encode(message.credential, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.installationPublicKey.length !== 0) {\n            writer.uint32(18).bytes(message.installationPublicKey);\n        }\n        for (const v of message.identityUpdates) {\n            _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateInboxIdsRequest_ValidationRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.credential = _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.installationPublicKey = reader.bytes();\n                    break;\n                case 3:\n                    message.identityUpdates.push(_identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            credential: isSet(object.credential)\n                ? _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.fromJSON(object.credential)\n                : undefined,\n            installationPublicKey: isSet(object.installationPublicKey)\n                ? bytesFromBase64(object.installationPublicKey)\n                : new Uint8Array(),\n            identityUpdates: Array.isArray(object === null || object === void 0 ? void 0 : object.identityUpdates)\n                ? object.identityUpdates.map((e) => _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.credential !== undefined &&\n            (obj.credential = message.credential\n                ? _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.toJSON(message.credential)\n                : undefined);\n        message.installationPublicKey !== undefined &&\n            (obj.installationPublicKey = base64FromBytes(message.installationPublicKey !== undefined\n                ? message.installationPublicKey\n                : new Uint8Array()));\n        if (message.identityUpdates) {\n            obj.identityUpdates = message.identityUpdates.map((e) => e ? _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.toJSON(e) : undefined);\n        }\n        else {\n            obj.identityUpdates = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseValidateInboxIdsRequest_ValidationRequest();\n        message.credential =\n            object.credential !== undefined && object.credential !== null\n                ? _identity_credential_pb__WEBPACK_IMPORTED_MODULE_1__.MlsCredential.fromPartial(object.credential)\n                : undefined;\n        message.installationPublicKey =\n            (_a = object.installationPublicKey) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.identityUpdates =\n            ((_b = object.identityUpdates) === null || _b === void 0 ? void 0 : _b.map((e) => _identity_associations_association_pb__WEBPACK_IMPORTED_MODULE_2__.IdentityUpdate.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseValidateInboxIdsResponse() {\n    return { responses: [] };\n}\nconst ValidateInboxIdsResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        for (const v of message.responses) {\n            ValidateInboxIdsResponse_ValidationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateInboxIdsResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.responses.push(ValidateInboxIdsResponse_ValidationResponse.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            responses: Array.isArray(object === null || object === void 0 ? void 0 : object.responses)\n                ? object.responses.map((e) => ValidateInboxIdsResponse_ValidationResponse.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.responses) {\n            obj.responses = message.responses.map((e) => e ? ValidateInboxIdsResponse_ValidationResponse.toJSON(e) : undefined);\n        }\n        else {\n            obj.responses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValidateInboxIdsResponse();\n        message.responses =\n            ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => ValidateInboxIdsResponse_ValidationResponse.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseValidateInboxIdsResponse_ValidationResponse() {\n    return { isOk: false, errorMessage: \"\", inboxId: \"\" };\n}\nconst ValidateInboxIdsResponse_ValidationResponse = {\n    encode(message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Writer.create()) {\n        if (message.isOk === true) {\n            writer.uint32(8).bool(message.isOk);\n        }\n        if (message.errorMessage !== \"\") {\n            writer.uint32(18).string(message.errorMessage);\n        }\n        if (message.inboxId !== \"\") {\n            writer.uint32(26).string(message.inboxId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader) ? input : new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidateInboxIdsResponse_ValidationResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.isOk = reader.bool();\n                    break;\n                case 2:\n                    message.errorMessage = reader.string();\n                    break;\n                case 3:\n                    message.inboxId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            isOk: isSet(object.isOk) ? Boolean(object.isOk) : false,\n            errorMessage: isSet(object.errorMessage)\n                ? String(object.errorMessage)\n                : \"\",\n            inboxId: isSet(object.inboxId) ? String(object.inboxId) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.isOk !== undefined && (obj.isOk = message.isOk);\n        message.errorMessage !== undefined &&\n            (obj.errorMessage = message.errorMessage);\n        message.inboxId !== undefined && (obj.inboxId = message.inboxId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseValidateInboxIdsResponse_ValidationResponse();\n        message.isOk = (_a = object.isOk) !== null && _a !== void 0 ? _a : false;\n        message.errorMessage = (_b = object.errorMessage) !== null && _b !== void 0 ? _b : \"\";\n        message.inboxId = (_c = object.inboxId) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nclass ValidationApiClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.ValidateKeyPackages = this.ValidateKeyPackages.bind(this);\n        this.ValidateGroupMessages = this.ValidateGroupMessages.bind(this);\n        this.GetAssociationState = this.GetAssociationState.bind(this);\n        this.ValidateInboxIdKeyPackages =\n            this.ValidateInboxIdKeyPackages.bind(this);\n        this.ValidateInboxIds = this.ValidateInboxIds.bind(this);\n        this.VerifySmartContractWalletSignatures =\n            this.VerifySmartContractWalletSignatures.bind(this);\n    }\n    ValidateKeyPackages(request) {\n        const data = ValidateKeyPackagesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls_validation.v1.ValidationApi\", \"ValidateKeyPackages\", data);\n        return promise.then((data) => ValidateKeyPackagesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(data)));\n    }\n    ValidateGroupMessages(request) {\n        const data = ValidateGroupMessagesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls_validation.v1.ValidationApi\", \"ValidateGroupMessages\", data);\n        return promise.then((data) => ValidateGroupMessagesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(data)));\n    }\n    GetAssociationState(request) {\n        const data = GetAssociationStateRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls_validation.v1.ValidationApi\", \"GetAssociationState\", data);\n        return promise.then((data) => GetAssociationStateResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(data)));\n    }\n    ValidateInboxIdKeyPackages(request) {\n        const data = ValidateKeyPackagesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls_validation.v1.ValidationApi\", \"ValidateInboxIdKeyPackages\", data);\n        return promise.then((data) => ValidateInboxIdKeyPackagesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(data)));\n    }\n    ValidateInboxIds(request) {\n        const data = ValidateInboxIdsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls_validation.v1.ValidationApi\", \"ValidateInboxIds\", data);\n        return promise.then((data) => ValidateInboxIdsResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(data)));\n    }\n    VerifySmartContractWalletSignatures(request) {\n        const data = _identity_api_v1_identity_pb__WEBPACK_IMPORTED_MODULE_3__.VerifySmartContractWalletSignaturesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"xmtp.mls_validation.v1.ValidationApi\", \"VerifySmartContractWalletSignatures\", data);\n        return promise.then((data) => _identity_api_v1_identity_pb__WEBPACK_IMPORTED_MODULE_3__.VerifySmartContractWalletSignaturesResponse.decode(new (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().Reader)(data)));\n    }\n}\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    }\n    else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for (let i = 0; i < bin.length; ++i) {\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    }\n    else {\n        const bin = [];\n        arr.forEach((byte) => {\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nif ((protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().util).Long !== long__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n    (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().util).Long = long__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default().configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=service.pb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/mls_validation/v1/service.pb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/node.js":
/*!******************************************************!*\
  !*** ./node_modules/@xmtp/proto/ts/dist/esm/node.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authn: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.authn),\n/* harmony export */   ciphertext: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.ciphertext),\n/* harmony export */   composite: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.composite),\n/* harmony export */   contact: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.contact),\n/* harmony export */   content: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.content),\n/* harmony export */   conversationReference: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.conversationReference),\n/* harmony export */   ecies: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.ecies),\n/* harmony export */   fetcher: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.fetcher),\n/* harmony export */   frames: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.frames),\n/* harmony export */   invitation: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.invitation),\n/* harmony export */   keystore: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.keystore),\n/* harmony export */   message: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.message),\n/* harmony export */   messageApi: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.messageApi),\n/* harmony export */   mlsApi: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.mlsApi),\n/* harmony export */   mlsContent: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.mlsContent),\n/* harmony export */   mlsDatabaseIntent: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.mlsDatabaseIntent),\n/* harmony export */   mlsGroupMembership: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.mlsGroupMembership),\n/* harmony export */   mlsGroupMetadata: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.mlsGroupMetadata),\n/* harmony export */   mlsGroupMutableMetadata: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.mlsGroupMutableMetadata),\n/* harmony export */   mlsTranscriptMessages: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.mlsTranscriptMessages),\n/* harmony export */   mlsValidationService: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.mlsValidationService),\n/* harmony export */   privateKey: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.privateKey),\n/* harmony export */   privatePreferences: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.privatePreferences),\n/* harmony export */   publicKey: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.publicKey),\n/* harmony export */   signature: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.signature),\n/* harmony export */   signedPayload: () => (/* reexport safe */ _index__WEBPACK_IMPORTED_MODULE_0__.signedPayload)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/index.js\");\nfunction getGlobal() {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    return undefined;\n}\nconst ctx = getGlobal();\nif (typeof ctx.fetch === \"undefined\") {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { fetch, Request, Response, Headers } = __webpack_require__(/*! undici */ \"undici\");\n    ctx.fetch = fetch;\n    ctx.Request = Request;\n    ctx.Response = Response;\n    ctx.Headers = Headers;\n}\nconst streamClasses = [\n    \"TextDecoderStream\",\n    \"TextEncoderStream\",\n    \"TransformStream\",\n    \"ReadableStream\",\n    \"WritableStream\",\n    \"ByteLengthQueuingStrategy\",\n    \"CountQueuingStrategy\",\n];\nfor (const clsName of streamClasses) {\n    if (typeof ctx[clsName] === \"undefined\") {\n        ctx[clsName] = __webpack_require__(/*! stream/web */ \"stream/web\")[clsName];\n    }\n}\n\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9DQUFvQyxFQUFFLG1CQUFPLENBQUMsc0JBQVE7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQyw4QkFBWTtBQUMzQztBQUNBO0FBQ3dCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAvcHJvdG8vdHMvZGlzdC9lc20vbm9kZS5qcz9kMmZjIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmNvbnN0IGN0eCA9IGdldEdsb2JhbCgpO1xuaWYgKHR5cGVvZiBjdHguZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuICAgIGNvbnN0IHsgZmV0Y2gsIFJlcXVlc3QsIFJlc3BvbnNlLCBIZWFkZXJzIH0gPSByZXF1aXJlKFwidW5kaWNpXCIpO1xuICAgIGN0eC5mZXRjaCA9IGZldGNoO1xuICAgIGN0eC5SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgICBjdHguUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgICBjdHguSGVhZGVycyA9IEhlYWRlcnM7XG59XG5jb25zdCBzdHJlYW1DbGFzc2VzID0gW1xuICAgIFwiVGV4dERlY29kZXJTdHJlYW1cIixcbiAgICBcIlRleHRFbmNvZGVyU3RyZWFtXCIsXG4gICAgXCJUcmFuc2Zvcm1TdHJlYW1cIixcbiAgICBcIlJlYWRhYmxlU3RyZWFtXCIsXG4gICAgXCJXcml0YWJsZVN0cmVhbVwiLFxuICAgIFwiQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneVwiLFxuICAgIFwiQ291bnRRdWV1aW5nU3RyYXRlZ3lcIixcbl07XG5mb3IgKGNvbnN0IGNsc05hbWUgb2Ygc3RyZWFtQ2xhc3Nlcykge1xuICAgIGlmICh0eXBlb2YgY3R4W2Nsc05hbWVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGN0eFtjbHNOYW1lXSA9IHJlcXVpcmUoXCJzdHJlYW0vd2ViXCIpW2Nsc05hbWVdO1xuICAgIH1cbn1cbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/user-preferences-bindings-wasm/dist/node/user_preferences_bindings_wasm.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@xmtp/user-preferences-bindings-wasm/dist/node/user_preferences_bindings_wasm.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nlet imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextDecoder } = __webpack_require__(/*! util */ \"util\");\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8Array} public_key\n* @param {Uint8Array} private_key\n* @param {Uint8Array} message\n* @returns {Uint8Array}\n*/\nmodule.exports.user_preferences_encrypt = function(public_key, private_key, message) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(private_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.user_preferences_encrypt(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v4 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1, 1);\n        return v4;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\n/**\n* @param {Uint8Array} public_key\n* @param {Uint8Array} private_key\n* @param {Uint8Array} message\n* @returns {Uint8Array}\n*/\nmodule.exports.user_preferences_decrypt = function(public_key, private_key, message) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(private_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.user_preferences_decrypt(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v4 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1, 1);\n        return v4;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\n/**\n* @param {Uint8Array} private_key\n* @returns {string}\n*/\nmodule.exports.generate_private_preferences_topic = function(private_key) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(private_key, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.generate_private_preferences_topic(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbg_crypto_d05b68a3572bb8ca = function(arg0) {\n    const ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_object = function(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nmodule.exports.__wbg_process_b02b3570280d0366 = function(arg0) {\n    const ret = getObject(arg0).process;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_versions_c1cb42213cedf0f5 = function(arg0) {\n    const ret = getObject(arg0).versions;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_node_43b1089f407e4ec2 = function(arg0) {\n    const ret = getObject(arg0).node;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_string = function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'string';\n    return ret;\n};\n\nmodule.exports.__wbg_require_9a7e0f667ead4995 = function() { return handleError(function () {\n    const ret = module.require;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_msCrypto_10fc94afee92bd76 = function(arg0) {\n    const ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_randomFillSync_b70ccbdf4926a99d = function() { return handleError(function (arg0, arg1) {\n    getObject(arg0).randomFillSync(takeObject(arg1));\n}, arguments) };\n\nmodule.exports.__wbg_getRandomValues_7e42b4fb8779dc6d = function() { return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n}, arguments) };\n\nmodule.exports.__wbindgen_is_function = function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nmodule.exports.__wbg_newnoargs_cfecb3965268594c = function(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_call_3f093dd26d5569f8 = function() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_self_05040bd9523805b9 = function() { return handleError(function () {\n    const ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_window_adc720039f2cb14f = function() { return handleError(function () {\n    const ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_globalThis_622105db80c1457d = function() { return handleError(function () {\n    const ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_global_f56b013ed9bcf359 = function() { return handleError(function () {\n    const ret = global.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nmodule.exports.__wbg_call_67f2111acd2dfdb6 = function() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_buffer_b914fb8b50ebbc3e = function(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_newwithbyteoffsetandlength_0de9ee56e9f6ee6e = function(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_b1f2d6842d615181 = function(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_set_7d988c98e6ced92d = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nmodule.exports.__wbg_newwithlength_0d03cef43b68a530 = function(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_subarray_adc418253d76e2f1 = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_object_clone_ref = function(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nconst path = (__webpack_require__(/*! path */ \"path\").join)(__dirname, 'user_preferences_bindings_wasm_bg.wasm');\nconst bytes = (__webpack_require__(/*! fs */ \"fs\").readFileSync)(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/user-preferences-bindings-wasm/dist/node/user_preferences_bindings_wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/consent-proof-signature/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@xmtp/consent-proof-signature/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createConsentMessage: () => (/* binding */ createConsentMessage),\n/* harmony export */   createConsentProofPayload: () => (/* binding */ createConsentProofPayload)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _xmtp_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @xmtp/proto */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/node_modules/@xmtp/proto/ts/dist/esm/node.js\");\n\n\n\n/**\n *\n * @param peerAddress - Ethereum address of the broadcaster\n * @param timestampMs - Timestamp in milliseconds used in the signature\n * @returns\n */\nconst createConsentMessage = (peerAddress, timestampMs) => \"XMTP : Grant inbox consent to sender\\n\" +\n    \"\\n\" +\n    `Current Time: ${new Date(timestampMs).toUTCString()}\\n` +\n    `From Address: ${peerAddress}\\n` +\n    \"\\n\" +\n    \"For more info: https://xmtp.org/signatures/\";\n/**\n *\n * @param signature hex string of the signature\n * @param timestampMs timestamp in milliseconds used in the signature\n * @returns Uint8Array of the consent proof payload\n */\nconst createConsentProofPayload = (signature, timestampMs) => _xmtp_proto__WEBPACK_IMPORTED_MODULE_1__.invitation.ConsentProofPayload.encode({\n    signature,\n    timestamp: long__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromNumber(timestampMs),\n    payloadVersion: _xmtp_proto__WEBPACK_IMPORTED_MODULE_1__.invitation.ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_1,\n}).finish();\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29uc2VudC1wcm9vZi1zaWduYXR1cmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0I7QUFDaUI7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0NBQW9DO0FBQ3pELHFCQUFxQixZQUFZO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsdUVBQThCO0FBQzVGO0FBQ0EsZUFBZSw0Q0FBSTtBQUNuQixvQkFBb0IsOEVBQXFDO0FBQ3pELENBQUM7O0FBRTBEO0FBQzNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29uc2VudC1wcm9vZi1zaWduYXR1cmUvbGliL2luZGV4LmpzP2Y4ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvbmcgZnJvbSAnbG9uZyc7XG5pbXBvcnQgeyBpbnZpdGF0aW9uIH0gZnJvbSAnQHhtdHAvcHJvdG8nO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gcGVlckFkZHJlc3MgLSBFdGhlcmV1bSBhZGRyZXNzIG9mIHRoZSBicm9hZGNhc3RlclxuICogQHBhcmFtIHRpbWVzdGFtcE1zIC0gVGltZXN0YW1wIGluIG1pbGxpc2Vjb25kcyB1c2VkIGluIHRoZSBzaWduYXR1cmVcbiAqIEByZXR1cm5zXG4gKi9cbmNvbnN0IGNyZWF0ZUNvbnNlbnRNZXNzYWdlID0gKHBlZXJBZGRyZXNzLCB0aW1lc3RhbXBNcykgPT4gXCJYTVRQIDogR3JhbnQgaW5ib3ggY29uc2VudCB0byBzZW5kZXJcXG5cIiArXG4gICAgXCJcXG5cIiArXG4gICAgYEN1cnJlbnQgVGltZTogJHtuZXcgRGF0ZSh0aW1lc3RhbXBNcykudG9VVENTdHJpbmcoKX1cXG5gICtcbiAgICBgRnJvbSBBZGRyZXNzOiAke3BlZXJBZGRyZXNzfVxcbmAgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiRm9yIG1vcmUgaW5mbzogaHR0cHM6Ly94bXRwLm9yZy9zaWduYXR1cmVzL1wiO1xuLyoqXG4gKlxuICogQHBhcmFtIHNpZ25hdHVyZSBoZXggc3RyaW5nIG9mIHRoZSBzaWduYXR1cmVcbiAqIEBwYXJhbSB0aW1lc3RhbXBNcyB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzIHVzZWQgaW4gdGhlIHNpZ25hdHVyZVxuICogQHJldHVybnMgVWludDhBcnJheSBvZiB0aGUgY29uc2VudCBwcm9vZiBwYXlsb2FkXG4gKi9cbmNvbnN0IGNyZWF0ZUNvbnNlbnRQcm9vZlBheWxvYWQgPSAoc2lnbmF0dXJlLCB0aW1lc3RhbXBNcykgPT4gaW52aXRhdGlvbi5Db25zZW50UHJvb2ZQYXlsb2FkLmVuY29kZSh7XG4gICAgc2lnbmF0dXJlLFxuICAgIHRpbWVzdGFtcDogTG9uZy5mcm9tTnVtYmVyKHRpbWVzdGFtcE1zKSxcbiAgICBwYXlsb2FkVmVyc2lvbjogaW52aXRhdGlvbi5Db25zZW50UHJvb2ZQYXlsb2FkVmVyc2lvbi5DT05TRU5UX1BST09GX1BBWUxPQURfVkVSU0lPTl8xLFxufSkuZmluaXNoKCk7XG5cbmV4cG9ydCB7IGNyZWF0ZUNvbnNlbnRNZXNzYWdlLCBjcmVhdGVDb25zZW50UHJvb2ZQYXlsb2FkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/consent-proof-signature/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/content-type-primitives/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@xmtp/content-type-primitives/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentTypeId: () => (/* binding */ ContentTypeId)\n/* harmony export */ });\nclass ContentTypeId {\n    authorityId;\n    typeId;\n    versionMajor;\n    versionMinor;\n    constructor(obj) {\n        this.authorityId = obj.authorityId;\n        this.typeId = obj.typeId;\n        this.versionMajor = obj.versionMajor;\n        this.versionMinor = obj.versionMinor;\n    }\n    toString() {\n        return `${this.authorityId}/${this.typeId}:${this.versionMajor}.${this.versionMinor}`;\n    }\n    static fromString(contentTypeString) {\n        const [idString, versionString] = contentTypeString.split(\":\");\n        const [authorityId, typeId] = idString.split(\"/\");\n        const [major, minor] = versionString.split(\".\");\n        return new ContentTypeId({\n            authorityId,\n            typeId,\n            versionMajor: Number(major),\n            versionMinor: Number(minor),\n        });\n    }\n    sameAs(id) {\n        return this.authorityId === id.authorityId && this.typeId === id.typeId;\n    }\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29udGVudC10eXBlLXByaW1pdGl2ZXMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQixHQUFHLFlBQVksR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0I7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC9jb250ZW50LXR5cGUtcHJpbWl0aXZlcy9kaXN0L2luZGV4LmpzPzk4YzAiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ29udGVudFR5cGVJZCB7XG4gICAgYXV0aG9yaXR5SWQ7XG4gICAgdHlwZUlkO1xuICAgIHZlcnNpb25NYWpvcjtcbiAgICB2ZXJzaW9uTWlub3I7XG4gICAgY29uc3RydWN0b3Iob2JqKSB7XG4gICAgICAgIHRoaXMuYXV0aG9yaXR5SWQgPSBvYmouYXV0aG9yaXR5SWQ7XG4gICAgICAgIHRoaXMudHlwZUlkID0gb2JqLnR5cGVJZDtcbiAgICAgICAgdGhpcy52ZXJzaW9uTWFqb3IgPSBvYmoudmVyc2lvbk1ham9yO1xuICAgICAgICB0aGlzLnZlcnNpb25NaW5vciA9IG9iai52ZXJzaW9uTWlub3I7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5hdXRob3JpdHlJZH0vJHt0aGlzLnR5cGVJZH06JHt0aGlzLnZlcnNpb25NYWpvcn0uJHt0aGlzLnZlcnNpb25NaW5vcn1gO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVN0cmluZyhjb250ZW50VHlwZVN0cmluZykge1xuICAgICAgICBjb25zdCBbaWRTdHJpbmcsIHZlcnNpb25TdHJpbmddID0gY29udGVudFR5cGVTdHJpbmcuc3BsaXQoXCI6XCIpO1xuICAgICAgICBjb25zdCBbYXV0aG9yaXR5SWQsIHR5cGVJZF0gPSBpZFN0cmluZy5zcGxpdChcIi9cIik7XG4gICAgICAgIGNvbnN0IFttYWpvciwgbWlub3JdID0gdmVyc2lvblN0cmluZy5zcGxpdChcIi5cIik7XG4gICAgICAgIHJldHVybiBuZXcgQ29udGVudFR5cGVJZCh7XG4gICAgICAgICAgICBhdXRob3JpdHlJZCxcbiAgICAgICAgICAgIHR5cGVJZCxcbiAgICAgICAgICAgIHZlcnNpb25NYWpvcjogTnVtYmVyKG1ham9yKSxcbiAgICAgICAgICAgIHZlcnNpb25NaW5vcjogTnVtYmVyKG1pbm9yKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNhbWVBcyhpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdXRob3JpdHlJZCA9PT0gaWQuYXV0aG9yaXR5SWQgJiYgdGhpcy50eXBlSWQgPT09IGlkLnR5cGVJZDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IENvbnRlbnRUeXBlSWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/content-type-primitives/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/content-type-text/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@xmtp/content-type-text/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentTypeText: () => (/* binding */ ContentTypeText),\n/* harmony export */   Encoding: () => (/* binding */ Encoding),\n/* harmony export */   TextCodec: () => (/* binding */ TextCodec)\n/* harmony export */ });\n/* harmony import */ var _xmtp_content_type_primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @xmtp/content-type-primitives */ \"(ssr)/./node_modules/@xmtp/content-type-primitives/dist/index.js\");\n\n\nconst ContentTypeText = new _xmtp_content_type_primitives__WEBPACK_IMPORTED_MODULE_0__.ContentTypeId({\n    authorityId: \"xmtp.org\",\n    typeId: \"text\",\n    versionMajor: 1,\n    versionMinor: 0,\n});\nvar Encoding;\n(function (Encoding) {\n    Encoding[\"utf8\"] = \"UTF-8\";\n})(Encoding || (Encoding = {}));\nclass TextCodec {\n    get contentType() {\n        return ContentTypeText;\n    }\n    encode(content) {\n        return {\n            type: ContentTypeText,\n            parameters: { encoding: Encoding.utf8 },\n            content: new TextEncoder().encode(content),\n        };\n    }\n    decode(content) {\n        const { encoding } = content.parameters;\n        if (encoding !== Encoding.utf8) {\n            throw new Error(`unrecognized encoding ${encoding}`);\n        }\n        return new TextDecoder().decode(content.content);\n    }\n    fallback() {\n        return undefined;\n    }\n    shouldPush() {\n        return true;\n    }\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAvY29udGVudC10eXBlLXRleHQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThEOztBQUU5RCw0QkFBNEIsd0VBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIseUJBQXlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFdBQVc7QUFDM0I7QUFDQSxxREFBcUQsU0FBUztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0Q7QUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC9jb250ZW50LXR5cGUtdGV4dC9kaXN0L2luZGV4LmpzP2Y3OGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGVudFR5cGVJZCB9IGZyb20gJ0B4bXRwL2NvbnRlbnQtdHlwZS1wcmltaXRpdmVzJztcblxuY29uc3QgQ29udGVudFR5cGVUZXh0ID0gbmV3IENvbnRlbnRUeXBlSWQoe1xuICAgIGF1dGhvcml0eUlkOiBcInhtdHAub3JnXCIsXG4gICAgdHlwZUlkOiBcInRleHRcIixcbiAgICB2ZXJzaW9uTWFqb3I6IDEsXG4gICAgdmVyc2lvbk1pbm9yOiAwLFxufSk7XG52YXIgRW5jb2Rpbmc7XG4oZnVuY3Rpb24gKEVuY29kaW5nKSB7XG4gICAgRW5jb2RpbmdbXCJ1dGY4XCJdID0gXCJVVEYtOFwiO1xufSkoRW5jb2RpbmcgfHwgKEVuY29kaW5nID0ge30pKTtcbmNsYXNzIFRleHRDb2RlYyB7XG4gICAgZ2V0IGNvbnRlbnRUeXBlKCkge1xuICAgICAgICByZXR1cm4gQ29udGVudFR5cGVUZXh0O1xuICAgIH1cbiAgICBlbmNvZGUoY29udGVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogQ29udGVudFR5cGVUZXh0LFxuICAgICAgICAgICAgcGFyYW1ldGVyczogeyBlbmNvZGluZzogRW5jb2RpbmcudXRmOCB9LFxuICAgICAgICAgICAgY29udGVudDogbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGNvbnRlbnQpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBkZWNvZGUoY29udGVudCkge1xuICAgICAgICBjb25zdCB7IGVuY29kaW5nIH0gPSBjb250ZW50LnBhcmFtZXRlcnM7XG4gICAgICAgIGlmIChlbmNvZGluZyAhPT0gRW5jb2RpbmcudXRmOCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnJlY29nbml6ZWQgZW5jb2RpbmcgJHtlbmNvZGluZ31gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGNvbnRlbnQuY29udGVudCk7XG4gICAgfVxuICAgIGZhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzaG91bGRQdXNoKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IENvbnRlbnRUeXBlVGV4dCwgRW5jb2RpbmcsIFRleHRDb2RlYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/content-type-text/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiUrls: () => (/* binding */ ApiUrls),\n/* harmony export */   AuthCache: () => (/* binding */ AuthCache),\n/* harmony export */   BrowserStoragePersistence: () => (/* binding */ BrowserStoragePersistence),\n/* harmony export */   Ciphertext: () => (/* binding */ Ciphertext),\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   Compression: () => (/* binding */ Compression),\n/* harmony export */   ConsentListEntry: () => (/* binding */ ConsentListEntry),\n/* harmony export */   ConversationV1: () => (/* binding */ ConversationV1),\n/* harmony export */   ConversationV2: () => (/* binding */ ConversationV2),\n/* harmony export */   Conversations: () => (/* binding */ Conversations),\n/* harmony export */   DecodedMessage: () => (/* binding */ DecodedMessage),\n/* harmony export */   EncryptedPersistence: () => (/* binding */ EncryptedPersistence),\n/* harmony export */   HttpApiClient: () => (/* binding */ HttpApiClient),\n/* harmony export */   InMemoryKeystore: () => (/* binding */ InMemoryKeystore),\n/* harmony export */   InMemoryPersistence: () => (/* binding */ InMemoryPersistence),\n/* harmony export */   InvitationV1: () => (/* binding */ InvitationV1),\n/* harmony export */   KeyGeneratorKeystoreProvider: () => (/* binding */ KeyGeneratorKeystoreProvider),\n/* harmony export */   LocalAuthenticator: () => (/* binding */ LocalAuthenticator),\n/* harmony export */   MessageV1: () => (/* binding */ MessageV1),\n/* harmony export */   MessageV2: () => (/* binding */ MessageV2),\n/* harmony export */   NetworkKeystoreProvider: () => (/* binding */ NetworkKeystoreProvider),\n/* harmony export */   PrefixedPersistence: () => (/* binding */ PrefixedPersistence),\n/* harmony export */   PrivateKey: () => (/* binding */ PrivateKey),\n/* harmony export */   PrivateKeyBundleV1: () => (/* binding */ PrivateKeyBundleV1),\n/* harmony export */   PrivateKeyBundleV2: () => (/* binding */ PrivateKeyBundleV2),\n/* harmony export */   PublicKey: () => (/* binding */ PublicKey),\n/* harmony export */   PublicKeyBundle: () => (/* binding */ PublicKeyBundle),\n/* harmony export */   SealedInvitation: () => (/* binding */ SealedInvitation),\n/* harmony export */   Signature: () => (/* binding */ Signature),\n/* harmony export */   SignedPublicKey: () => (/* binding */ SignedPublicKey),\n/* harmony export */   SignedPublicKeyBundle: () => (/* binding */ SignedPublicKeyBundle),\n/* harmony export */   SnapProvider: () => (/* binding */ SnapKeystoreProvider),\n/* harmony export */   SortDirection: () => (/* binding */ SortDirection),\n/* harmony export */   StaticKeystoreProvider: () => (/* binding */ StaticKeystoreProvider),\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   buildContentTopic: () => (/* binding */ buildContentTopic),\n/* harmony export */   buildDirectMessageTopic: () => (/* binding */ buildDirectMessageTopic),\n/* harmony export */   buildDirectMessageTopicV2: () => (/* binding */ buildDirectMessageTopicV2),\n/* harmony export */   buildUserContactTopic: () => (/* binding */ buildUserContactTopic),\n/* harmony export */   buildUserIntroTopic: () => (/* binding */ buildUserIntroTopic),\n/* harmony export */   buildUserInviteTopic: () => (/* binding */ buildUserInviteTopic),\n/* harmony export */   buildUserPrivateStoreTopic: () => (/* binding */ buildUserPrivateStoreTopic),\n/* harmony export */   dateToNs: () => (/* binding */ dateToNs),\n/* harmony export */   decodeContactBundle: () => (/* binding */ decodeContactBundle),\n/* harmony export */   decodeContent: () => (/* binding */ decodeContent),\n/* harmony export */   decrypt: () => (/* binding */ decrypt$1),\n/* harmony export */   defaultKeystoreProviders: () => (/* binding */ defaultKeystoreProviders),\n/* harmony export */   encrypt: () => (/* binding */ encrypt$1),\n/* harmony export */   exportHmacKey: () => (/* binding */ exportHmacKey),\n/* harmony export */   fromNanoString: () => (/* binding */ fromNanoString),\n/* harmony export */   generateHmacSignature: () => (/* binding */ generateHmacSignature),\n/* harmony export */   hkdfHmacKey: () => (/* binding */ hkdfHmacKey),\n/* harmony export */   importHmacKey: () => (/* binding */ importHmacKey),\n/* harmony export */   keystoreApiDefs: () => (/* binding */ apiDefs),\n/* harmony export */   mapPaginatedStream: () => (/* binding */ mapPaginatedStream),\n/* harmony export */   nsToDate: () => (/* binding */ nsToDate),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   snapKeystoreApiDefs: () => (/* binding */ snapApiDefs),\n/* harmony export */   toNanoString: () => (/* binding */ toNanoString),\n/* harmony export */   verifyHmacSignature: () => (/* binding */ verifyHmacSignature)\n/* harmony export */ });\n/* harmony import */ var _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @xmtp/proto */ \"(ssr)/./node_modules/@xmtp/proto/ts/dist/esm/node.js\");\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/index.js\");\n/* harmony import */ var _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/secp256k1 */ \"(ssr)/./node_modules/@noble/secp256k1/lib/esm/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/hash/keccak256.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/hexToSignature.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/hashMessage.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/verifyMessage.js\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var _xmtp_content_type_text__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @xmtp/content-type-text */ \"(ssr)/./node_modules/@xmtp/content-type-text/dist/index.js\");\n/* harmony import */ var _xmtp_content_type_primitives__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @xmtp/content-type-primitives */ \"(ssr)/./node_modules/@xmtp/content-type-primitives/dist/index.js\");\n/* harmony import */ var async_mutex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! async-mutex */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/async-mutex/index.mjs\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var _xmtp_user_preferences_bindings_wasm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @xmtp/user-preferences-bindings-wasm */ \"(ssr)/./node_modules/@xmtp/user-preferences-bindings-wasm/dist/node/user_preferences_bindings_wasm.js\");\n/* harmony import */ var _xmtp_consent_proof_signature__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @xmtp/consent-proof-signature */ \"(ssr)/./node_modules/@xmtp/consent-proof-signature/lib/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst KDFSaltSize = 32; // bytes\n// AES-GCM defaults from https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\nconst AESGCMNonceSize = 12; // property iv\nconst AESGCMTagLength = 16; // property tagLength\n// Ciphertext packages the encrypted ciphertext with the salt and nonce used to produce it.\n// salt and nonce are not secret, and should be transmitted/stored along with the encrypted ciphertext.\nclass Ciphertext {\n    constructor(obj) {\n        if (!obj.aes256GcmHkdfSha256) {\n            throw new Error(\"invalid ciphertext\");\n        }\n        if (obj.aes256GcmHkdfSha256.payload.length < AESGCMTagLength) {\n            throw new Error(`invalid ciphertext ciphertext length: ${obj.aes256GcmHkdfSha256.payload.length}`);\n        }\n        if (obj.aes256GcmHkdfSha256.hkdfSalt.length !== KDFSaltSize) {\n            throw new Error(`invalid ciphertext salt length: ${obj.aes256GcmHkdfSha256.hkdfSalt.length}`);\n        }\n        if (obj.aes256GcmHkdfSha256.gcmNonce.length !== AESGCMNonceSize) {\n            throw new Error(`invalid ciphertext nonce length: ${obj.aes256GcmHkdfSha256.gcmNonce.length}`);\n        }\n        this.aes256GcmHkdfSha256 = obj.aes256GcmHkdfSha256;\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.ciphertext.Ciphertext.encode(this).finish();\n    }\n    static fromBytes(bytes) {\n        return new Ciphertext(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.ciphertext.Ciphertext.decode(bytes));\n    }\n}\n\nconst crypto = node_crypto__WEBPACK_IMPORTED_MODULE_3__.webcrypto;\n\nconst hkdfNoInfo = new Uint8Array().buffer;\nconst hkdfNoSalt = new Uint8Array().buffer;\n// This is a variation of https://github.com/paulmillr/noble-secp256k1/blob/main/index.ts#L1378-L1388\n// that uses `digest('SHA-256', bytes)` instead of `digest('SHA-256', bytes.buffer)`\n// which seems to produce different results.\nasync function sha256(bytes) {\n    return new Uint8Array(await crypto.subtle.digest(\"SHA-256\", bytes));\n}\n// symmetric authenticated encryption of plaintext using the secret;\n// additionalData is used to protect un-encrypted parts of the message (header)\n// in the authentication scope of the encryption.\nasync function encrypt$1(plain, secret, additionalData) {\n    const salt = crypto.getRandomValues(new Uint8Array(KDFSaltSize));\n    const nonce = crypto.getRandomValues(new Uint8Array(AESGCMNonceSize));\n    const key = await hkdf(secret, salt);\n    const encrypted = await crypto.subtle.encrypt(aesGcmParams(nonce, additionalData), key, plain);\n    return new Ciphertext({\n        aes256GcmHkdfSha256: {\n            payload: new Uint8Array(encrypted),\n            hkdfSalt: salt,\n            gcmNonce: nonce,\n        },\n    });\n}\n// symmetric authenticated decryption of the encrypted ciphertext using the secret and additionalData\nasync function decrypt$1(encrypted, secret, additionalData) {\n    if (!encrypted.aes256GcmHkdfSha256) {\n        throw new Error(\"invalid payload ciphertext\");\n    }\n    const key = await hkdf(secret, encrypted.aes256GcmHkdfSha256.hkdfSalt);\n    const decrypted = await crypto.subtle.decrypt(aesGcmParams(encrypted.aes256GcmHkdfSha256.gcmNonce, additionalData), key, encrypted.aes256GcmHkdfSha256.payload);\n    return new Uint8Array(decrypted);\n}\n// helper for building Web Crypto API encryption parameter structure\nfunction aesGcmParams(nonce, additionalData) {\n    const spec = {\n        name: \"AES-GCM\",\n        iv: nonce,\n    };\n    if (additionalData) {\n        spec.additionalData = additionalData;\n    }\n    return spec;\n}\n// Derive AES-256-GCM key from a shared secret and salt.\n// Returns crypto.CryptoKey suitable for the encrypt/decrypt API\nasync function hkdf(secret, salt) {\n    const key = await crypto.subtle.importKey(\"raw\", secret, \"HKDF\", false, [\n        \"deriveKey\",\n    ]);\n    return crypto.subtle.deriveKey({ name: \"HKDF\", hash: \"SHA-256\", salt, info: hkdfNoInfo }, key, { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"]);\n}\nasync function hkdfHmacKey(secret, info) {\n    const key = await crypto.subtle.importKey(\"raw\", secret, \"HKDF\", false, [\n        \"deriveKey\",\n    ]);\n    return crypto.subtle.deriveKey({ name: \"HKDF\", hash: \"SHA-256\", salt: hkdfNoSalt, info }, key, { name: \"HMAC\", hash: \"SHA-256\", length: 256 }, true, [\"sign\", \"verify\"]);\n}\nasync function generateHmacSignature(secret, info, message) {\n    const key = await hkdfHmacKey(secret, info);\n    const signed = await crypto.subtle.sign(\"HMAC\", key, message);\n    return new Uint8Array(signed);\n}\nasync function verifyHmacSignature(key, signature, message) {\n    return await crypto.subtle.verify(\"HMAC\", key, signature, message);\n}\nasync function exportHmacKey(key) {\n    const exported = await crypto.subtle.exportKey(\"raw\", key);\n    return new Uint8Array(exported);\n}\nasync function importHmacKey(key) {\n    return crypto.subtle.importKey(\"raw\", key, { name: \"HMAC\", hash: \"SHA-256\", length: 256 }, true, [\"sign\", \"verify\"]);\n}\n\nconst bytesToHex = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.utils.bytesToHex;\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Compute the Ethereum address from uncompressed PublicKey bytes\n */\nfunction computeAddress(bytes) {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    const publicKey = (0,viem__WEBPACK_IMPORTED_MODULE_7__.bytesToHex)(bytes.slice(1));\n    const hash = (0,viem__WEBPACK_IMPORTED_MODULE_8__.keccak256)(publicKey);\n    const address = hash.substring(hash.length - 40);\n    return (0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(`0x${address}`);\n}\n/**\n * Split an Ethereum signature hex string into bytes and a recovery bit\n */\nfunction splitSignature(signature) {\n    const eSig = (0,viem__WEBPACK_IMPORTED_MODULE_10__.hexToSignature)(signature);\n    const r = (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToBytes)(eSig.r);\n    const s = (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToBytes)(eSig.s);\n    let v = Number(eSig.v);\n    if (v === 0 || v === 1) {\n        v += 27;\n    }\n    const recovery = 1 - (v % 2);\n    const bytes = new Uint8Array(64);\n    bytes.set(r);\n    bytes.set(s, r.length);\n    return { bytes, recovery };\n}\n\n// Validate SECP256k1 private key\nfunction secp256k1Check(key) {\n    if (key.bytes.length !== 32) {\n        throw new Error(`invalid private key length: ${key.bytes.length}`);\n    }\n}\n// A private key signed with another key pair or a wallet.\nclass SignedPrivateKey {\n    constructor(obj) {\n        if (!obj.secp256k1) {\n            throw new Error(\"invalid private key\");\n        }\n        secp256k1Check(obj.secp256k1);\n        this.secp256k1 = obj.secp256k1;\n        this.createdNs = obj.createdNs;\n        if (!obj.publicKey) {\n            throw new Error(\"missing public key\");\n        }\n        this.publicKey = new SignedPublicKey(obj.publicKey);\n    }\n    // Create a random key pair signed by the signer.\n    static async generate(signer) {\n        const secp256k1 = {\n            bytes: _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.utils.randomPrivateKey(),\n        };\n        const createdNs = long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromNumber(new Date().getTime()).mul(1000000);\n        const unsigned = new UnsignedPublicKey({\n            secp256k1Uncompressed: {\n                bytes: _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.getPublicKey(secp256k1.bytes),\n            },\n            createdNs,\n        });\n        const signed = await signer.signKey(unsigned);\n        return new SignedPrivateKey({\n            secp256k1,\n            createdNs,\n            publicKey: signed,\n        });\n    }\n    // Time the key was generated.\n    generated() {\n        return new Date(this.createdNs.div(1000000).toNumber());\n    }\n    // Sign provided digest.\n    async sign(digest) {\n        const [signature, recovery] = await _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.sign(digest, this.secp256k1.bytes, {\n            recovered: true,\n            der: false,\n        });\n        return new Signature({\n            ecdsaCompact: { bytes: signature, recovery },\n        });\n    }\n    // Sign provided public key.\n    async signKey(pub) {\n        const keyBytes = pub.toBytes();\n        const digest = await sha256(keyBytes);\n        const signature = await this.sign(digest);\n        return new SignedPublicKey({\n            keyBytes,\n            signature,\n        });\n    }\n    // Return public key of the signer of the provided signed key.\n    static async signerKey(key, signature) {\n        const digest = await sha256(key.bytesToSign());\n        return ecdsaSignerKey(digest, signature);\n    }\n    // Derive shared secret from peer's PublicKey;\n    // the peer can derive the same secret using their private key and our public key.\n    sharedSecret(peer) {\n        return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.getSharedSecret(this.secp256k1.bytes, peer.secp256k1Uncompressed.bytes, false);\n    }\n    // encrypt plain bytes using a shared secret derived from peer's PublicKey;\n    // additionalData allows including unencrypted parts of a Message in the authentication\n    // protection provided by the encrypted part (to make the whole Message tamper evident)\n    encrypt(plain, peer, additionalData) {\n        const secret = this.sharedSecret(peer);\n        return encrypt$1(plain, secret, additionalData);\n    }\n    // decrypt Ciphertext using a shared secret derived from peer's PublicKey;\n    // throws if any part of Ciphertext or additionalData was tampered with\n    decrypt(encrypted, peer, additionalData) {\n        const secret = this.sharedSecret(peer);\n        return decrypt$1(encrypted, secret, additionalData);\n    }\n    // Does the provided PublicKey correspond to this PrivateKey?\n    matches(key) {\n        return this.publicKey.equals(key);\n    }\n    // Is other the same/equivalent key?\n    equals(other) {\n        return (equalBytes(this.secp256k1.bytes, other.secp256k1.bytes) &&\n            this.publicKey.equals(other.publicKey));\n    }\n    // Encode this key into bytes.\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.SignedPrivateKey.encode(this).finish();\n    }\n    validatePublicKey() {\n        const generatedPublicKey = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.getPublicKey(this.secp256k1.bytes);\n        return equalBytes(generatedPublicKey, this.publicKey.secp256k1Uncompressed.bytes);\n    }\n    // Decode key from bytes.\n    static fromBytes(bytes) {\n        return new SignedPrivateKey(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.SignedPrivateKey.decode(bytes));\n    }\n    static fromLegacyKey(key, signedByWallet) {\n        return new SignedPrivateKey({\n            createdNs: key.timestamp.mul(1000000),\n            secp256k1: key.secp256k1,\n            publicKey: SignedPublicKey.fromLegacyKey(key.publicKey, signedByWallet),\n        });\n    }\n}\n// LEGACY: PrivateKey represents a secp256k1 private key.\nclass PrivateKey {\n    constructor(obj) {\n        if (!obj.secp256k1) {\n            throw new Error(\"invalid private key\");\n        }\n        secp256k1Check(obj.secp256k1);\n        this.timestamp = obj.timestamp;\n        this.secp256k1 = obj.secp256k1;\n        if (!obj.publicKey) {\n            throw new Error(\"missing public key\");\n        }\n        this.publicKey = new PublicKey(obj.publicKey);\n    }\n    // create a random PrivateKey/PublicKey pair.\n    static generate() {\n        const secp256k1 = {\n            bytes: _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.utils.randomPrivateKey(),\n        };\n        const timestamp = long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromNumber(new Date().getTime());\n        return new PrivateKey({\n            secp256k1,\n            timestamp,\n            publicKey: new PublicKey({\n                secp256k1Uncompressed: {\n                    bytes: _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.getPublicKey(secp256k1.bytes),\n                },\n                timestamp,\n            }),\n        });\n    }\n    generated() {\n        return new Date(this.timestamp.toNumber());\n    }\n    // sign provided digest\n    async sign(digest) {\n        const [signature, recovery] = await _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.sign(digest, this.secp256k1.bytes, {\n            recovered: true,\n            der: false,\n        });\n        return new Signature({\n            ecdsaCompact: { bytes: signature, recovery },\n        });\n    }\n    // sign provided public key\n    async signKey(pub) {\n        const digest = await sha256(pub.bytesToSign());\n        pub.signature = await this.sign(digest);\n        return pub;\n    }\n    // derive shared secret from peer's PublicKey;\n    // the peer can derive the same secret using their PrivateKey and our PublicKey\n    sharedSecret(peer) {\n        return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.getSharedSecret(this.secp256k1.bytes, peer.secp256k1Uncompressed.bytes, false);\n    }\n    // encrypt plain bytes using a shared secret derived from peer's PublicKey;\n    // additionalData allows including unencrypted parts of a Message in the authentication\n    // protection provided by the encrypted part (to make the whole Message tamper evident)\n    encrypt(plain, peer, additionalData) {\n        const secret = this.sharedSecret(peer);\n        return encrypt$1(plain, secret, additionalData);\n    }\n    // decrypt Ciphertext using a shared secret derived from peer's PublicKey;\n    // throws if any part of Ciphertext or additionalData was tampered with\n    decrypt(encrypted, peer, additionalData) {\n        const secret = this.sharedSecret(peer);\n        return decrypt$1(encrypted, secret, additionalData);\n    }\n    // Does the provided PublicKey correspond to this PrivateKey?\n    matches(key) {\n        return this.publicKey.equals(key);\n    }\n    validatePublicKey() {\n        const generatedPublicKey = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.getPublicKey(this.secp256k1.bytes);\n        return equalBytes(generatedPublicKey, this.publicKey.secp256k1Uncompressed.bytes);\n    }\n    // Encode this key into bytes.\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.PrivateKey.encode(this).finish();\n    }\n    // Decode key from bytes.\n    static fromBytes(bytes) {\n        return new PrivateKey(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.PrivateKey.decode(bytes));\n    }\n}\n\n// Validate signature.\nfunction ecdsaCheck(sig) {\n    if (sig.bytes.length !== 64) {\n        throw new Error(`invalid signature length: ${sig.bytes.length}`);\n    }\n    if (sig.recovery !== 0 && sig.recovery !== 1) {\n        throw new Error(`invalid recovery bit: ${sig.recovery}`);\n    }\n}\n// Compare signatures.\nfunction ecdsaEqual(a, b) {\n    return a.recovery === b.recovery && equalBytes(a.bytes, b.bytes);\n}\n// Derive public key of the signer from the digest and the signature.\nfunction ecdsaSignerKey(digest, signature) {\n    const bytes = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.recoverPublicKey(digest, signature.bytes, signature.recovery);\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return bytes\n        ? new UnsignedPublicKey({\n            secp256k1Uncompressed: { bytes },\n            createdNs: long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromNumber(0),\n        })\n        : undefined;\n}\nclass Signature {\n    constructor(obj) {\n        if (obj.ecdsaCompact) {\n            ecdsaCheck(obj.ecdsaCompact);\n            this.ecdsaCompact = obj.ecdsaCompact;\n        }\n        else if (obj.walletEcdsaCompact) {\n            ecdsaCheck(obj.walletEcdsaCompact);\n            this.walletEcdsaCompact = obj.walletEcdsaCompact;\n        }\n        else {\n            throw new Error(\"invalid signature\");\n        }\n    }\n    // Return the public key that validates provided key's signature.\n    async signerKey(key) {\n        if (this.ecdsaCompact) {\n            return SignedPrivateKey.signerKey(key, this.ecdsaCompact);\n        }\n        else if (this.walletEcdsaCompact) {\n            return WalletSigner.signerKey(key, this.walletEcdsaCompact);\n        }\n        else {\n            return undefined;\n        }\n    }\n    // LEGACY: Return the public key that validates this signature given the provided digest.\n    // Return undefined if the signature is malformed.\n    getPublicKey(digest) {\n        let bytes;\n        if (this.ecdsaCompact) {\n            bytes = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.recoverPublicKey(digest, this.ecdsaCompact.bytes, this.ecdsaCompact.recovery);\n        }\n        else if (this.walletEcdsaCompact) {\n            bytes = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.recoverPublicKey(digest, this.walletEcdsaCompact.bytes, this.walletEcdsaCompact.recovery);\n        }\n        else {\n            throw new Error(\"invalid v1 signature\");\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        return bytes\n            ? new PublicKey({\n                secp256k1Uncompressed: { bytes },\n                timestamp: long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromNumber(0),\n            })\n            : undefined;\n    }\n    // Is this the same/equivalent signature as other?\n    equals(other) {\n        if (this.ecdsaCompact && other.ecdsaCompact) {\n            return ecdsaEqual(this.ecdsaCompact, other.ecdsaCompact);\n        }\n        if (this.walletEcdsaCompact && other.walletEcdsaCompact) {\n            return ecdsaEqual(this.walletEcdsaCompact, other.walletEcdsaCompact);\n        }\n        return false;\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.signature.Signature.encode(this).finish();\n    }\n    static fromBytes(bytes) {\n        return new Signature(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.signature.Signature.decode(bytes));\n    }\n}\nvar AccountLinkedRole;\n(function (AccountLinkedRole) {\n    AccountLinkedRole[AccountLinkedRole[\"INBOX_KEY\"] = 0] = \"INBOX_KEY\";\n    AccountLinkedRole[AccountLinkedRole[\"SEND_KEY\"] = 1] = \"SEND_KEY\";\n})(AccountLinkedRole || (AccountLinkedRole = {}));\n// A wallet based KeySigner.\nclass WalletSigner {\n    constructor(wallet) {\n        this.wallet = wallet;\n    }\n    static identitySigRequestText(keyBytes) {\n        // Note that an update to this signature request text will require\n        // addition of backward compatibility for existing signatures\n        // and/or a migration; otherwise clients will fail to verify previously\n        // signed keys.\n        return (\"XMTP : Create Identity\\n\" +\n            `${bytesToHex(keyBytes)}\\n` +\n            \"\\n\" +\n            \"For more info: https://xmtp.org/signatures/\");\n    }\n    static signerKey(key, signature) {\n        const digest = (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToBytes)((0,viem__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(this.identitySigRequestText(key.bytesToSign())));\n        return ecdsaSignerKey(digest, signature);\n    }\n    async signKey(key) {\n        const keyBytes = key.toBytes();\n        const sigString = await this.wallet.signMessage(WalletSigner.identitySigRequestText(keyBytes));\n        const { bytes, recovery } = splitSignature(sigString);\n        const signature = new Signature({\n            walletEcdsaCompact: {\n                bytes,\n                recovery,\n            },\n        });\n        return new SignedPublicKey({ keyBytes, signature });\n    }\n}\n\n// Validate a key.\nfunction secp256k1UncompressedCheck(key) {\n    if (key.bytes.length !== 65) {\n        throw new Error(`invalid public key length: ${key.bytes.length}`);\n    }\n    if (key.bytes[0] !== 4) {\n        throw new Error(`unrecognized public key prefix: ${key.bytes[0]}`);\n    }\n}\nconst MS_NS_TIMESTAMP_THRESHOLD = new long__WEBPACK_IMPORTED_MODULE_1__[\"default\"](10 ** 9).mul(10 ** 9);\n// Basic public key without a signature.\nclass UnsignedPublicKey {\n    constructor(obj) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!obj?.secp256k1Uncompressed) {\n            throw new Error(\"invalid public key\");\n        }\n        secp256k1UncompressedCheck(obj.secp256k1Uncompressed);\n        this.secp256k1Uncompressed = obj.secp256k1Uncompressed;\n        this.createdNs = obj.createdNs.toUnsigned();\n    }\n    // The time the key was generated.\n    generated() {\n        return new Date(this.timestamp.toNumber());\n    }\n    isFromLegacyKey() {\n        return this.createdNs.lessThan(MS_NS_TIMESTAMP_THRESHOLD);\n    }\n    // creation time in milliseconds\n    get timestamp() {\n        return (this.isFromLegacyKey() ? this.createdNs : this.createdNs.div(1000000)).toUnsigned();\n    }\n    // Verify that signature was created from the digest using matching private key.\n    verify(signature, digest) {\n        if (!signature.ecdsaCompact) {\n            return false;\n        }\n        return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_2__.verify(signature.ecdsaCompact.bytes, digest, this.secp256k1Uncompressed.bytes);\n    }\n    // Verify that the provided public key was signed by matching private key.\n    async verifyKey(pub) {\n        if (!pub.signature) {\n            return false;\n        }\n        const digest = await sha256(pub.bytesToSign());\n        return this.verify(pub.signature, digest);\n    }\n    // Is other the same/equivalent public key?\n    equals(other) {\n        return equalBytes(this.secp256k1Uncompressed.bytes, other.secp256k1Uncompressed.bytes);\n    }\n    // Derive Ethereum address from this public key.\n    getEthereumAddress() {\n        return computeAddress(this.secp256k1Uncompressed.bytes);\n    }\n    // Encode public key into bytes.\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.UnsignedPublicKey.encode(this).finish();\n    }\n    // Decode public key from bytes.\n    static fromBytes(bytes) {\n        return new UnsignedPublicKey(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.UnsignedPublicKey.decode(bytes));\n    }\n}\n// Public key signed by another key pair or a wallet.\nclass SignedPublicKey extends UnsignedPublicKey {\n    constructor(obj) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!obj.keyBytes) {\n            throw new Error(\"missing key bytes\");\n        }\n        super(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.UnsignedPublicKey.decode(obj.keyBytes));\n        this.keyBytes = obj.keyBytes;\n        if (!obj.signature) {\n            throw new Error(\"missing key signature\");\n        }\n        this.signature = new Signature(obj.signature);\n    }\n    // Return the key without the signature.\n    get unsignedKey() {\n        return new UnsignedPublicKey({\n            createdNs: this.createdNs,\n            secp256k1Uncompressed: this.secp256k1Uncompressed,\n        });\n    }\n    // Return public key of the signer of this key.\n    signerKey() {\n        return this.signature.signerKey(this);\n    }\n    // Assume the key was signed by a wallet and\n    // return the wallet address that validates\n    // the signature of this key.\n    async walletSignatureAddress() {\n        if (!this.signature.walletEcdsaCompact) {\n            throw new Error(\"key was not signed by a wallet\");\n        }\n        const pk = await this.signerKey();\n        if (!pk) {\n            throw new Error(\"key signature not valid\");\n        }\n        return pk.getEthereumAddress();\n    }\n    // Is other the same/equivalent public key?\n    equals(other) {\n        return (this.unsignedKey.equals(other.unsignedKey) &&\n            this.signature.equals(other.signature));\n    }\n    // Return bytes of the encoded unsigned key.\n    bytesToSign() {\n        return this.keyBytes;\n    }\n    // Encode signed key into bytes.\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.SignedPublicKey.encode(this).finish();\n    }\n    // Decode signed key from bytes.\n    static fromBytes(bytes) {\n        return new SignedPublicKey(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.SignedPublicKey.decode(bytes));\n    }\n    toLegacyKey() {\n        if (!this.isFromLegacyKey()) {\n            throw new Error(\"cannot be converted to legacy key\");\n        }\n        let signature = this.signature;\n        if (signature.walletEcdsaCompact) {\n            signature = new Signature({\n                ecdsaCompact: signature.walletEcdsaCompact,\n            });\n        }\n        return new PublicKey({\n            timestamp: this.timestamp,\n            secp256k1Uncompressed: this.secp256k1Uncompressed,\n            signature,\n        });\n    }\n    static fromLegacyKey(legacyKey, signedByWallet) {\n        if (!legacyKey.signature) {\n            throw new Error(\"key is not signed\");\n        }\n        let signature = legacyKey.signature;\n        if (signedByWallet) {\n            signature = new Signature({\n                walletEcdsaCompact: signature.ecdsaCompact,\n            });\n        }\n        return new SignedPublicKey({\n            keyBytes: legacyKey.bytesToSign(),\n            signature,\n        });\n    }\n}\n// LEGACY: PublicKey optionally signed with another trusted key pair or a wallet.\n// PublicKeys can be generated through PrivateKey.generate()\nclass PublicKey extends UnsignedPublicKey {\n    constructor(obj) {\n        super({\n            createdNs: obj.timestamp.mul(1000000),\n            secp256k1Uncompressed: obj.secp256k1Uncompressed,\n        });\n        if (obj.signature) {\n            // Handle a case where Flutter was publishing signatures with walletEcdsaCompact\n            // instead of ecdsaCompact for v1 keys.\n            if (!obj.signature.ecdsaCompact && obj.signature.walletEcdsaCompact) {\n                this.signature = new Signature({\n                    ecdsaCompact: {\n                        bytes: obj.signature.walletEcdsaCompact.bytes,\n                        recovery: obj.signature.walletEcdsaCompact.recovery,\n                    },\n                });\n            }\n            else {\n                this.signature = new Signature(obj.signature);\n            }\n        }\n    }\n    get timestamp() {\n        return this.createdNs.div(1000000);\n    }\n    bytesToSign() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.PublicKey.encode({\n            timestamp: this.timestamp,\n            secp256k1Uncompressed: this.secp256k1Uncompressed,\n        }).finish();\n    }\n    // sign the key using a wallet\n    async signWithWallet(wallet) {\n        const sigString = await wallet.signMessage(WalletSigner.identitySigRequestText(this.bytesToSign()));\n        const { bytes, recovery } = splitSignature(sigString);\n        this.signature = new Signature({\n            ecdsaCompact: {\n                bytes,\n                recovery,\n            },\n        });\n    }\n    // Assume the key was signed by a wallet and\n    // return the wallet address that validates\n    // the signature for this key.\n    walletSignatureAddress() {\n        if (!this.signature) {\n            throw new Error(\"key is not signed\");\n        }\n        const digest = (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToBytes)((0,viem__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(WalletSigner.identitySigRequestText(this.bytesToSign())));\n        const pk = this.signature.getPublicKey(digest);\n        if (!pk) {\n            throw new Error(\"key signature is malformed\");\n        }\n        return pk.getEthereumAddress();\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.PublicKey.encode(this).finish();\n    }\n    static fromBytes(bytes) {\n        return new PublicKey(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.PublicKey.decode(bytes));\n    }\n}\n\n// LEGACY: PublicKeyBundle packages all the keys that a participant should advertise.\n// The PreKey must be signed by the IdentityKey.\n// The IdentityKey must be signed by the wallet to authenticate it.\nclass SignedPublicKeyBundle {\n    constructor(bundle) {\n        if (!bundle.identityKey) {\n            throw new Error(\"missing identity key\");\n        }\n        if (!bundle.preKey) {\n            throw new Error(\"missing pre-key\");\n        }\n        this.identityKey = new SignedPublicKey(bundle.identityKey);\n        this.preKey = new SignedPublicKey(bundle.preKey);\n    }\n    walletSignatureAddress() {\n        return this.identityKey.walletSignatureAddress();\n    }\n    equals(other) {\n        return (this.identityKey.equals(other.identityKey) &&\n            this.preKey.equals(other.preKey));\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.SignedPublicKeyBundle.encode(this).finish();\n    }\n    isFromLegacyBundle() {\n        return this.identityKey.isFromLegacyKey() && this.preKey.isFromLegacyKey();\n    }\n    toLegacyBundle() {\n        return new PublicKeyBundle({\n            identityKey: this.identityKey.toLegacyKey(),\n            preKey: this.preKey.toLegacyKey(),\n        });\n    }\n    static fromBytes(bytes) {\n        const decoded = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.SignedPublicKeyBundle.decode(bytes);\n        return new SignedPublicKeyBundle(decoded);\n    }\n    static fromLegacyBundle(bundle) {\n        return new SignedPublicKeyBundle({\n            // Note: I am assuming all PublicKeyBundles passed into this have had their identity keys signed by a wallet\n            // Maybe that is not universally true in the future\n            identityKey: SignedPublicKey.fromLegacyKey(bundle.identityKey, true),\n            preKey: SignedPublicKey.fromLegacyKey(bundle.preKey),\n        });\n    }\n}\n// LEGACY: PublicKeyBundle packages all the keys that a participant should advertise.\n// The PreKey must be signed by the IdentityKey.\n// The IdentityKey can be signed by the wallet to authenticate it.\nclass PublicKeyBundle {\n    constructor(bundle) {\n        if (!bundle.identityKey) {\n            throw new Error(\"missing identity key\");\n        }\n        if (!bundle.preKey) {\n            throw new Error(\"missing pre-key\");\n        }\n        this.identityKey = new PublicKey(bundle.identityKey);\n        this.preKey = new PublicKey(bundle.preKey);\n    }\n    equals(other) {\n        return (this.identityKey.equals(other.identityKey) &&\n            this.preKey.equals(other.preKey));\n    }\n    walletSignatureAddress() {\n        return this.identityKey.walletSignatureAddress();\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.PublicKeyBundle.encode(this).finish();\n    }\n    static fromBytes(bytes) {\n        const decoded = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.PublicKeyBundle.decode(bytes);\n        return new PublicKeyBundle(decoded);\n    }\n}\n\nclass PreparedMessage {\n    constructor(messageEnvelope, onSend) {\n        this.messageEnvelope = messageEnvelope;\n        this.onSend = onSend;\n    }\n    async messageID() {\n        if (!this.messageEnvelope.message) {\n            throw new Error(\"no envelope message\");\n        }\n        return bytesToHex(await sha256(this.messageEnvelope.message));\n    }\n    async send() {\n        return this.onSend();\n    }\n}\n\n/**\n * Stream implements an Asynchronous Iterable over messages received from a topic.\n * As such can be used with constructs like for-await-of, yield*, array destructing, etc.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass Stream {\n    constructor(client, topics, decoder, contentTopicUpdater, onConnectionLost) {\n        this.messages = [];\n        this.resolvers = [];\n        this.topics = topics;\n        this.client = client;\n        this.callback = this.newMessageCallback(decoder, contentTopicUpdater);\n        this.onConnectionLost = onConnectionLost;\n    }\n    // returns new closure to handle incoming messages\n    newMessageCallback(decoder, contentTopicUpdater) {\n        return async (env) => {\n            if (!env.message) {\n                return;\n            }\n            try {\n                const msg = await decoder(env);\n                // decoder can return undefined to signal a message to ignore/skip.\n                if (!msg) {\n                    return;\n                }\n                // Check to see if we should update the stream's content topic subscription\n                if (contentTopicUpdater) {\n                    const topics = contentTopicUpdater(msg);\n                    if (topics) {\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                        this.resubscribeToTopics(topics);\n                    }\n                }\n                // is there a Promise already pending?\n                const resolver = this.resolvers.pop();\n                if (resolver) {\n                    // yes, resolve it\n                    resolver({ value: msg });\n                }\n                else {\n                    // no, push the message into the queue\n                    this.messages.unshift(msg);\n                }\n            }\n            catch (e) {\n                console.warn(e);\n            }\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async start() {\n        if (!this.callback) {\n            throw new Error(\"Missing callback for stream\");\n        }\n        this.subscriptionManager = this.client.apiClient.subscribe({\n            contentTopics: this.topics,\n        }, \n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (env) => {\n            if (!this.callback)\n                return;\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            await this?.callback(env);\n        }, this.onConnectionLost);\n    }\n    static async create(client, topics, decoder, contentTopicUpdater, onConnectionLost) {\n        const stream = new Stream(client, topics, decoder, contentTopicUpdater, onConnectionLost);\n        await stream.start();\n        return stream;\n    }\n    // To make Stream proper Async Iterable\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    // return should be called if the interpreter detects that the stream won't be used anymore,\n    // e.g. a for/of loop was exited via a break. It can also be called explicitly.\n    // https://tc39.es/ecma262/#table-iterator-interface-optional-properties\n    // Note that this means the Stream will be closed after it was used in a for-await-of or yield* or similar.\n    async return() {\n        if (this.subscriptionManager) {\n            await this.subscriptionManager.unsubscribe();\n        }\n        if (!this.callback) {\n            return { value: undefined, done: true };\n        }\n        this.callback = undefined;\n        this.resolvers.forEach((resolve) => \n        // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n        resolve({ value: undefined, done: true }));\n        return { value: undefined, done: true };\n    }\n    // To make Stream proper Async Iterator\n    // Note that next() will still provide whatever messages were already pending\n    // even after the stream was closed via return().\n    next() {\n        // Is there a message already pending?\n        const msg = this.messages.pop();\n        if (msg) {\n            // yes, return resolved promise\n            return Promise.resolve({ value: msg });\n        }\n        if (!this.callback) {\n            return Promise.resolve({ value: undefined, done: true });\n        }\n        // otherwise return empty Promise and queue its resolver\n        return new Promise((resolve) => this.resolvers.unshift(resolve));\n    }\n    // Unsubscribe from the existing content topics and resubscribe to the given topics.\n    async resubscribeToTopics(topics) {\n        if (!this.callback || !this.subscriptionManager) {\n            throw new Error(\"Missing callback for stream\");\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (typeof this.subscriptionManager?.updateContentTopics === \"function\") {\n            return this.subscriptionManager.updateContentTopics(topics);\n        }\n        await this.subscriptionManager.unsubscribe();\n        this.topics = topics;\n        this.subscriptionManager = this.client.apiClient.subscribe({\n            contentTopics: this.topics,\n        }, \n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (env) => {\n            if (!this.callback)\n                return;\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            await this?.callback(env);\n        }, this.onConnectionLost);\n    }\n}\n\nconst { b64Decode, b64Encode } = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.fetcher;\nfunction concat(a, b) {\n    const ab = new Uint8Array(a.length + b.length);\n    ab.set(a);\n    ab.set(b, a.length);\n    return ab;\n}\nfunction numberToUint8Array(num) {\n    // Create a buffer for a 32-bit integer\n    const buffer = new ArrayBuffer(4);\n    const view = new DataView(buffer);\n    // Set the number in the buffer\n    view.setInt32(0, num, true); // true for little-endian\n    // Create Uint8Array from buffer\n    return new Uint8Array(buffer);\n}\nfunction uint8ArrayToNumber(arr) {\n    const buffer = arr.buffer;\n    const view = new DataView(buffer);\n    // Read the number from the buffer\n    return view.getInt32(0, true); // true for little-endian\n}\n\nfunction dateToNs(date) {\n    return long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromNumber(date.valueOf()).multiply(1_000_000);\n}\nfunction nsToDate(ns) {\n    return new Date(ns.divide(1_000_000).toNumber());\n}\nconst toNanoString = (d) => {\n    return d && dateToNs(d).toString();\n};\nconst fromNanoString = (s) => {\n    if (!s) {\n        return undefined;\n    }\n    return nsToDate(long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromString(s));\n};\n\nclass KeystoreError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.code = code;\n    }\n}\n\n// Validates the Keystore response. Throws on errors or missing fields.\n// Returns a type with all possibly undefined fields required to be defined\nconst getResultOrThrow = (response) => {\n    if (response.error) {\n        throw new KeystoreError(response.error.code, response.error.message);\n    }\n    if (!response.result) {\n        throw new KeystoreError(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.ErrorCode.ERROR_CODE_UNSPECIFIED, \"No result from Keystore\");\n    }\n    if (\"encrypted\" in response.result && !response.result.encrypted) {\n        throw new Error(\"Missing ciphertext\");\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (\"decrypted\" in response.result && !response.result.decrypted) {\n        throw new Error(\"Missing decrypted result\");\n    }\n    return response.result;\n};\nconst buildDecryptV1Request = (messages, myPublicKeyBundle) => {\n    return {\n        requests: messages.map((m) => {\n            const sender = new PublicKeyBundle({\n                identityKey: m.header.sender?.identityKey,\n                preKey: m.header.sender?.preKey,\n            });\n            const isSender = myPublicKeyBundle.equals(sender);\n            return {\n                payload: m.ciphertext,\n                peerKeys: isSender\n                    ? new PublicKeyBundle({\n                        identityKey: m.header.recipient?.identityKey,\n                        preKey: m.header.recipient?.preKey,\n                    })\n                    : sender,\n                headerBytes: m.headerBytes,\n                isSender,\n            };\n        }),\n    };\n};\n\nconst buildContentTopic = (name) => `/xmtp/0/${name}/proto`;\nconst buildDirectMessageTopic = (sender, recipient) => {\n    // EIP55 normalize the address case.\n    const members = [(0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(sender), (0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(recipient)];\n    members.sort();\n    return buildContentTopic(`dm-${members.join(\"-\")}`);\n};\nconst buildDirectMessageTopicV2 = (randomString) => {\n    return buildContentTopic(`m-${randomString}`);\n};\nconst buildUserContactTopic = (walletAddr) => {\n    // EIP55 normalize the address case.\n    return buildContentTopic(`contact-${(0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(walletAddr)}`);\n};\nconst buildUserIntroTopic = (walletAddr) => {\n    // EIP55 normalize the address case.\n    return buildContentTopic(`intro-${(0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(walletAddr)}`);\n};\nconst buildUserInviteTopic = (walletAddr) => {\n    // EIP55 normalize the address case.\n    return buildContentTopic(`invite-${(0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(walletAddr)}`);\n};\nconst buildUserPrivateStoreTopic = (addrPrefixedKey) => {\n    // e.g. \"0x1111111111222222222233333333334444444444/key_bundle\"\n    return buildContentTopic(`privatestore-${addrPrefixedKey}`);\n};\nconst buildUserPrivatePreferencesTopic = (identifier) => buildContentTopic(`userpreferences-${identifier}`);\n// validate that a topic only contains ASCII characters 33-127\nconst isValidTopic = (topic) => {\n    const regex = /^[\\x21-\\x7F]+$/;\n    const index = topic.indexOf(\"0/\");\n    if (index !== -1) {\n        const unwrappedTopic = topic.substring(index + 2, topic.lastIndexOf(\"/proto\"));\n        return regex.test(unwrappedTopic);\n    }\n    return false;\n};\n\n/**\n * ConversationV1 allows you to view, stream, and send messages to/from a peer address\n */\nclass ConversationV1 {\n    constructor(client, address, createdAt) {\n        this.conversationVersion = \"v1\";\n        this.context = undefined;\n        this.peerAddress = (0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(address);\n        this.client = client;\n        this.createdAt = createdAt;\n    }\n    get clientAddress() {\n        return this.client.address;\n    }\n    async allow() {\n        await this.client.contacts.allow([this.peerAddress]);\n    }\n    async deny() {\n        await this.client.contacts.deny([this.peerAddress]);\n    }\n    get isAllowed() {\n        return this.client.contacts.isAllowed(this.peerAddress);\n    }\n    get isDenied() {\n        return this.client.contacts.isDenied(this.peerAddress);\n    }\n    get consentState() {\n        return this.client.contacts.consentState(this.peerAddress);\n    }\n    get topic() {\n        return buildDirectMessageTopic(this.peerAddress, this.client.address);\n    }\n    get ephemeralTopic() {\n        return buildDirectMessageTopic(this.peerAddress, this.client.address).replace(\"/xmtp/0/dm-\", \"/xmtp/0/dmE-\");\n    }\n    /**\n     * Returns a list of all messages to/from the peerAddress\n     */\n    async messages(opts) {\n        const topic = buildDirectMessageTopic(this.peerAddress, this.client.address);\n        const messages = await this.client.listEnvelopes(topic, this.processEnvelope.bind(this), opts);\n        return this.decryptBatch(messages, topic, false);\n    }\n    messagesPaginated(opts) {\n        return this.client.listEnvelopesPaginated(this.topic, \n        // This won't be performant once we start supporting a remote keystore\n        // TODO: Either better batch support or we ditch this under-utilized feature\n        this.decodeMessage.bind(this), opts);\n    }\n    // decodeMessage takes an envelope and either returns a `DecodedMessage` or throws if an error occurs\n    async decodeMessage(env) {\n        if (!env.contentTopic) {\n            throw new Error(\"Missing content topic\");\n        }\n        const msg = await this.processEnvelope(env);\n        const decryptResults = await this.decryptBatch([msg], env.contentTopic, true);\n        if (!decryptResults.length) {\n            throw new Error(\"No results\");\n        }\n        return decryptResults[0];\n    }\n    async prepareMessage(content, // eslint-disable-line @typescript-eslint/no-explicit-any\n    options) {\n        let topics;\n        let recipient = await this.client.getUserContact(this.peerAddress);\n        if (!recipient) {\n            throw new Error(`recipient ${this.peerAddress} is not registered`);\n        }\n        if (!(recipient instanceof PublicKeyBundle)) {\n            recipient = recipient.toLegacyBundle();\n        }\n        const topic = options?.ephemeral ? this.ephemeralTopic : this.topic;\n        if (!this.client.contacts.addresses.has(this.peerAddress)) {\n            topics = [\n                buildUserIntroTopic(this.peerAddress),\n                buildUserIntroTopic(this.client.address),\n                topic,\n            ];\n            this.client.contacts.addresses.add(this.peerAddress);\n        }\n        else {\n            topics = [topic];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const { payload } = await this.client.encodeContent(content, options);\n        const msg = await this.createMessage(payload, recipient, options?.timestamp);\n        const msgBytes = msg.toBytes();\n        const env = {\n            contentTopic: topic,\n            message: msgBytes,\n            timestampNs: toNanoString(msg.sent),\n        };\n        return new PreparedMessage(env, async () => {\n            await this.client.publishEnvelopes(topics.map((topic) => ({\n                contentTopic: topic,\n                message: msgBytes,\n                timestamp: msg.sent,\n            })));\n            return DecodedMessage.fromV1Message(msg, content, options?.contentType || _xmtp_content_type_text__WEBPACK_IMPORTED_MODULE_13__.ContentTypeText, payload, topic, this);\n        });\n    }\n    /**\n     * Returns a Stream of any new messages to/from the peerAddress\n     */\n    streamMessages(onConnectionLost) {\n        return Stream.create(this.client, [this.topic], async (env) => this.decodeMessage(env), undefined, onConnectionLost);\n    }\n    async processEnvelope({ message, contentTopic, }) {\n        if (!message || !message.length) {\n            throw new Error(\"empty envelope\");\n        }\n        const decoded = await MessageV1.fromBytes(message);\n        const { senderAddress, recipientAddress } = decoded;\n        // Filter for topics\n        if (!senderAddress ||\n            !recipientAddress ||\n            !contentTopic ||\n            buildDirectMessageTopic(senderAddress, recipientAddress) !== this.topic) {\n            throw new Error(\"Headers do not match intended recipient\");\n        }\n        return decoded;\n    }\n    streamEphemeral(onConnectionLost) {\n        return Stream.create(this.client, [this.ephemeralTopic], this.decodeMessage.bind(this), undefined, onConnectionLost);\n    }\n    /**\n     * Send a message into the conversation.\n     */\n    async send(content, options) {\n        let topics;\n        let recipient = await this.client.getUserContact(this.peerAddress);\n        if (!recipient) {\n            throw new Error(`recipient ${this.peerAddress} is not registered`);\n        }\n        if (!(recipient instanceof PublicKeyBundle)) {\n            recipient = recipient.toLegacyBundle();\n        }\n        const topic = options?.ephemeral ? this.ephemeralTopic : this.topic;\n        if (!this.client.contacts.addresses.has(this.peerAddress)) {\n            topics = [\n                buildUserIntroTopic(this.peerAddress),\n                buildUserIntroTopic(this.client.address),\n                topic,\n            ];\n            this.client.contacts.addresses.add(this.peerAddress);\n        }\n        else {\n            topics = [topic];\n        }\n        const contentType = options?.contentType || _xmtp_content_type_text__WEBPACK_IMPORTED_MODULE_13__.ContentTypeText;\n        const { payload } = await this.client.encodeContent(content, options);\n        const msg = await this.createMessage(payload, recipient, options?.timestamp);\n        await this.client.publishEnvelopes(topics.map((topic) => ({\n            contentTopic: topic,\n            message: msg.toBytes(),\n            timestamp: msg.sent,\n        })));\n        // if the conversation consent state is unknown, we assume the user has\n        // consented to the conversation by sending a message into it\n        if (this.consentState === \"unknown\") {\n            // add conversation to the allow list\n            await this.allow();\n        }\n        return DecodedMessage.fromV1Message(msg, content, contentType, payload, topic, this);\n    }\n    async decryptBatch(messages, topic, throwOnError = false) {\n        const responses = (await this.client.keystore.decryptV1(buildDecryptV1Request(messages, this.client.publicKeyBundle))).responses;\n        const out = [];\n        for (let i = 0; i < responses.length; i++) {\n            const result = responses[i];\n            const message = messages[i];\n            try {\n                const { decrypted } = getResultOrThrow(result);\n                out.push(await this.buildDecodedMessage(message, decrypted, topic));\n            }\n            catch (e) {\n                if (throwOnError) {\n                    throw e;\n                }\n                console.warn(\"Error decoding content\", e);\n            }\n        }\n        return out;\n    }\n    async buildDecodedMessage(message, decrypted, topic) {\n        const { content, contentType, error, contentFallback } = await this.client.decodeContent(decrypted);\n        return DecodedMessage.fromV1Message(message, content, contentType, decrypted, topic, this, error, contentFallback);\n    }\n    async createMessage(\n    // Payload is expected to be the output of `client.encodeContent`\n    payload, recipient, timestamp) {\n        timestamp = timestamp || new Date();\n        return MessageV1.encode(this.client.keystore, payload, this.client.publicKeyBundle, recipient, timestamp);\n    }\n}\n/**\n * ConversationV2\n */\nclass ConversationV2 {\n    constructor(client, topic, peerAddress, createdAt, context, consentProof) {\n        this.conversationVersion = \"v2\";\n        this.topic = topic;\n        this.createdAt = createdAt;\n        this.context = context;\n        this.client = client;\n        this.peerAddress = peerAddress;\n        this.consentProof = consentProof;\n    }\n    get clientAddress() {\n        return this.client.address;\n    }\n    async allow() {\n        await this.client.contacts.allow([this.peerAddress]);\n    }\n    async deny() {\n        await this.client.contacts.deny([this.peerAddress]);\n    }\n    get isAllowed() {\n        return this.client.contacts.isAllowed(this.peerAddress);\n    }\n    get isDenied() {\n        return this.client.contacts.isDenied(this.peerAddress);\n    }\n    get consentState() {\n        return this.client.contacts.consentState(this.peerAddress);\n    }\n    get consentProofPayload() {\n        return this.consentProof;\n    }\n    /**\n     * Returns a list of all messages to/from the peerAddress\n     */\n    async messages(opts) {\n        const messages = await this.client.listEnvelopes(this.topic, this.processEnvelope.bind(this), opts);\n        return this.decryptBatch(messages, false);\n    }\n    messagesPaginated(opts) {\n        return this.client.listEnvelopesPaginated(this.topic, this.decodeMessage.bind(this), opts);\n    }\n    get ephemeralTopic() {\n        return this.topic.replace(\"/xmtp/0/m\", \"/xmtp/0/mE\");\n    }\n    streamEphemeral(onConnectionLost) {\n        return Stream.create(this.client, [this.ephemeralTopic], this.decodeMessage.bind(this), undefined, onConnectionLost);\n    }\n    /**\n     * Returns a Stream of any new messages to/from the peerAddress\n     */\n    streamMessages(onConnectionLost) {\n        return Stream.create(this.client, [this.topic], this.decodeMessage.bind(this), undefined, onConnectionLost);\n    }\n    /**\n     * Send a message into the conversation\n     */\n    async send(content, options) {\n        const { payload, shouldPush } = await this.client.encodeContent(content, options);\n        const msg = await this.createMessage(payload, shouldPush, options?.timestamp);\n        const topic = options?.ephemeral ? this.ephemeralTopic : this.topic;\n        await this.client.publishEnvelopes([\n            {\n                contentTopic: topic,\n                message: msg.toBytes(),\n                timestamp: msg.sent,\n            },\n        ]);\n        const contentType = options?.contentType || _xmtp_content_type_text__WEBPACK_IMPORTED_MODULE_13__.ContentTypeText;\n        // if the conversation consent state is unknown, we assume the user has\n        // consented to the conversation by sending a message into it\n        if (this.consentState === \"unknown\") {\n            // add conversation to the allow list\n            await this.allow();\n        }\n        return DecodedMessage.fromV2Message(msg, content, contentType, topic, payload, this, this.client.address);\n    }\n    async createMessage(\n    // Payload is expected to have already gone through `client.encodeContent`\n    payload, shouldPush, timestamp) {\n        const header = {\n            topic: this.topic,\n            createdNs: dateToNs(timestamp || new Date()),\n        };\n        const headerBytes = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.MessageHeaderV2.encode(header).finish();\n        const digest = await sha256(concat(headerBytes, payload));\n        const signed = {\n            payload,\n            sender: this.client.signedPublicKeyBundle,\n            signature: await this.client.keystore.signDigest({\n                digest,\n                prekeyIndex: 0,\n                identityKey: undefined,\n            }),\n        };\n        const signedBytes = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.content.SignedContent.encode(signed).finish();\n        const { encrypted: ciphertext, senderHmac } = await this.encryptMessage(signedBytes, headerBytes);\n        const protoMsg = {\n            v1: undefined,\n            v2: { headerBytes, ciphertext, senderHmac, shouldPush },\n        };\n        const bytes = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.Message.encode(protoMsg).finish();\n        return MessageV2.create(protoMsg, header, bytes, senderHmac, shouldPush);\n    }\n    async decryptBatch(messages, throwOnError = false) {\n        const responses = (await this.client.keystore.decryptV2(this.buildDecryptRequest(messages))).responses;\n        const out = [];\n        for (let i = 0; i < responses.length; i++) {\n            const result = responses[i];\n            const message = messages[i];\n            try {\n                const { decrypted } = getResultOrThrow(result);\n                out.push(await this.buildDecodedMessage(message, decrypted));\n            }\n            catch (e) {\n                if (throwOnError) {\n                    throw e;\n                }\n                console.warn(\"Error decoding content\", e);\n            }\n        }\n        return out;\n    }\n    buildDecryptRequest(messages) {\n        return {\n            requests: messages.map((m) => {\n                return {\n                    payload: m.ciphertext,\n                    headerBytes: m.headerBytes,\n                    contentTopic: this.topic,\n                };\n            }),\n        };\n    }\n    async encryptMessage(payload, headerBytes) {\n        const { responses } = await this.client.keystore.encryptV2({\n            requests: [\n                {\n                    payload,\n                    headerBytes,\n                    contentTopic: this.topic,\n                },\n            ],\n        });\n        if (responses.length !== 1) {\n            throw new Error(\"Invalid response length\");\n        }\n        const { encrypted, senderHmac } = getResultOrThrow(responses[0]);\n        return { encrypted, senderHmac };\n    }\n    async buildDecodedMessage(msg, decrypted) {\n        // Decode the decrypted bytes into SignedContent\n        const signed = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.content.SignedContent.decode(decrypted);\n        if (!signed.sender?.identityKey ||\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            !signed.sender?.preKey ||\n            !signed.signature) {\n            throw new Error(\"incomplete signed content\");\n        }\n        await validatePrekeys(signed);\n        // Verify the signature\n        const digest = await sha256(concat(msg.headerBytes, signed.payload));\n        if (\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        !new SignedPublicKey(signed.sender?.preKey).verify(new Signature(signed.signature), digest)) {\n            throw new Error(\"invalid signature\");\n        }\n        // Derive the sender address from the valid signature\n        const senderAddress = await new SignedPublicKeyBundle(signed.sender).walletSignatureAddress();\n        const { content: content$1, contentType, error, contentFallback } = await this.client.decodeContent(signed.payload);\n        return DecodedMessage.fromV2Message(msg, content$1, contentType, this.topic, signed.payload, this, senderAddress, error, contentFallback);\n    }\n    async prepareMessage(content, // eslint-disable-line @typescript-eslint/no-explicit-any\n    options) {\n        const { payload, shouldPush } = await this.client.encodeContent(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        content, options);\n        const msg = await this.createMessage(payload, shouldPush, options?.timestamp);\n        const msgBytes = msg.toBytes();\n        const topic = options?.ephemeral ? this.ephemeralTopic : this.topic;\n        const env = {\n            contentTopic: topic,\n            message: msgBytes,\n            timestampNs: toNanoString(msg.sent),\n        };\n        return new PreparedMessage(env, async () => {\n            await this.client.publishEnvelopes([\n                {\n                    contentTopic: topic,\n                    message: msgBytes,\n                    timestamp: msg.sent,\n                },\n            ]);\n            return DecodedMessage.fromV2Message(msg, content, options?.contentType || _xmtp_content_type_text__WEBPACK_IMPORTED_MODULE_13__.ContentTypeText, topic, payload, this, this.client.address);\n        });\n    }\n    async processEnvelope(env) {\n        if (!env.message || !env.contentTopic) {\n            throw new Error(\"empty envelope\");\n        }\n        const msg = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.Message.decode(env.message);\n        if (!msg.v2) {\n            throw new Error(\"unknown message version\");\n        }\n        const header = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.MessageHeaderV2.decode(msg.v2.headerBytes);\n        if (header.topic !== this.topic) {\n            throw new Error(\"topic mismatch\");\n        }\n        return MessageV2.create(msg, header, env.message, msg.v2.senderHmac, msg.v2.shouldPush);\n    }\n    async decodeMessage(env) {\n        if (!env.contentTopic) {\n            throw new Error(\"Missing content topic\");\n        }\n        const msg = await this.processEnvelope(env);\n        const decryptResults = await this.decryptBatch([msg], true);\n        if (!decryptResults.length) {\n            throw new Error(\"No results\");\n        }\n        return decryptResults[0];\n    }\n}\nasync function validatePrekeys(signed) {\n    // Check that the pre key is signed by the identity key\n    // this is required to chain the prekey-signed message to the identity key\n    // and finally to the user's wallet address\n    const senderPreKey = signed.sender?.preKey;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!senderPreKey || !senderPreKey.signature || !senderPreKey.keyBytes) {\n        throw new Error(\"missing pre-key or pre-key signature\");\n    }\n    const senderIdentityKey = signed.sender?.identityKey;\n    if (!senderIdentityKey) {\n        throw new Error(\"missing identity key in bundle\");\n    }\n    const isValidPrekey = await new SignedPublicKey(senderIdentityKey).verifyKey(new SignedPublicKey(senderPreKey));\n    if (!isValidPrekey) {\n        throw new Error(\"pre key not signed by identity key\");\n    }\n}\n\nconst headerBytesAndCiphertext = (msg) => {\n    if (msg.v1?.ciphertext) {\n        return [msg.v1.headerBytes, new Ciphertext(msg.v1.ciphertext)];\n    }\n    if (msg.v2?.ciphertext) {\n        return [msg.v2.headerBytes, new Ciphertext(msg.v2.ciphertext)];\n    }\n    throw new Error(\"unknown message version\");\n};\n// Message is basic unit of communication on the network.\n// Message timestamp is set by the sender.\nclass MessageBase {\n    constructor(id, bytes, obj) {\n        [this.headerBytes, this.ciphertext] = headerBytesAndCiphertext(obj);\n        this.id = id;\n        this.bytes = bytes;\n    }\n    toBytes() {\n        return this.bytes;\n    }\n}\n// Message header carries the sender and recipient keys used to protect message.\n// Message timestamp is set by the sender.\nclass MessageV1 extends MessageBase {\n    constructor(id, bytes, obj, header, senderAddress) {\n        super(id, bytes, obj);\n        this.conversation = undefined;\n        this.senderAddress = senderAddress;\n        this.header = header;\n    }\n    static async create(obj, header, bytes) {\n        if (!header.sender) {\n            throw new Error(\"missing message sender\");\n        }\n        const senderAddress = new PublicKeyBundle(header.sender).walletSignatureAddress();\n        const id = bytesToHex(await sha256(bytes));\n        return new MessageV1(id, bytes, obj, header, senderAddress);\n    }\n    get sent() {\n        return new Date(this.header.timestamp.toNumber());\n    }\n    // wallet address derived from the signature of the message recipient\n    get recipientAddress() {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.header?.recipient?.identityKey) {\n            return undefined;\n        }\n        return new PublicKey(this.header.recipient.identityKey).walletSignatureAddress();\n    }\n    async decrypt(keystore, myPublicKeyBundle) {\n        const responses = (await keystore.decryptV1(buildDecryptV1Request([this], myPublicKeyBundle))).responses;\n        if (!responses.length) {\n            throw new Error(\"No response from Keystore\");\n        }\n        const { decrypted } = getResultOrThrow(responses[0]);\n        return decrypted;\n    }\n    static fromBytes(bytes) {\n        const message$1 = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.Message.decode(bytes);\n        const [headerBytes] = headerBytesAndCiphertext(message$1);\n        const header = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.MessageHeaderV1.decode(headerBytes);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!header) {\n            throw new Error(\"missing message header\");\n        }\n        if (!header.sender) {\n            throw new Error(\"missing message sender\");\n        }\n        if (!header.sender.identityKey) {\n            throw new Error(\"missing message sender identity key\");\n        }\n        if (!header.sender.preKey) {\n            throw new Error(\"missing message sender pre-key\");\n        }\n        if (!header.recipient) {\n            throw new Error(\"missing message recipient\");\n        }\n        if (!header.recipient.identityKey) {\n            throw new Error(\"missing message recipient identity-key\");\n        }\n        if (!header.recipient.preKey) {\n            throw new Error(\"missing message recipient pre-key\");\n        }\n        return MessageV1.create(message$1, header, bytes);\n    }\n    static async encode(keystore, payload, sender, recipient, timestamp) {\n        const header = {\n            sender,\n            recipient,\n            timestamp: long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromNumber(timestamp.getTime()),\n        };\n        const headerBytes = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.MessageHeaderV1.encode(header).finish();\n        const results = await keystore.encryptV1({\n            requests: [\n                {\n                    recipient,\n                    headerBytes,\n                    payload,\n                },\n            ],\n        });\n        if (!results.responses.length) {\n            throw new Error(\"No response from Keystore\");\n        }\n        const { encrypted: ciphertext } = getResultOrThrow(results.responses[0]);\n        const protoMsg = {\n            v1: { headerBytes, ciphertext },\n            v2: undefined,\n        };\n        const bytes = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.Message.encode(protoMsg).finish();\n        return MessageV1.create(protoMsg, header, bytes);\n    }\n}\nclass MessageV2 extends MessageBase {\n    constructor(id, bytes, obj, header, senderHmac, shouldPush) {\n        super(id, bytes, obj);\n        this.header = header;\n        this.senderHmac = senderHmac;\n        this.shouldPush = shouldPush;\n    }\n    static async create(obj, header, bytes, senderHmac, shouldPush) {\n        const id = bytesToHex(await sha256(bytes));\n        return new MessageV2(id, bytes, obj, header, senderHmac, shouldPush);\n    }\n    get sent() {\n        return nsToDate(this.header.createdNs);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass DecodedMessage {\n    constructor({ id, messageVersion, senderAddress, recipientAddress, conversation, contentBytes, contentType, contentTopic, content, sent, error, contentFallback, }) {\n        this.id = id;\n        this.messageVersion = messageVersion;\n        this.senderAddress = senderAddress;\n        this.recipientAddress = recipientAddress;\n        this.conversation = conversation;\n        this.contentType = contentType;\n        this.sent = sent;\n        this.error = error;\n        this.content = content;\n        this.contentTopic = contentTopic;\n        this.contentBytes = contentBytes;\n        this.contentFallback = contentFallback;\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.DecodedMessage.encode({\n            ...this,\n            conversation: {\n                topic: this.conversation.topic,\n                context: this.conversation.context ?? undefined,\n                createdNs: dateToNs(this.conversation.createdAt),\n                peerAddress: this.conversation.peerAddress,\n                consentProofPayload: this.conversation.consentProof ?? undefined,\n            },\n            sentNs: dateToNs(this.sent),\n        }).finish();\n    }\n    static async fromBytes(data, client) {\n        const protoVal = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.message.DecodedMessage.decode(data);\n        const messageVersion = protoVal.messageVersion;\n        if (messageVersion !== \"v1\" && messageVersion !== \"v2\") {\n            throw new Error(\"Invalid message version\");\n        }\n        if (!protoVal.conversation) {\n            throw new Error(\"No conversation reference found\");\n        }\n        const { content, contentType, error, contentFallback } = await client.decodeContent(protoVal.contentBytes);\n        return new DecodedMessage({\n            ...protoVal,\n            content,\n            contentType,\n            error,\n            messageVersion,\n            sent: nsToDate(protoVal.sentNs),\n            conversation: conversationReferenceToConversation(protoVal.conversation, client, messageVersion),\n            contentFallback,\n        });\n    }\n    static fromV1Message(message, content, contentType, contentBytes, contentTopic, conversation, error, contentFallback) {\n        const { id, senderAddress, recipientAddress, sent } = message;\n        if (!senderAddress) {\n            throw new Error(\"Sender address is required\");\n        }\n        return new DecodedMessage({\n            id,\n            messageVersion: \"v1\",\n            senderAddress,\n            recipientAddress,\n            sent,\n            content,\n            contentBytes,\n            contentType,\n            contentTopic,\n            conversation,\n            error,\n            contentFallback,\n        });\n    }\n    static fromV2Message(message, content, contentType, contentTopic, contentBytes, conversation, senderAddress, error, contentFallback) {\n        const { id, sent } = message;\n        return new DecodedMessage({\n            id,\n            messageVersion: \"v2\",\n            senderAddress,\n            sent,\n            content,\n            contentBytes,\n            contentType,\n            contentTopic,\n            conversation,\n            error,\n            contentFallback,\n        });\n    }\n}\nfunction conversationReferenceToConversation(reference, client, version) {\n    if (version === \"v1\") {\n        return new ConversationV1(client, reference.peerAddress, nsToDate(reference.createdNs));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (version === \"v2\") {\n        return new ConversationV2(client, reference.topic, reference.peerAddress, nsToDate(reference.createdNs), reference.context, reference.consentProofPayload);\n    }\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new Error(`Unknown conversation version ${version}`);\n}\nfunction decodeContent(contentBytes, client) {\n    return client.decodeContent(contentBytes);\n}\n\nclass NoMatchingPreKeyError extends Error {\n    constructor(preKey) {\n        super(`no pre-key matches: ${bytesToHex(preKey.secp256k1Uncompressed.bytes)}`);\n    }\n}\n\n// PrivateKeyBundle bundles the private keys corresponding to a PublicKeyBundle for convenience.\n// This bundle must not be shared with anyone, although will have to be persisted\n// somehow so that older messages can be decrypted again.\nclass PrivateKeyBundleV2 {\n    constructor(bundle) {\n        this.version = 2;\n        if (!bundle.identityKey) {\n            throw new Error(\"missing identity key\");\n        }\n        this.identityKey = new SignedPrivateKey(bundle.identityKey);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        this.preKeys = (bundle.preKeys || []).map((k) => new SignedPrivateKey(k));\n    }\n    // Generate a new key bundle with the preKey signed byt the identityKey.\n    // Optionally sign the identityKey with the provided wallet as well.\n    static async generate(wallet) {\n        const identityKey = await SignedPrivateKey.generate(new WalletSigner(wallet));\n        const bundle = new PrivateKeyBundleV2({\n            identityKey,\n            preKeys: [],\n        });\n        await bundle.addPreKey();\n        return bundle;\n    }\n    // Return the current (latest) pre-key (to be advertised).\n    getCurrentPreKey() {\n        return this.preKeys[0];\n    }\n    // Find pre-key matching the provided public key.\n    findPreKey(which) {\n        const preKey = this.preKeys.find((key) => key.matches(which));\n        if (!preKey) {\n            throw new NoMatchingPreKeyError(which);\n        }\n        return preKey;\n    }\n    // Generate a new pre-key to be used as the current pre-key.\n    async addPreKey() {\n        this._publicKeyBundle = undefined;\n        const preKey = await SignedPrivateKey.generate(this.identityKey);\n        this.preKeys.unshift(preKey);\n    }\n    // Return a key bundle with the current pre-key.\n    getPublicKeyBundle() {\n        if (!this._publicKeyBundle) {\n            this._publicKeyBundle = new SignedPublicKeyBundle({\n                identityKey: this.identityKey.publicKey,\n                preKey: this.getCurrentPreKey().publicKey,\n            });\n        }\n        return this._publicKeyBundle;\n    }\n    // sharedSecret derives a secret from peer's key bundles using a variation of X3DH protocol\n    // where the sender's ephemeral key pair is replaced by the sender's pre-key.\n    // @peer is the peer's public key bundle\n    // @myPreKey indicates which of my preKeys should be used to derive the secret\n    // @recipient indicates if this is the sending or receiving side.\n    async sharedSecret(peer, myPreKey, isRecipient) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!peer.identityKey || !peer.preKey) {\n            throw new Error(\"invalid peer key bundle\");\n        }\n        if (!(await peer.identityKey.verifyKey(peer.preKey))) {\n            throw new Error(\"peer preKey signature invalid\");\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.identityKey) {\n            throw new Error(\"missing identity key\");\n        }\n        let dh1, dh2, preKey;\n        if (isRecipient) {\n            preKey = this.findPreKey(myPreKey);\n            dh1 = preKey.sharedSecret(peer.identityKey);\n            dh2 = this.identityKey.sharedSecret(peer.preKey);\n        }\n        else {\n            preKey = this.findPreKey(myPreKey);\n            dh1 = this.identityKey.sharedSecret(peer.preKey);\n            dh2 = preKey.sharedSecret(peer.identityKey);\n        }\n        const dh3 = preKey.sharedSecret(peer.preKey);\n        const secret = new Uint8Array(dh1.length + dh2.length + dh3.length);\n        secret.set(dh1, 0);\n        secret.set(dh2, dh1.length);\n        secret.set(dh3, dh1.length + dh2.length);\n        return secret;\n    }\n    encode() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.PrivateKeyBundle.encode({\n            v1: undefined,\n            v2: this,\n        }).finish();\n    }\n    validatePublicKeys() {\n        if (!this.identityKey.validatePublicKey()) {\n            return false;\n        }\n        return this.preKeys.every((key) => key.validatePublicKey());\n    }\n    equals(other) {\n        if (this.preKeys.length !== other.preKeys.length) {\n            return false;\n        }\n        for (let i = 0; i < this.preKeys.length; i++) {\n            if (!this.preKeys[i].equals(other.preKeys[i])) {\n                return false;\n            }\n        }\n        return this.identityKey.equals(other.identityKey);\n    }\n    static fromLegacyBundle(bundle) {\n        return new PrivateKeyBundleV2({\n            identityKey: SignedPrivateKey.fromLegacyKey(bundle.identityKey, true),\n            preKeys: bundle.preKeys.map((k) => SignedPrivateKey.fromLegacyKey(k)),\n        });\n    }\n}\n// PrivateKeyBundle bundles the private keys corresponding to a PublicKeyBundle for convenience.\n// This bundle must not be shared with anyone, although will have to be persisted\n// somehow so that older messages can be decrypted again.\nclass PrivateKeyBundleV1 {\n    constructor(bundle) {\n        this.version = 1;\n        if (!bundle.identityKey) {\n            throw new Error(\"missing identity key\");\n        }\n        this.identityKey = new PrivateKey(bundle.identityKey);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        this.preKeys = (bundle.preKeys || []).map((k) => new PrivateKey(k));\n    }\n    // Generate a new key bundle with the preKey signed byt the identityKey.\n    // Optionally sign the identityKey with the provided wallet as well.\n    static async generate(wallet) {\n        const identityKey = PrivateKey.generate();\n        if (wallet) {\n            await identityKey.publicKey.signWithWallet(wallet);\n        }\n        const bundle = new PrivateKeyBundleV1({\n            identityKey,\n            preKeys: [],\n        });\n        await bundle.addPreKey();\n        return bundle;\n    }\n    // Return the current (latest) pre-key (to be advertised).\n    getCurrentPreKey() {\n        return this.preKeys[0];\n    }\n    // Find pre-key matching the provided public key.\n    findPreKey(which) {\n        const preKey = this.preKeys.find((key) => key.matches(which));\n        if (!preKey) {\n            throw new NoMatchingPreKeyError(which);\n        }\n        return preKey;\n    }\n    // Generate a new pre-key to be used as the current pre-key.\n    async addPreKey() {\n        this._publicKeyBundle = undefined;\n        const preKey = PrivateKey.generate();\n        await this.identityKey.signKey(preKey.publicKey);\n        this.preKeys.unshift(preKey);\n    }\n    // Return a key bundle with the current pre-key.\n    getPublicKeyBundle() {\n        if (!this._publicKeyBundle) {\n            this._publicKeyBundle = new PublicKeyBundle({\n                identityKey: this.identityKey.publicKey,\n                preKey: this.getCurrentPreKey().publicKey,\n            });\n        }\n        return this._publicKeyBundle;\n    }\n    validatePublicKeys() {\n        if (!this.identityKey.validatePublicKey()) {\n            return false;\n        }\n        return this.preKeys.every((key) => key.validatePublicKey());\n    }\n    // sharedSecret derives a secret from peer's key bundles using a variation of X3DH protocol\n    // where the sender's ephemeral key pair is replaced by the sender's pre-key.\n    // @peer is the peer's public key bundle\n    // @myPreKey indicates which of my preKeys should be used to derive the secret\n    // @recipient indicates if this is the sending or receiving side.\n    async sharedSecret(peer, myPreKey, isRecipient) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!peer.identityKey || !peer.preKey) {\n            throw new Error(\"invalid peer key bundle\");\n        }\n        if (!(await peer.identityKey.verifyKey(peer.preKey))) {\n            throw new Error(\"peer preKey signature invalid\");\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.identityKey) {\n            throw new Error(\"missing identity key\");\n        }\n        let dh1, dh2, preKey;\n        if (isRecipient) {\n            preKey = this.findPreKey(myPreKey);\n            dh1 = preKey.sharedSecret(peer.identityKey);\n            dh2 = this.identityKey.sharedSecret(peer.preKey);\n        }\n        else {\n            preKey = this.findPreKey(myPreKey);\n            dh1 = this.identityKey.sharedSecret(peer.preKey);\n            dh2 = preKey.sharedSecret(peer.identityKey);\n        }\n        const dh3 = preKey.sharedSecret(peer.preKey);\n        const secret = new Uint8Array(dh1.length + dh2.length + dh3.length);\n        secret.set(dh1, 0);\n        secret.set(dh2, dh1.length);\n        secret.set(dh3, dh1.length + dh2.length);\n        return secret;\n    }\n    encode() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.PrivateKeyBundle.encode({\n            v1: this,\n            v2: undefined,\n        }).finish();\n    }\n}\nfunction decodePrivateKeyBundle(bytes) {\n    const b = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.PrivateKeyBundle.decode(bytes);\n    if (b.v1) {\n        return new PrivateKeyBundleV1(b.v1);\n    }\n    if (b.v2) {\n        return new PrivateKeyBundleV2(b.v2);\n    }\n    throw new Error(\"unknown private key bundle version\");\n}\n\nclass AuthData {\n    constructor({ walletAddr, createdNs }) {\n        this.walletAddr = walletAddr;\n        this.createdNs = createdNs;\n    }\n    static create(walletAddr, timestamp) {\n        timestamp = timestamp || new Date();\n        return new AuthData({\n            walletAddr,\n            createdNs: dateToNs(timestamp),\n        });\n    }\n    static fromBytes(bytes) {\n        const res = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.authn.AuthData.decode(bytes);\n        return new AuthData(res);\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.authn.AuthData.encode(this).finish();\n    }\n}\n\nclass Token {\n    constructor({ identityKey, authDataBytes, authDataSignature }) {\n        if (!identityKey) {\n            throw new Error(\"Missing identity key in token\");\n        }\n        if (!authDataSignature) {\n            throw new Error(\"Missing authDataSignature in token\");\n        }\n        this.identityKey = identityKey;\n        this.authDataBytes = authDataBytes;\n        this.authDataSignature = authDataSignature;\n    }\n    // Get AuthData, generating from bytes and cacheing the first time it is accessed\n    get authData() {\n        if (!this._authData) {\n            this._authData = AuthData.fromBytes(this.authDataBytes);\n        }\n        return this._authData;\n    }\n    get ageMs() {\n        const now = new Date().valueOf();\n        const authData = this.authData;\n        const createdAt = authData.createdNs.div(1_000_000).toNumber();\n        return now - createdAt;\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.authn.Token.encode(this).finish();\n    }\n    static fromBytes(bytes) {\n        return new Token(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.authn.Token.decode(bytes));\n    }\n    toBase64() {\n        return Buffer.from(this.toBytes()).toString(\"base64\");\n    }\n}\n\nconst wrapToken = (token) => {\n    if (token instanceof Token) {\n        return token;\n    }\n    return new Token(token);\n};\nclass KeystoreAuthenticator {\n    constructor(keystore) {\n        this.keystore = keystore;\n    }\n    async createToken(timestamp) {\n        const token = await this.keystore.createAuthToken({\n            timestampNs: timestamp ? dateToNs(timestamp) : undefined,\n        });\n        return wrapToken(token);\n    }\n}\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nconst defaultIsRetryableFn = (err) => !!err;\n// Implements type safe retries of arbitrary async functions\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function retry(fn, args, maxRetries, sleepTime, isRetryableFn = defaultIsRetryableFn, retryCount = 1) {\n    const currRetry = typeof retryCount === \"number\" ? retryCount : 1;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const result = await fn(...args);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return result;\n    }\n    catch (e) {\n        if (!isRetryableFn(e) || currRetry > maxRetries) {\n            throw e;\n        }\n        await sleep(sleepTime);\n        return retry(fn, args, maxRetries, sleepTime, isRetryableFn, currRetry + 1);\n    }\n}\n// Takes an async generator returning pages of envelopes and converts to an async\n// generator returning pages of an arbitrary type using a mapper function\nasync function* mapPaginatedStream(gen, mapper) {\n    for await (const page of gen) {\n        const results = await Promise.allSettled(page.map(mapper));\n        const out = [];\n        for (const result of results) {\n            if (result.status === \"fulfilled\") {\n                out.push(result.value);\n            }\n            else {\n                console.warn(\"Failed to process envelope due to reason: \", result.reason);\n            }\n        }\n        yield out;\n    }\n}\n\nconst version$1 = \"13.0.2\";\n\n// Default to 10 seconds less than expected expiry to give some wiggle room near the end\n// https://github.com/xmtp/xmtp-node-go/blob/main/pkg/api/authentication.go#L18\nconst DEFAULT_MAX_AGE_SECONDS = 60 * 60 - 10;\nclass AuthCache {\n    constructor(authenticator, cacheExpirySeconds = DEFAULT_MAX_AGE_SECONDS) {\n        this.authenticator = authenticator;\n        this.maxAgeMs = cacheExpirySeconds * 1000;\n    }\n    async getToken() {\n        if (!this.token || this.token.ageMs > this.maxAgeMs) {\n            await this.refresh();\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.token.toBase64();\n    }\n    async refresh() {\n        this.token = await this.authenticator.createToken();\n    }\n}\n\nconst XMTP_DEV_WARNING = `\nXX    XX MM    MM TTTTTT PPPPPP   DDDDD   EEEEEEE VV     VV \n XX  XX  MMM  MMM   TT   PP   PP  DD  DD  EE      VV     VV \n  XXXX   MM MM MM   TT   PPPPPP   DD   DD EEEEE    VV   VV  \n XX  XX  MM    MM   TT   PP       DD   DD EE        VV VV   \nXX    XX MM    MM   TT   PP       DDDDDD  EEEEEEE    VVV    \n\nConnected to the XMTP 'dev' network. Use 'production' for production messages.\nhttps://github.com/xmtp/xmtp-js#xmtp-production-and-dev-network-environments\n`;\n\nconst { MessageApi, SortDirection } = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.messageApi;\nconst RETRY_SLEEP_TIME = 100;\nconst ERR_CODE_UNAUTHENTICATED = 16;\nconst clientVersionHeaderKey = \"X-Client-Version\";\nconst appVersionHeaderKey = \"X-App-Version\";\nconst ApiUrls = {\n    local: \"http://localhost:5555\",\n    dev: \"https://dev.xmtp.network\",\n    production: \"https://production.xmtp.network\",\n};\nvar GrpcStatus;\n(function (GrpcStatus) {\n    GrpcStatus[GrpcStatus[\"OK\"] = 0] = \"OK\";\n    GrpcStatus[GrpcStatus[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    GrpcStatus[GrpcStatus[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    GrpcStatus[GrpcStatus[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    GrpcStatus[GrpcStatus[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    GrpcStatus[GrpcStatus[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    GrpcStatus[GrpcStatus[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    GrpcStatus[GrpcStatus[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    GrpcStatus[GrpcStatus[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    GrpcStatus[GrpcStatus[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    GrpcStatus[GrpcStatus[\"ABORTED\"] = 10] = \"ABORTED\";\n    GrpcStatus[GrpcStatus[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    GrpcStatus[GrpcStatus[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    GrpcStatus[GrpcStatus[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    GrpcStatus[GrpcStatus[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    GrpcStatus[GrpcStatus[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    GrpcStatus[GrpcStatus[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(GrpcStatus || (GrpcStatus = {}));\nclass GrpcError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n    static fromObject(err) {\n        return new GrpcError(err.message, err.code);\n    }\n}\nconst isAbortError = (err) => {\n    if (!err) {\n        return false;\n    }\n    if (err.name === \"AbortError\" || err.message.includes(\"aborted\")) {\n        return true;\n    }\n    return false;\n};\nconst isAuthError = (err) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n    if (err && \"code\" in err && err.code === ERR_CODE_UNAUTHENTICATED) {\n        return true;\n    }\n    return false;\n};\nconst isNotAuthError = (err) => !isAuthError(err);\nconst normalizeEnvelope = (env) => {\n    if (!env.message || !env.message.length) {\n        return env;\n    }\n    if (typeof env.message === \"string\") {\n        env.message = b64Decode(env.message);\n    }\n    return env;\n};\n/**\n * ApiClient provides a wrapper for calling the GRPC Gateway generated code.\n * It adds some helpers for dealing with paginated data and automatically retries idempotent calls\n */\nclass HttpApiClient {\n    constructor(pathPrefix, opts) {\n        this.pathPrefix = pathPrefix;\n        this.maxRetries = opts?.maxRetries || 5;\n        this.appVersion = opts?.appVersion;\n        this.version = \"xmtp-js/\" + version$1;\n        if (pathPrefix === ApiUrls.dev) {\n            console.info(XMTP_DEV_WARNING);\n        }\n    }\n    // Raw method for querying the API\n    async _query(req) {\n        try {\n            return await retry(\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            MessageApi.Query, [\n                req,\n                {\n                    pathPrefix: this.pathPrefix,\n                    mode: \"cors\",\n                    headers: this.headers(),\n                },\n            ], this.maxRetries, RETRY_SLEEP_TIME);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (e) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            throw GrpcError.fromObject(e);\n        }\n    }\n    // Raw method for batch-querying the API\n    _batchQuery(req) {\n        return retry(\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        MessageApi.BatchQuery, [\n            req,\n            {\n                pathPrefix: this.pathPrefix,\n                mode: \"cors\",\n                headers: this.headers(),\n            },\n        ], this.maxRetries, RETRY_SLEEP_TIME);\n    }\n    // Raw method for publishing to the API\n    async _publish(req, attemptNumber = 0) {\n        const authToken = await this.getToken();\n        const headers = this.headers();\n        headers.set(\"Authorization\", `Bearer ${authToken}`);\n        try {\n            return await retry(\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            MessageApi.Publish, [\n                req,\n                {\n                    pathPrefix: this.pathPrefix,\n                    mode: \"cors\",\n                    headers,\n                },\n            ], this.maxRetries, RETRY_SLEEP_TIME, \n            // Do not retry UnauthenticatedErrors\n            isNotAuthError);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (e) {\n            // Try at most 2X. If refreshing the auth token doesn't work the first time, it won't work the second time\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            if (isNotAuthError(e) || attemptNumber >= 1) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                throw GrpcError.fromObject(e);\n            }\n            await this.authCache?.refresh();\n            return this._publish(req, attemptNumber + 1);\n        }\n    }\n    // Raw method for subscribing\n    _subscribe(req, cb, onConnectionLost) {\n        const abortController = new AbortController();\n        const doSubscribe = async () => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            while (true) {\n                const startTime = new Date().getTime();\n                try {\n                    await MessageApi.Subscribe(req, cb, {\n                        pathPrefix: this.pathPrefix,\n                        signal: abortController.signal,\n                        mode: \"cors\",\n                        headers: this.headers(),\n                    });\n                    if (abortController.signal.aborted) {\n                        return;\n                    }\n                    console.info(\"Stream connection closed. Resubscribing\");\n                    if (new Date().getTime() - startTime < 1000) {\n                        await sleep(1000);\n                    }\n                    onConnectionLost?.();\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                }\n                catch (err) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                    if (isAbortError(err) || abortController.signal.aborted) {\n                        return;\n                    }\n                    console.info(\"Stream connection closed. Resubscribing\");\n                    if (new Date().getTime() - startTime < 1000) {\n                        await sleep(1000);\n                    }\n                    onConnectionLost?.();\n                }\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        doSubscribe();\n        return {\n            // eslint-disable-next-line @typescript-eslint/require-await\n            unsubscribe: async () => {\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                abortController?.abort();\n            },\n        };\n    }\n    // Use the Query API to return the full contents of any specified topics\n    async query(params, { direction = SortDirection.SORT_DIRECTION_ASCENDING, limit, pageSize, }) {\n        const out = [];\n        const maxPageSize = params.contentTopic.startsWith(\"userpreferences-\")\n            ? 500\n            : 100;\n        // Use queryIteratePages for better performance. 1/100th the number of Promises to resolve compared to queryStream\n        for await (const page of this.queryIteratePages(params, {\n            direction,\n            // If there is a limit of < 100, use that as the page size. Otherwise use 100 and stop if/when limit reached.\n            pageSize: pageSize ? Math.min(pageSize, maxPageSize) : maxPageSize,\n        })) {\n            for (const envelope of page) {\n                out.push(envelope);\n                if (limit && out.length === limit) {\n                    return out;\n                }\n            }\n        }\n        return out;\n    }\n    // Will produce an AsyncGenerator of Envelopes\n    // Uses queryStreamPages under the hood\n    async *queryIterator(params, options) {\n        for await (const page of this.queryIteratePages(params, options)) {\n            for (const envelope of page) {\n                yield envelope;\n            }\n        }\n    }\n    // Creates an async generator that will paginate through the Query API until it reaches the end\n    // Will yield each page of results as needed\n    async *queryIteratePages({ contentTopic, startTime, endTime }, { direction, pageSize = 10 }) {\n        if (!contentTopic || !contentTopic.length) {\n            throw new Error(\"Must specify content topics\");\n        }\n        const startTimeNs = toNanoString(startTime);\n        const endTimeNs = toNanoString(endTime);\n        let cursor;\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        while (true) {\n            const pagingInfo = {\n                limit: pageSize,\n                direction,\n                cursor,\n            };\n            const result = await this._query({\n                contentTopics: [contentTopic],\n                startTimeNs,\n                endTimeNs,\n                pagingInfo,\n            });\n            if (result.envelopes?.length) {\n                yield result.envelopes.map(normalizeEnvelope);\n            }\n            else {\n                return;\n            }\n            if (result.pagingInfo?.cursor) {\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                cursor = result.pagingInfo?.cursor;\n            }\n            else {\n                return;\n            }\n        }\n    }\n    // Take a list of queries and execute them in batches\n    async batchQuery(queries) {\n        // Group queries into batches of 50 (implicit server-side limit) and then perform BatchQueries\n        const BATCH_SIZE = 50;\n        // Keep a list of BatchQueryRequests to execute all at once later\n        const batchRequests = [];\n        // Assemble batches\n        for (let i = 0; i < queries.length; i += BATCH_SIZE) {\n            const queriesInBatch = queries.slice(i, i + BATCH_SIZE);\n            // Perform batch query by first compiling a list of repeated individual QueryRequests\n            // then populating a BatchQueryRequest with that list\n            const constructedQueries = [];\n            for (const queryParams of queriesInBatch) {\n                constructedQueries.push({\n                    contentTopics: [queryParams.contentTopic],\n                    startTimeNs: toNanoString(queryParams.startTime),\n                    endTimeNs: toNanoString(queryParams.endTime),\n                    pagingInfo: {\n                        limit: queryParams.pageSize || 10,\n                        direction: queryParams.direction || SortDirection.SORT_DIRECTION_ASCENDING,\n                    },\n                });\n            }\n            const batchQueryRequest = {\n                requests: constructedQueries,\n            };\n            batchRequests.push(batchQueryRequest);\n        }\n        // Execute batches\n        const batchQueryResponses = await Promise.all(batchRequests.map(async (batch) => this._batchQuery(batch)));\n        // For every batch, read all responses within the batch, and add to a list of lists of envelopes\n        // one top-level list for every original query\n        const allEnvelopes = [];\n        for (const batchResponse of batchQueryResponses) {\n            if (!batchResponse.responses) {\n                // An error on any of the batch query is propagated to the caller\n                // for simplicity, rather than trying to return partial results\n                throw new Error(\"BatchQueryResponse missing responses\");\n            }\n            for (const queryResponse of batchResponse.responses) {\n                if (queryResponse.envelopes) {\n                    allEnvelopes.push(queryResponse.envelopes.map(normalizeEnvelope));\n                }\n                else {\n                    // If no envelopes provided, then add an empty list\n                    allEnvelopes.push([]);\n                }\n            }\n        }\n        return allEnvelopes;\n    }\n    // Publish a message to the network\n    // Will convert timestamps to the appropriate format expected by the network\n    async publish(messages) {\n        const toSend = [];\n        for (const { contentTopic, message, timestamp } of messages) {\n            if (!contentTopic.length) {\n                throw new Error(\"Content topic cannot be empty string\");\n            }\n            if (!message.length) {\n                throw new Error(\"0 length messages not allowed\");\n            }\n            const dt = timestamp || new Date();\n            toSend.push({\n                contentTopic,\n                timestampNs: toNanoString(dt),\n                message: Uint8Array.from(message),\n            });\n        }\n        return this._publish({ envelopes: toSend });\n    }\n    // Subscribe to a list of topics.\n    // Provided callback function will be called on each new message\n    // Returns an unsubscribe function that can be used to end the subscription\n    subscribe(params, callback, onConnectionLost) {\n        if (!params.contentTopics.length) {\n            throw new Error(\"Must provide list of contentTopics to subscribe to\");\n        }\n        return this._subscribe(params, \n        // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n        (env) => callback(normalizeEnvelope(env)), onConnectionLost);\n    }\n    getToken() {\n        if (!this.authCache) {\n            throw new Error(\"AuthCache is not set on API Client\");\n        }\n        return this.authCache.getToken();\n    }\n    setAuthenticator(authenticator, cacheExpirySeconds) {\n        this.authCache = new AuthCache(authenticator, cacheExpirySeconds);\n    }\n    headers() {\n        const headers = new Headers();\n        headers.set(clientVersionHeaderKey, this.version);\n        if (this.appVersion) {\n            headers.set(appVersionHeaderKey, this.appVersion);\n        }\n        return headers;\n    }\n}\n\nconst CLOCK_SKEW_OFFSET_MS = 10000;\nclass JobRunner {\n    constructor(jobType, keystore) {\n        this.disableOffset = false;\n        this.jobType = jobType;\n        this.mutex = new async_mutex__WEBPACK_IMPORTED_MODULE_4__.Mutex();\n        this.keystore = keystore;\n    }\n    get protoJobType() {\n        return getProtoJobType(this.jobType);\n    }\n    async run(callback) {\n        return this.mutex.runExclusive(async () => {\n            const lastRun = await this.getLastRunTime();\n            const startTime = new Date();\n            const result = await callback(lastRun\n                ? !this.disableOffset\n                    ? new Date(lastRun.getTime() - CLOCK_SKEW_OFFSET_MS)\n                    : lastRun\n                : undefined);\n            await this.setLastRunTime(startTime);\n            return result;\n        });\n    }\n    async resetLastRunTime() {\n        await this.keystore.setRefreshJob({\n            jobType: this.protoJobType,\n            lastRunNs: dateToNs(new Date(0)),\n        });\n    }\n    async getLastRunTime() {\n        const { lastRunNs } = await this.keystore.getRefreshJob(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetRefreshJobRequest.fromPartial({\n            jobType: this.protoJobType,\n        }));\n        if (lastRunNs.equals(long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromNumber(0))) {\n            return undefined;\n        }\n        return nsToDate(lastRunNs);\n    }\n    async setLastRunTime(lastRun) {\n        await this.keystore.setRefreshJob({\n            jobType: this.protoJobType,\n            lastRunNs: dateToNs(lastRun),\n        });\n    }\n}\nfunction getProtoJobType(jobType) {\n    const protoJobType = {\n        v1: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.JobType.JOB_TYPE_REFRESH_V1,\n        v2: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.JobType.JOB_TYPE_REFRESH_V2,\n        \"user-preferences\": _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.JobType.JOB_TYPE_REFRESH_PPPP,\n    }[jobType];\n    if (!protoJobType) {\n        throw new Error(`unknown job type: ${jobType}`);\n    }\n    return protoJobType;\n}\n\nconst messageHasHeaders = (msg) => {\n    return Boolean(msg.recipientAddress && msg.senderAddress);\n};\n/**\n * Conversations allows you to view ongoing 1:1 messaging sessions with another wallet\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass Conversations {\n    constructor(client) {\n        this.client = client;\n        this.v1JobRunner = new JobRunner(\"v1\", client.keystore);\n        this.v2JobRunner = new JobRunner(\"v2\", client.keystore);\n    }\n    /**\n     * List all conversations with the current wallet found in the network.\n     */\n    async list() {\n        const [v1Convos, v2Convos] = await Promise.all([\n            this.listV1Conversations(),\n            this.listV2Conversations(),\n        ]);\n        const conversations = v1Convos.concat(v2Convos);\n        conversations.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n        return conversations;\n    }\n    /**\n     * List all conversations stored in the client cache, which may not include\n     * conversations on the network.\n     */\n    async listFromCache() {\n        const [v1Convos, v2Convos] = await Promise.all([\n            this.getV1ConversationsFromKeystore(),\n            this.getV2ConversationsFromKeystore(),\n        ]);\n        const conversations = v1Convos.concat(v2Convos);\n        conversations.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n        return conversations;\n    }\n    async listV1Conversations() {\n        return this.v1JobRunner.run(async (latestSeen) => {\n            const seenPeers = await this.getIntroductionPeers({\n                startTime: latestSeen,\n                direction: SortDirection.SORT_DIRECTION_ASCENDING,\n            });\n            await this.client.keystore.saveV1Conversations({\n                conversations: Array.from(seenPeers)\n                    .map(([peerAddress, createdAt]) => ({\n                    peerAddress,\n                    createdNs: dateToNs(createdAt),\n                    topic: buildDirectMessageTopic(peerAddress, this.client.address),\n                    context: undefined,\n                    consentProofPayload: undefined,\n                }))\n                    .filter((c) => isValidTopic(c.topic)),\n            });\n            return (await this.client.keystore.getV1Conversations()).conversations.map(this.conversationReferenceToV1.bind(this));\n        });\n    }\n    /**\n     * List all V2 conversations\n     */\n    async listV2Conversations() {\n        return this.v2JobRunner.run(async (lastRun) => {\n            // Get all conversations already in the KeyStore\n            const existing = await this.getV2ConversationsFromKeystore();\n            // Load all conversations started after the newest conversation found\n            const newConversations = await this.updateV2Conversations(lastRun);\n            // Create a Set of all the existing topics to ensure no duplicates are added\n            const existingTopics = new Set(existing.map((c) => c.topic));\n            // Add all new conversations to the existing list\n            for (const convo of newConversations) {\n                if (!existingTopics.has(convo.topic)) {\n                    existing.push(convo);\n                    existingTopics.add(convo.topic);\n                }\n            }\n            // Sort the result set by creation time in ascending order\n            existing.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n            return existing;\n        });\n    }\n    async getV2ConversationsFromKeystore() {\n        return (await this.client.keystore.getV2Conversations()).conversations.map(this.conversationReferenceToV2.bind(this));\n    }\n    async getV1ConversationsFromKeystore() {\n        return (await this.client.keystore.getV1Conversations()).conversations.map(this.conversationReferenceToV1.bind(this));\n    }\n    // Called in listV2Conversations and in newConversation\n    async updateV2Conversations(startTime) {\n        const envelopes = await this.client.listInvitations({\n            startTime,\n            direction: SortDirection.SORT_DIRECTION_ASCENDING,\n        });\n        return this.decodeInvites(envelopes);\n    }\n    async decodeInvites(envelopes, shouldThrow = false) {\n        const { responses } = await this.client.keystore.saveInvites({\n            requests: envelopes\n                .map((env) => ({\n                payload: env.message,\n                timestampNs: long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromString(env.timestampNs),\n                contentTopic: env.contentTopic,\n            }))\n                .filter((req) => isValidTopic(req.contentTopic)),\n        });\n        const out = [];\n        for (const response of responses) {\n            try {\n                out.push(this.saveInviteResponseToConversation(response));\n            }\n            catch (e) {\n                console.warn(\"Error saving invite response to conversation: \", e);\n                if (shouldThrow) {\n                    throw e;\n                }\n            }\n        }\n        return out;\n    }\n    saveInviteResponseToConversation({ result, error, }) {\n        if (error || !result || !result.conversation) {\n            throw new Error(`Error from keystore: ${error?.code} ${error?.message}}`);\n        }\n        return this.conversationReferenceToV2(result.conversation);\n    }\n    conversationReferenceToV2(convoRef) {\n        return new ConversationV2(this.client, convoRef.topic, convoRef.peerAddress, nsToDate(convoRef.createdNs), convoRef.context, convoRef.consentProofPayload);\n    }\n    conversationReferenceToV1(convoRef) {\n        return new ConversationV1(this.client, convoRef.peerAddress, nsToDate(convoRef.createdNs));\n    }\n    /**\n     * Returns a stream of any newly created conversations.\n     * Will dedupe to not return the same conversation twice in the same stream.\n     * Does not dedupe any other previously seen conversations\n     */\n    async stream(onConnectionLost) {\n        const seenPeers = new Set();\n        const introTopic = buildUserIntroTopic(this.client.address);\n        const inviteTopic = buildUserInviteTopic(this.client.address);\n        const newPeer = (peerAddress) => {\n            // Check if we have seen the peer already in this stream\n            if (seenPeers.has(peerAddress)) {\n                return false;\n            }\n            seenPeers.add(peerAddress);\n            return true;\n        };\n        const decodeConversation = async (env) => {\n            if (env.contentTopic === introTopic) {\n                if (!env.message) {\n                    throw new Error(\"empty envelope\");\n                }\n                const msg = await MessageV1.fromBytes(env.message);\n                const peerAddress = this.getPeerAddress(msg);\n                if (!newPeer(peerAddress)) {\n                    return undefined;\n                }\n                await msg.decrypt(this.client.keystore, this.client.publicKeyBundle);\n                return new ConversationV1(this.client, peerAddress, msg.sent);\n            }\n            if (env.contentTopic === inviteTopic) {\n                const results = await this.decodeInvites([env], true);\n                if (results.length) {\n                    return results[0];\n                }\n            }\n            throw new Error(\"unrecognized invite topic\");\n        };\n        const topics = [introTopic, inviteTopic];\n        return Stream.create(this.client, topics, decodeConversation.bind(this), undefined, onConnectionLost);\n    }\n    /**\n     * Streams messages from all conversations.\n     *\n     * When a new conversation is initiated with the client's address, this function will automatically register it and add it to the list of conversations to watch.\n     * Callers should be aware the first messages in a newly created conversation are picked up on a best effort basis and there are other potential race conditions which may cause some newly created conversations to be missed.\n     *\n     */\n    async streamAllMessages(onConnectionLost) {\n        const introTopic = buildUserIntroTopic(this.client.address);\n        const inviteTopic = buildUserInviteTopic(this.client.address);\n        const topics = new Set([introTopic, inviteTopic]);\n        const convoMap = new Map();\n        for (const conversation of await this.list()) {\n            topics.add(conversation.topic);\n            convoMap.set(conversation.topic, conversation);\n        }\n        const decodeMessage = async (env) => {\n            const contentTopic = env.contentTopic;\n            if (!contentTopic || !env.message) {\n                return null;\n            }\n            if (contentTopic === introTopic) {\n                const msg = await MessageV1.fromBytes(env.message);\n                if (!messageHasHeaders(msg)) {\n                    return null;\n                }\n                const peerAddress = this.getPeerAddress(msg);\n                // Temporarily create a convo to decrypt the message\n                const convo = new ConversationV1(this.client, \n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n                peerAddress, msg.sent);\n                // TODO: This duplicates the proto deserialization unnecessarily\n                // Refactor to avoid duplicate work\n                return convo.decodeMessage(env);\n            }\n            // Decode as an invite and return the envelope\n            // This gives the contentTopicUpdater everything it needs to add to the topic list\n            if (contentTopic === inviteTopic) {\n                const results = await this.decodeInvites([env], true);\n                return results[0];\n            }\n            const convo = convoMap.get(contentTopic);\n            // Decode as a V1 message if the topic matches a V1 convo\n            if (convo instanceof ConversationV1) {\n                return convo.decodeMessage(env);\n            }\n            // Decode as a V2 message if the topic matches a V2 convo\n            if (convo instanceof ConversationV2) {\n                return convo.decodeMessage(env);\n            }\n            console.log(\"Unknown topic\");\n            throw new Error(\"Unknown topic\");\n        };\n        const addConvo = (topic, conversation) => {\n            if (topics.has(topic)) {\n                return false;\n            }\n            convoMap.set(topic, conversation);\n            topics.add(topic);\n            return true;\n        };\n        const contentTopicUpdater = (msg) => {\n            // If we have a V1 message from the introTopic, store the conversation in our mapping\n            if (msg instanceof DecodedMessage && msg.contentTopic === introTopic) {\n                const convo = new ConversationV1(this.client, msg.recipientAddress?.toLowerCase() ===\n                    this.client.address.toLowerCase()\n                    ? // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n                        msg.senderAddress\n                    : msg.recipientAddress, msg.sent);\n                const isNew = addConvo(convo.topic, convo);\n                return isNew ? Array.from(topics.values()) : undefined;\n            }\n            if (msg instanceof ConversationV2) {\n                const isNew = addConvo(msg.topic, msg);\n                return isNew ? Array.from(topics.values()) : undefined;\n            }\n            return undefined;\n        };\n        const str = await Stream.create(this.client, Array.from(topics.values()), decodeMessage, contentTopicUpdater, onConnectionLost);\n        const gen = (async function* generate() {\n            for await (const val of str) {\n                if (val instanceof DecodedMessage) {\n                    yield val;\n                }\n                // For conversation V2, we may have messages in the new topic before we started streaming.\n                // To be safe, we fetch all messages\n                if (val instanceof ConversationV2) {\n                    for (const convoMessage of await val.messages()) {\n                        yield convoMessage;\n                    }\n                }\n            }\n        })();\n        // Overwrite the generator's return method to close the underlying stream\n        // Generators by default need to wait until the next yield to return.\n        // In this case, that's only when the next message arrives...which could be a long time\n        gen.return = async () => {\n            // Returning the stream will cause the iteration to end inside the generator\n            // The generator will then return on its own\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            await str?.return();\n            return { value: undefined, done: true };\n        };\n        return gen;\n    }\n    async getIntroductionPeers(opts) {\n        const topic = buildUserIntroTopic(this.client.address);\n        const messages = await this.client.listEnvelopes(topic, (env) => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!env.message) {\n                throw new Error(\"empty envelope\");\n            }\n            return MessageV1.fromBytes(env.message);\n        }, opts);\n        const seenPeers = new Map();\n        for (const message of messages) {\n            // Ignore all messages without sender or recipient address headers\n            // Makes getPeerAddress safe\n            if (!messageHasHeaders(message)) {\n                continue;\n            }\n            const peerAddress = this.getPeerAddress(message);\n            if (peerAddress) {\n                const have = seenPeers.get(peerAddress);\n                if (!have || have > message.sent) {\n                    try {\n                        // Verify that the message can be decrypted before treating the intro as valid\n                        await message.decrypt(this.client.keystore, this.client.publicKeyBundle);\n                        seenPeers.set(peerAddress, message.sent);\n                        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    }\n                    catch (e) {\n                        continue;\n                    }\n                }\n            }\n        }\n        return seenPeers;\n    }\n    /**\n     * Creates a new conversation for the given address. Will throw an error if the peer is not found in the XMTP network\n     */\n    async newConversation(peerAddress, context, consentProof) {\n        // Define a function for matching V2 conversations\n        const matcherFn = (convo) => convo.peerAddress.toLowerCase() === peerAddress.toLowerCase() &&\n            isMatchingContext(context, convo.context ?? undefined);\n        // Check if we already have a V2 conversation with the peer in keystore\n        const existing = await this.getV2ConversationsFromKeystore();\n        const existingMatch = existing.find(matcherFn);\n        if (existingMatch) {\n            return existingMatch;\n        }\n        let contact = await this.client.getUserContact(peerAddress);\n        if (!contact) {\n            throw new Error(`Recipient ${peerAddress} is not on the XMTP network`);\n        }\n        if (peerAddress.toLowerCase() === this.client.address.toLowerCase()) {\n            throw new Error(\"self messaging not supported\");\n        }\n        // If this is a V1 conversation continuation\n        if (contact instanceof PublicKeyBundle && !context?.conversationId) {\n            return new ConversationV1(this.client, peerAddress, new Date());\n        }\n        // If no conversationId, check and see if we have an existing V1 conversation\n        if (!context?.conversationId) {\n            const v1Convos = await this.listV1Conversations();\n            const matchingConvo = v1Convos.find((convo) => convo.peerAddress.toLowerCase() === peerAddress.toLowerCase());\n            // If intro already exists, return V1 conversation\n            // if both peers have V1 compatible key bundles\n            if (matchingConvo) {\n                if (!this.client.signedPublicKeyBundle.isFromLegacyBundle()) {\n                    throw new Error(\"cannot resume pre-existing V1 conversation; client keys not compatible\");\n                }\n                if (!(contact instanceof PublicKeyBundle) &&\n                    !contact.isFromLegacyBundle()) {\n                    throw new Error(\"cannot resume pre-existing V1 conversation; peer keys not compatible\");\n                }\n                return matchingConvo;\n            }\n        }\n        // Coerce the contact into a V2 bundle\n        if (contact instanceof PublicKeyBundle) {\n            contact = SignedPublicKeyBundle.fromLegacyBundle(contact);\n        }\n        return this.v2JobRunner.run(async (lastRun) => {\n            const newItems = await this.updateV2Conversations(lastRun);\n            const newItemMatch = newItems.find(matcherFn);\n            // If one of those matches, return it to update the cache\n            if (newItemMatch) {\n                return newItemMatch;\n            }\n            return this.createV2Convo(\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            contact, context, consentProof);\n        });\n    }\n    async createV2Convo(recipient, context, consentProof) {\n        const timestamp = new Date();\n        const { payload, conversation } = await this.client.keystore.createInvite({\n            recipient,\n            context,\n            createdNs: dateToNs(timestamp),\n            consentProof,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!payload || !conversation) {\n            throw new Error(\"Required field not returned from Keystore\");\n        }\n        const peerAddress = await recipient.walletSignatureAddress();\n        await this.client.publishEnvelopes([\n            {\n                contentTopic: buildUserInviteTopic(peerAddress),\n                message: payload,\n                timestamp,\n            },\n            {\n                contentTopic: buildUserInviteTopic(this.client.address),\n                message: payload,\n                timestamp,\n            },\n        ]);\n        // add peer address to allow list\n        await this.client.contacts.allow([peerAddress]);\n        return this.conversationReferenceToV2(conversation);\n    }\n    getPeerAddress(message) {\n        const peerAddress = message.recipientAddress?.toLowerCase() ===\n            this.client.address.toLowerCase()\n            ? message.senderAddress\n            : message.recipientAddress;\n        // This assertion is safe, so long as messages have been through the filter\n        return peerAddress;\n    }\n}\nfunction isMatchingContext(contextA, contextB) {\n    // Use == to allow null and undefined to be equivalent\n    return contextA?.conversationId === contextB?.conversationId;\n}\n\nclass BrowserStoragePersistence {\n    constructor(storage) {\n        this.storage = storage;\n    }\n    static create() {\n        if (typeof localStorage === \"undefined\") {\n            throw new Error(\"Missing LocalStorage. Use ephemeralPersistence instead\");\n        }\n        return new BrowserStoragePersistence(localStorage);\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async getItem(key) {\n        const value = this.storage.getItem(key);\n        if (value === null) {\n            return null;\n        }\n        return Uint8Array.from(Buffer.from(value, \"binary\"));\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async setItem(key, value) {\n        this.storage.setItem(key, Buffer.from(value).toString(\"binary\"));\n    }\n}\n\n// Fully in-memory polyfill for the browser storage API.\n// Borrowed from https://github.com/MitchellCash/node-storage-polyfill but implemented as a ponyfill instead of a polyfill\nclass LocalStoragePonyfill {\n    constructor() {\n        this.store = new Map();\n    }\n    get length() {\n        return this.store.size;\n    }\n    clear() {\n        this.store = new Map();\n    }\n    getItem(key) {\n        this.validateString(key);\n        if (this.store.has(key)) {\n            return String(this.store.get(key));\n        }\n        return null;\n    }\n    key(index) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (index === undefined) {\n            // This is the TypeError implemented in Chrome, Firefox throws \"Storage.key: At least 1\n            // argument required, but only 0 passed\".\n            throw new TypeError(\"Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.\");\n        }\n        const keys = [...this.store.keys()];\n        if (index >= keys.length) {\n            return null;\n        }\n        return keys[index];\n    }\n    removeItem(key) {\n        this.validateString(key);\n        this.store.delete(key);\n    }\n    setItem(key, value) {\n        this.validateString(key);\n        this.validateString(value);\n        this.store.set(String(key), String(value));\n    }\n    validateString(val) {\n        if (!(typeof val === \"string\")) {\n            throw new TypeError(\"Key must be a string\");\n        }\n    }\n}\n\nclass InMemoryPersistence extends BrowserStoragePersistence {\n    static create() {\n        return new BrowserStoragePersistence(new LocalStoragePonyfill());\n    }\n}\n\nclass KeystoreProviderUnavailableError extends Error {\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nclass LocalAuthenticator {\n    constructor(identityKey) {\n        if (!identityKey.publicKey.signature) {\n            throw new Error(\"Provided public key is not signed\");\n        }\n        this.identityKey = identityKey;\n    }\n    async createToken(timestamp) {\n        const authData = AuthData.create(this.identityKey.publicKey.walletSignatureAddress(), timestamp || new Date());\n        const authDataBytes = authData.toBytes();\n        const digest = (0,viem__WEBPACK_IMPORTED_MODULE_8__.keccak256)(authDataBytes);\n        const authSig = await this.identityKey.sign((0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToBytes)(digest));\n        return new Token(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.authn.Token.fromPartial({\n            identityKey: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.PublicKey.fromPartial(\n            // The generated types are overly strict and don't like our additional methods\n            // eslint-disable-next-line\n            // @ts-ignore\n            this.identityKey.publicKey),\n            authDataBytes,\n            // The generated types are overly strict and don't like our additional methods\n            // eslint-disable-next-line\n            // @ts-ignore\n            authDataSignature: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.signature.Signature.fromPartial(authSig),\n        }));\n    }\n}\n\n// This file is taken from `bitchan/eccrypto` and ported to TS. All references to `nodeCrypto` have been replaced with `browserCrypto`\n/**\n * `elliptic` is a CommonJS module and has issues with named imports\n * DO NOT CHANGE THIS TO A NAMED IMPORT\n */\nconst EC = elliptic__WEBPACK_IMPORTED_MODULE_5__.ec;\nconst ec = new EC(\"secp256k1\");\nconst subtle = crypto.subtle;\nconst EC_GROUP_ORDER = Buffer.from(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", \"hex\");\nconst ZERO32 = Buffer.alloc(32, 0);\nfunction assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || \"Assertion failed\");\n    }\n}\nfunction isScalar(x) {\n    return Buffer.isBuffer(x) && x.length === 32;\n}\nfunction isValidPrivateKey(privateKey) {\n    if (!isScalar(privateKey)) {\n        return false;\n    }\n    return (privateKey.compare(ZERO32) > 0 && // > 0\n        privateKey.compare(EC_GROUP_ORDER) < 0); // < G\n}\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    let res = 0;\n    for (let i = 0; i < b1.length; i++) {\n        res |= b1[i] ^ b2[i]; // jshint ignore:line\n    }\n    return res === 0;\n}\nfunction randomBytes(size) {\n    const arr = new Uint8Array(size);\n    crypto.getRandomValues(arr);\n    return Buffer.from(arr);\n}\nasync function sha512(msg) {\n    const digest = await subtle.digest(\"SHA-512\", msg);\n    return Buffer.from(digest);\n}\nfunction getAes(op) {\n    return function (iv, key, data) {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        return new Promise(function (resolve) {\n            const importAlgorithm = { name: \"AES-CBC\" };\n            const keyp = subtle.importKey(\"raw\", key, importAlgorithm, false, [op]);\n            return keyp\n                .then(function (cryptoKey) {\n                const encAlgorithm = { name: \"AES-CBC\", iv };\n                return subtle[op](encAlgorithm, cryptoKey, data);\n            })\n                .then(function (result) {\n                resolve(Buffer.from(new Uint8Array(result)));\n            });\n        });\n    };\n}\nconst aesCbcEncrypt = getAes(\"encrypt\");\nconst aesCbcDecrypt = getAes(\"decrypt\");\nasync function hmacSha256Sign(key, msg) {\n    const newKey = await subtle.importKey(\"raw\", key, { name: \"HMAC\", hash: { name: \"SHA-256\" } }, false, [\"sign\"]);\n    return Buffer.from(await subtle.sign({ name: \"HMAC\", hash: \"SHA-256\" }, newKey, msg));\n}\nasync function hmacSha256Verify(key, msg, sig) {\n    const expectedSig = await hmacSha256Sign(key, msg);\n    return equalConstTime(expectedSig, sig);\n}\nfunction getPublic(privateKey) {\n    // This function has sync API so we throw an error immediately.\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    // XXX(Kagami): `elliptic.utils.encode` returns array for every\n    // encoding except `hex`.\n    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(\"array\"));\n}\nfunction derive(privateKeyA, publicKeyB) {\n    return new Promise(function (resolve) {\n        assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n        assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n        assert(privateKeyA.length === 32, \"Bad private key\");\n        assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n        assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n        if (publicKeyB.length === 65) {\n            assert(publicKeyB[0] === 4, \"Bad public key\");\n        }\n        if (publicKeyB.length === 33) {\n            assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n        }\n        const keyA = ec.keyFromPrivate(privateKeyA);\n        const keyB = ec.keyFromPublic(publicKeyB);\n        const Px = keyA.derive(keyB.getPublic()); // BN instance\n        resolve(Buffer.from(Px.toArray()));\n    });\n}\nasync function encrypt(publicKeyTo, msg, \n// eslint-disable-next-line @typescript-eslint/no-duplicate-type-constituents\nopts) {\n    opts = opts || {};\n    // Take IV from opts or generate randomly\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const iv = opts?.iv || randomBytes(16);\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    let ephemPrivateKey = opts?.ephemPrivateKey || randomBytes(32);\n    // There is a very unlikely possibility that it is not a valid key\n    while (!isValidPrivateKey(ephemPrivateKey)) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (opts?.ephemPrivateKey) {\n            throw new Error(\"ephemPrivateKey is not valid\");\n        }\n        ephemPrivateKey = randomBytes(32);\n    }\n    // Get the public key from the ephemeral private key\n    const ephemeralPublicKey = getPublic(ephemPrivateKey);\n    const hash = await sha512(await derive(ephemPrivateKey, publicKeyTo));\n    const encryptionKey = hash.slice(0, 32);\n    const macKey = hash.slice(32);\n    const ciphertext = await aesCbcEncrypt(iv, encryptionKey, msg);\n    // Get a MAC\n    const dataToMac = Buffer.concat([iv, ephemeralPublicKey, ciphertext]);\n    const mac = await hmacSha256Sign(macKey, dataToMac);\n    // Return the payload\n    return {\n        iv,\n        ephemeralPublicKey,\n        ciphertext,\n        mac,\n    };\n}\nasync function decrypt(privateKey, opts) {\n    const px = await derive(privateKey, opts.ephemeralPublicKey);\n    const hash = await sha512(px);\n    const encryptionKey = hash.slice(0, 32);\n    const macKey = hash.slice(32);\n    const dataToMac = Buffer.concat([\n        opts.iv,\n        opts.ephemeralPublicKey,\n        opts.ciphertext,\n    ]);\n    assert(await hmacSha256Verify(macKey, dataToMac, opts.mac), \"Bad mac\");\n    return aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext);\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function userPreferencesEncrypt(identityKey, payload) {\n    const publicKey = identityKey.publicKey.secp256k1Uncompressed.bytes;\n    const privateKey = identityKey.secp256k1.bytes;\n    return (0,_xmtp_user_preferences_bindings_wasm__WEBPACK_IMPORTED_MODULE_6__.user_preferences_encrypt)(publicKey, privateKey, payload);\n}\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function userPreferencesDecrypt(identityKey, payload) {\n    const publicKey = identityKey.publicKey.secp256k1Uncompressed.bytes;\n    const privateKey = identityKey.secp256k1.bytes;\n    return (0,_xmtp_user_preferences_bindings_wasm__WEBPACK_IMPORTED_MODULE_6__.user_preferences_decrypt)(publicKey, privateKey, payload);\n}\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function generateUserPreferencesTopic(identityKey) {\n    const privateKey = identityKey.secp256k1.bytes;\n    return (0,_xmtp_user_preferences_bindings_wasm__WEBPACK_IMPORTED_MODULE_6__.generate_private_preferences_topic)(privateKey);\n}\n\n/**\n * InvitationV1 is a protobuf message to be encrypted and used as the ciphertext in a SealedInvitationV1 message\n */\nclass InvitationV1 {\n    constructor({ topic, context, aes256GcmHkdfSha256, consentProof, }) {\n        if (!topic || !topic.length) {\n            throw new Error(\"Missing topic\");\n        }\n        if (!aes256GcmHkdfSha256 ||\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            !aes256GcmHkdfSha256.keyMaterial ||\n            !aes256GcmHkdfSha256.keyMaterial.length) {\n            throw new Error(\"Missing key material\");\n        }\n        this.topic = topic;\n        this.context = context;\n        this.aes256GcmHkdfSha256 = aes256GcmHkdfSha256;\n        this.consentProof = consentProof;\n    }\n    static createRandom(context, consentProof) {\n        const topic = buildDirectMessageTopicV2(Buffer.from(crypto.getRandomValues(new Uint8Array(32)))\n            .toString(\"base64\")\n            .replace(/=*$/g, \"\")\n            // Replace slashes with dashes so that the topic is still easily split by /\n            // We do not treat this as needing to be valid Base64 anywhere\n            .replace(/\\//g, \"-\"));\n        const keyMaterial = crypto.getRandomValues(new Uint8Array(32));\n        return new InvitationV1({\n            topic,\n            aes256GcmHkdfSha256: { keyMaterial },\n            context,\n            consentProof,\n        });\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.invitation.InvitationV1.encode(this).finish();\n    }\n    static fromBytes(bytes) {\n        return new InvitationV1(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.invitation.InvitationV1.decode(bytes));\n    }\n}\n/**\n * SealedInvitationHeaderV1 is a protobuf message to be used as the headerBytes in a SealedInvitationV1\n */\nclass SealedInvitationHeaderV1 {\n    constructor({ sender, recipient, createdNs, }) {\n        if (!sender) {\n            throw new Error(\"Missing sender\");\n        }\n        if (!recipient) {\n            throw new Error(\"Missing recipient\");\n        }\n        this.sender = new SignedPublicKeyBundle(sender);\n        this.recipient = new SignedPublicKeyBundle(recipient);\n        this.createdNs = createdNs;\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.invitation.SealedInvitationHeaderV1.encode(this).finish();\n    }\n    static fromBytes(bytes) {\n        return new SealedInvitationHeaderV1(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.invitation.SealedInvitationHeaderV1.decode(bytes));\n    }\n}\nclass SealedInvitationV1 {\n    constructor({ headerBytes, ciphertext }) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!headerBytes || !headerBytes.length) {\n            throw new Error(\"Missing header bytes\");\n        }\n        if (!ciphertext) {\n            throw new Error(\"Missing ciphertext\");\n        }\n        this.headerBytes = headerBytes;\n        this.ciphertext = new Ciphertext(ciphertext);\n    }\n    /**\n     * Accessor method for the full header object\n     */\n    get header() {\n        // Use cached value if already exists\n        if (this._header) {\n            return this._header;\n        }\n        this._header = SealedInvitationHeaderV1.fromBytes(this.headerBytes);\n        return this._header;\n    }\n    /**\n     * getInvitation decrypts and returns the InvitationV1 stored in the ciphertext of the Sealed Invitation\n     */\n    async getInvitation(viewer) {\n        // Use cached value if already exists\n        if (this._invitation) {\n            return this._invitation;\n        }\n        // The constructors for child classes will validate that this is complete\n        const header = this.header;\n        let secret;\n        if (viewer.identityKey.matches(this.header.sender.identityKey)) {\n            secret = await viewer.sharedSecret(header.recipient, header.sender.preKey, false);\n        }\n        else {\n            secret = await viewer.sharedSecret(header.sender, header.recipient.preKey, true);\n        }\n        const decryptedBytes = await decrypt$1(this.ciphertext, secret, this.headerBytes);\n        this._invitation = InvitationV1.fromBytes(decryptedBytes);\n        return this._invitation;\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.invitation.SealedInvitationV1.encode(this).finish();\n    }\n    static fromBytes(bytes) {\n        return new SealedInvitationV1(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.invitation.SealedInvitationV1.decode(bytes));\n    }\n}\n/**\n * Wrapper class for SealedInvitationV1 and any future iterations of SealedInvitation\n */\nclass SealedInvitation {\n    constructor({ v1 }) {\n        if (v1) {\n            this.v1 = new SealedInvitationV1(v1);\n        }\n        else {\n            throw new Error(\"Missing v1 or v2 invitation\");\n        }\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.invitation.SealedInvitation.encode(this).finish();\n    }\n    static fromBytes(bytes) {\n        return new SealedInvitation(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.invitation.SealedInvitation.decode(bytes));\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    static async fromEnvelope(env) {\n        if (!env.message || !env.timestampNs) {\n            throw new Error(\"invalid invitation envelope\");\n        }\n        const sealed = SealedInvitation.fromBytes(env.message);\n        const envelopeTime = long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromString(env.timestampNs);\n        const headerTime = sealed.v1?.header.createdNs;\n        if (!headerTime || !headerTime.equals(envelopeTime)) {\n            throw new Error(\"envelope and header timestamp mistmatch\");\n        }\n        return sealed;\n    }\n    /**\n     * Create a SealedInvitation with a SealedInvitationV1 payload\n     * Will encrypt all contents and validate inputs\n     */\n    static async createV1({ sender, recipient, created, invitation, }) {\n        const headerBytes = new SealedInvitationHeaderV1({\n            sender: sender.getPublicKeyBundle(),\n            recipient,\n            createdNs: dateToNs(created),\n        }).toBytes();\n        const secret = await sender.sharedSecret(recipient, sender.getCurrentPreKey().publicKey, false);\n        const invitationBytes = invitation.toBytes();\n        const ciphertext = await encrypt$1(invitationBytes, secret, headerBytes);\n        return new SealedInvitation({\n            v1: { headerBytes, ciphertext },\n        });\n    }\n}\n\nvar _PrivatePreferencesStore_instances, _PrivatePreferencesStore_persistence, _PrivatePreferencesStore_persistenceKey, _PrivatePreferencesStore_mutex, _PrivatePreferencesStore_revision, _PrivatePreferencesStore_toBytes;\nconst PRIVATE_PREFERENCES_ACTIONS_STORAGE_KEY = \"private-preferences/actions\";\n/**\n * PrivatePreferencesStore holds a mapping of message timestamp -> private\n * preference action and writes to the persistence layer on changes\n */\nclass PrivatePreferencesStore {\n    constructor(persistence, persistenceKey, initialData = new Map()) {\n        _PrivatePreferencesStore_instances.add(this);\n        _PrivatePreferencesStore_persistence.set(this, void 0);\n        _PrivatePreferencesStore_persistenceKey.set(this, void 0);\n        _PrivatePreferencesStore_mutex.set(this, void 0);\n        _PrivatePreferencesStore_revision.set(this, void 0);\n        __classPrivateFieldSet(this, _PrivatePreferencesStore_persistenceKey, persistenceKey, \"f\");\n        __classPrivateFieldSet(this, _PrivatePreferencesStore_persistence, persistence, \"f\");\n        __classPrivateFieldSet(this, _PrivatePreferencesStore_revision, 0, \"f\");\n        __classPrivateFieldSet(this, _PrivatePreferencesStore_mutex, new async_mutex__WEBPACK_IMPORTED_MODULE_4__.Mutex(), \"f\");\n        this.actionsMap = initialData;\n    }\n    get revisionKey() {\n        return __classPrivateFieldGet(this, _PrivatePreferencesStore_persistenceKey, \"f\") + \"/revision\";\n    }\n    static async create(persistence) {\n        const store = new PrivatePreferencesStore(persistence, PRIVATE_PREFERENCES_ACTIONS_STORAGE_KEY);\n        await store.refresh();\n        return store;\n    }\n    async refresh() {\n        const currentRevision = await this.getRevision();\n        if (currentRevision > __classPrivateFieldGet(this, _PrivatePreferencesStore_revision, \"f\")) {\n            this.actionsMap = await this.loadFromPersistence();\n        }\n        __classPrivateFieldSet(this, _PrivatePreferencesStore_revision, currentRevision, \"f\");\n    }\n    async getRevision() {\n        const data = await __classPrivateFieldGet(this, _PrivatePreferencesStore_persistence, \"f\").getItem(this.revisionKey);\n        if (!data) {\n            return 0;\n        }\n        return uint8ArrayToNumber(data);\n    }\n    async setRevision(number) {\n        await __classPrivateFieldGet(this, _PrivatePreferencesStore_persistence, \"f\").setItem(this.revisionKey, numberToUint8Array(number));\n    }\n    async loadFromPersistence() {\n        const rawData = await __classPrivateFieldGet(this, _PrivatePreferencesStore_persistence, \"f\").getItem(__classPrivateFieldGet(this, _PrivatePreferencesStore_persistenceKey, \"f\"));\n        if (!rawData) {\n            return new Map();\n        }\n        const data = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.PrivatePreferencesActionMap.decode(rawData);\n        const actionsMap = new Map();\n        const entries = Object.entries(data.actions);\n        for (let i = 0; i < entries.length; i++) {\n            actionsMap.set(entries[i][0], entries[i][1]);\n        }\n        return actionsMap;\n    }\n    async store() {\n        var _a;\n        await __classPrivateFieldGet(this, _PrivatePreferencesStore_persistence, \"f\").setItem(__classPrivateFieldGet(this, _PrivatePreferencesStore_persistenceKey, \"f\"), __classPrivateFieldGet(this, _PrivatePreferencesStore_instances, \"m\", _PrivatePreferencesStore_toBytes).call(this));\n        __classPrivateFieldSet(this, _PrivatePreferencesStore_revision, (_a = __classPrivateFieldGet(this, _PrivatePreferencesStore_revision, \"f\"), _a++, _a), \"f\");\n        await this.setRevision(__classPrivateFieldGet(this, _PrivatePreferencesStore_revision, \"f\"));\n    }\n    async add(actionsMap) {\n        await __classPrivateFieldGet(this, _PrivatePreferencesStore_mutex, \"f\").runExclusive(async () => {\n            await this.refresh();\n            let isDirty = false;\n            const keys = Array.from(actionsMap.keys());\n            for (let i = 0; i < keys.length; i++) {\n                // ignore duplicate actions\n                if (!this.actionsMap.has(keys[i])) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    this.actionsMap.set(keys[i], actionsMap.get(keys[i]));\n                    // indicate new value added\n                    isDirty = true;\n                }\n            }\n            // only write to persistence if new values were added\n            if (isDirty) {\n                await this.store();\n            }\n        });\n    }\n    get actions() {\n        // sort actions by their keys (timestamps) in ascending order\n        const sortedActions = new Map([...this.actionsMap.entries()].sort((a, b) => \n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        fromNanoString(a[0]).getTime() - fromNanoString(b[0]).getTime()));\n        return sortedActions;\n    }\n    lookup(key) {\n        return this.actionsMap.get(key);\n    }\n}\n_PrivatePreferencesStore_persistence = new WeakMap(), _PrivatePreferencesStore_persistenceKey = new WeakMap(), _PrivatePreferencesStore_mutex = new WeakMap(), _PrivatePreferencesStore_revision = new WeakMap(), _PrivatePreferencesStore_instances = new WeakSet(), _PrivatePreferencesStore_toBytes = function _PrivatePreferencesStore_toBytes() {\n    return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.PrivatePreferencesActionMap.encode({\n        actions: Object.fromEntries(this.actionsMap),\n    }).finish();\n};\n\nconst convertError = (e, \n// Default error code to apply to errors that don't have one\nerrorCode) => {\n    if (e instanceof KeystoreError) {\n        return e;\n    }\n    return new KeystoreError(errorCode, e.message);\n};\nconst wrapResult = (result) => ({ result });\n// Map an array of items to an array of results or errors\n// Transform any errors thrown into `KeystoreError`s\nconst mapAndConvertErrors = (input, mapper, \n// Default error code to apply to errors that don't have one\nerrorCode) => {\n    return Promise.all(input.map(async (item) => {\n        try {\n            // Be sure to await mapper result to catch errors\n            return wrapResult(await mapper(item));\n        }\n        catch (e) {\n            return { error: convertError(e, errorCode) };\n        }\n    }));\n};\n// Wrap the bundle in our class if not already wrapped\nconst toPublicKeyBundle = (bundle) => {\n    if (bundle instanceof PublicKeyBundle) {\n        return bundle;\n    }\n    return new PublicKeyBundle(bundle);\n};\n// Wrap the bundle in our class if not already wrapped\nconst toSignedPublicKeyBundle = (bundle) => {\n    if (bundle instanceof SignedPublicKeyBundle) {\n        return bundle;\n    }\n    return new SignedPublicKeyBundle(bundle);\n};\n// Takes object and returns true if none of the `objectFields` are null or undefined and none of the `arrayFields` are empty\nconst validateObject = (obj, objectFields, arrayFields) => {\n    for (const field of objectFields) {\n        if (!obj[field]) {\n            throw new KeystoreError(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.ErrorCode.ERROR_CODE_INVALID_INPUT, `Missing field ${String(field)}`);\n        }\n    }\n    for (const field of arrayFields) {\n        const val = obj[field];\n        // @ts-expect-error does not know it's an array\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!val || !val?.length) {\n            throw new KeystoreError(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.ErrorCode.ERROR_CODE_INVALID_INPUT, `Missing field ${String(field)}`);\n        }\n    }\n    return true;\n};\nconst getKeyMaterial = (invite) => {\n    if (!invite?.aes256GcmHkdfSha256?.keyMaterial) {\n        throw new KeystoreError(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.ErrorCode.ERROR_CODE_INVALID_INPUT, \"Missing key material\");\n    }\n    return invite.aes256GcmHkdfSha256.keyMaterial;\n};\nconst topicDataToV2ConversationReference = ({ invitation, createdNs, peerAddress, }) => ({\n    context: invitation.context,\n    topic: invitation.topic,\n    peerAddress,\n    createdNs,\n    consentProofPayload: invitation.consentProof,\n});\nconst isCompleteTopicData = (obj) => !!obj.invitation;\nconst topicDataToMap = (topicMap) => {\n    const out = new Map();\n    for (const [k, v] of Object.entries(topicMap.topics)) {\n        out.set(k, v);\n    }\n    return out;\n};\nconst buildPersistenceKey = (env, walletAddress) => `xmtp/${env}/${walletAddress}/`;\n\nconst INVITE_STORAGE_KEY = \"invitations/v1\";\nconst V1_STORAGE_KEY = \"conversation-v1/v1\";\n/**\n * V2Store holds a simple map of topic -> TopicData and writes to the persistence layer on changes\n */\nclass V2Store {\n    constructor(persistence, persistenceKey, initialData = new Map()) {\n        this.persistenceKey = persistenceKey;\n        this.persistence = persistence;\n        this.revision = 0;\n        this.mutex = new async_mutex__WEBPACK_IMPORTED_MODULE_4__.Mutex();\n        this.topicMap = initialData;\n    }\n    get revisionKey() {\n        return this.persistenceKey + \"/revision\";\n    }\n    static async create(persistence) {\n        const persistenceKey = INVITE_STORAGE_KEY;\n        const v2Store = new V2Store(persistence, persistenceKey);\n        await v2Store.refresh();\n        return v2Store;\n    }\n    validate(topicData) {\n        return (!!topicData.topic &&\n            topicData.topic.length > 0 &&\n            isCompleteTopicData(topicData));\n    }\n    async refresh() {\n        const currentRevision = await this.getRevision();\n        if (currentRevision > this.revision) {\n            for (const [topic, data] of await this.loadFromPersistence()) {\n                this.topicMap.set(topic, data);\n            }\n        }\n        this.revision = currentRevision;\n    }\n    async getRevision() {\n        const data = await this.persistence.getItem(this.revisionKey);\n        if (!data) {\n            return 0;\n        }\n        return uint8ArrayToNumber(data);\n    }\n    async setRevision(number) {\n        await this.persistence.setItem(this.revisionKey, numberToUint8Array(number));\n    }\n    async loadFromPersistence() {\n        const rawData = await this.persistence.getItem(this.persistenceKey);\n        if (!rawData) {\n            return new Map();\n        }\n        return topicDataToMap(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.TopicMap.decode(rawData));\n    }\n    async store() {\n        await this.persistence.setItem(this.persistenceKey, this.toBytes());\n        this.revision++;\n        await this.setRevision(this.revision);\n    }\n    async add(topicData) {\n        await this.mutex.runExclusive(async () => {\n            await this.refresh();\n            let isDirty = false;\n            for (const row of topicData) {\n                if (!this.validate(row)) {\n                    console.warn(\"Invalid topic data\", row.topic);\n                    continue;\n                }\n                const { topic, ...data } = row;\n                // This will not overwrite any existing values. First invite found in the store for a given topic will always be used\n                // Duplicates do not throw errors\n                if (!this.topicMap.has(topic)) {\n                    this.topicMap.set(topic, data);\n                    isDirty = true;\n                }\n            }\n            // Only write to persistence once, and only if we have added new invites\n            if (isDirty) {\n                await this.store();\n            }\n        });\n    }\n    get topics() {\n        return [...this.topicMap.values()];\n    }\n    lookup(topic) {\n        return this.topicMap.get(topic);\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.TopicMap.encode({\n            topics: Object.fromEntries(this.topicMap),\n        }).finish();\n    }\n}\nclass V1Store extends V2Store {\n    static async create(persistence) {\n        const persistenceKey = V1_STORAGE_KEY;\n        const v1Store = new V1Store(persistence, persistenceKey);\n        await v1Store.refresh();\n        return v1Store;\n    }\n    validate(topicData) {\n        return !!(topicData.topic &&\n            topicData.topic.length &&\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            topicData.peerAddress?.length > 0);\n    }\n}\n\nconst decryptV1 = async (myKeys, peerKeys, ciphertext, headerBytes, isSender) => {\n    const secret = await myKeys.sharedSecret(peerKeys, myKeys.getCurrentPreKey().publicKey, // assumes that the current preKey is what was used to encrypt\n    !isSender);\n    return decrypt$1(ciphertext, secret, headerBytes);\n};\nconst encryptV1 = async (keys, recipient, message, headerBytes) => {\n    const secret = await keys.sharedSecret(recipient, keys.getCurrentPreKey().publicKey, false);\n    return encrypt$1(message, secret, headerBytes);\n};\nconst decryptV2 = (ciphertext, secret, headerBytes) => decrypt$1(ciphertext, secret, headerBytes);\nconst encryptV2 = (payload, secret, headerBytes) => encrypt$1(payload, secret, headerBytes);\n\nvar _InMemoryKeystore_privatePreferencesTopic;\nconst { ErrorCode } = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore;\n// Constant, 32 byte salt\n// DO NOT CHANGE\nconst INVITE_SALT = new TextEncoder().encode(\"__XMTP__INVITATION__SALT__XMTP__\");\nasync function deriveKey(secret, info) {\n    const key = await crypto.subtle.importKey(\"raw\", secret, \"HKDF\", false, [\n        \"deriveKey\",\n    ]);\n    return crypto.subtle.deriveKey({ name: \"HKDF\", hash: \"SHA-256\", salt: INVITE_SALT, info }, key, { name: \"AES-GCM\", length: 256 }, true, [\"encrypt\", \"decrypt\"]);\n}\nclass InMemoryKeystore {\n    constructor(keys, v1Store, v2Store, privatePreferencesStore, persistence) {\n        _InMemoryKeystore_privatePreferencesTopic.set(this, void 0);\n        this.v1Keys = keys;\n        this.v2Keys = PrivateKeyBundleV2.fromLegacyBundle(keys);\n        this.v1Store = v1Store;\n        this.v2Store = v2Store;\n        this.privatePreferencesStore = privatePreferencesStore;\n        this.authenticator = new LocalAuthenticator(keys.identityKey);\n        this.jobStatePersistence = persistence;\n    }\n    static async create(keys, persistence) {\n        return new InMemoryKeystore(keys, await V1Store.create(persistence), await V2Store.create(persistence), await PrivatePreferencesStore.create(persistence), persistence);\n    }\n    get walletAddress() {\n        return this.v1Keys.identityKey.publicKey.walletSignatureAddress();\n    }\n    async decryptV1(req) {\n        const responses = await mapAndConvertErrors(req.requests, async (req) => {\n            if (!validateObject(req, [\"payload\", \"peerKeys\"], [\"headerBytes\"])) ;\n            const { payload, peerKeys, headerBytes, isSender } = req;\n            const decrypted = await decryptV1(this.v1Keys, toPublicKeyBundle(peerKeys), payload, headerBytes, isSender);\n            return {\n                decrypted,\n            };\n        }, _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.ErrorCode.ERROR_CODE_UNSPECIFIED);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.DecryptResponse.fromPartial({\n            responses,\n        });\n    }\n    async decryptV2(req) {\n        const responses = await mapAndConvertErrors(req.requests, async (req) => {\n            if (!validateObject(req, [\"payload\"], [\"headerBytes\"])) ;\n            const { payload, headerBytes, contentTopic } = req;\n            const topicData = this.v2Store.lookup(contentTopic);\n            if (!topicData) {\n                // This is the wrong error type. Will add to the proto repo later\n                throw new KeystoreError(_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY, \"no topic key\");\n            }\n            const decrypted = await decryptV2(payload, getKeyMaterial(topicData.invitation), headerBytes);\n            return { decrypted };\n        }, ErrorCode.ERROR_CODE_UNSPECIFIED);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.DecryptResponse.fromPartial({\n            responses,\n        });\n    }\n    async encryptV1(req) {\n        const responses = await mapAndConvertErrors(req.requests, async (req) => {\n            if (!validateObject(req, [\"payload\", \"recipient\"], [\"headerBytes\"])) ;\n            const { recipient, payload, headerBytes } = req;\n            return {\n                encrypted: await encryptV1(this.v1Keys, toPublicKeyBundle(recipient), payload, headerBytes),\n            };\n        }, ErrorCode.ERROR_CODE_UNSPECIFIED);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.EncryptResponse.fromPartial({\n            responses,\n        });\n    }\n    async createAuthToken({ timestampNs, }) {\n        return this.authenticator.createToken(timestampNs ? nsToDate(timestampNs) : undefined);\n    }\n    async selfEncrypt(req) {\n        const responses = await mapAndConvertErrors(req.requests, async (req) => {\n            const { payload } = req;\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!payload) {\n                throw new KeystoreError(ErrorCode.ERROR_CODE_INVALID_INPUT, \"Missing field payload\");\n            }\n            return {\n                encrypted: await userPreferencesEncrypt(this.v1Keys.identityKey, payload),\n            };\n        }, ErrorCode.ERROR_CODE_INVALID_INPUT);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SelfEncryptResponse.fromPartial({\n            responses,\n        });\n    }\n    async selfDecrypt(req) {\n        const responses = await mapAndConvertErrors(req.requests, async (req) => {\n            const { payload } = req;\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!payload) {\n                throw new KeystoreError(ErrorCode.ERROR_CODE_INVALID_INPUT, \"Missing field payload\");\n            }\n            return {\n                decrypted: await userPreferencesDecrypt(this.v1Keys.identityKey, payload),\n            };\n        }, ErrorCode.ERROR_CODE_INVALID_INPUT);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.DecryptResponse.fromPartial({\n            responses,\n        });\n    }\n    async getPrivatePreferencesTopicIdentifier() {\n        const identifier = await generateUserPreferencesTopic(this.v1Keys.identityKey);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetPrivatePreferencesTopicIdentifierResponse.fromPartial({\n            identifier,\n        });\n    }\n    async encryptV2(req) {\n        const responses = await mapAndConvertErrors(req.requests, async (req) => {\n            if (!validateObject(req, [\"payload\"], [\"headerBytes\"])) ;\n            const { payload, headerBytes, contentTopic } = req;\n            const topicData = this.v2Store.lookup(contentTopic);\n            if (!topicData) {\n                throw new KeystoreError(ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY, \"no topic key\");\n            }\n            const keyMaterial = getKeyMaterial(topicData.invitation);\n            const ciphertext = await encryptV2(payload, keyMaterial, headerBytes);\n            const thirtyDayPeriodsSinceEpoch = Math.floor(Date.now() / 1000 / 60 / 60 / 24 / 30);\n            const info = `${thirtyDayPeriodsSinceEpoch}-${await this.getAccountAddress()}`;\n            const hmac = await generateHmacSignature(keyMaterial, new TextEncoder().encode(info), headerBytes);\n            return {\n                encrypted: ciphertext,\n                senderHmac: hmac,\n            };\n        }, ErrorCode.ERROR_CODE_INVALID_INPUT);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.EncryptResponse.fromPartial({\n            responses,\n        });\n    }\n    async saveInvites(req) {\n        const toAdd = [];\n        const responses = await mapAndConvertErrors(req.requests, async ({ payload, timestampNs }) => {\n            const sealed = SealedInvitation.fromBytes(payload);\n            if (sealed.v1) {\n                const headerTime = sealed.v1.header.createdNs;\n                if (!headerTime.equals(timestampNs)) {\n                    throw new Error(\"envelope and header timestamp mismatch\");\n                }\n                const isSender = sealed.v1.header.sender.equals(this.v2Keys.getPublicKeyBundle());\n                const invitation = await sealed.v1.getInvitation(this.v2Keys);\n                const topicData = {\n                    invitation,\n                    createdNs: sealed.v1.header.createdNs,\n                    peerAddress: isSender\n                        ? await sealed.v1.header.recipient.walletSignatureAddress()\n                        : await sealed.v1.header.sender.walletSignatureAddress(),\n                };\n                toAdd.push({ ...topicData, topic: invitation.topic });\n                return {\n                    conversation: topicDataToV2ConversationReference(topicData),\n                };\n            }\n        }, ErrorCode.ERROR_CODE_INVALID_INPUT);\n        await this.v2Store.add(toAdd);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SaveInvitesResponse.fromPartial({\n            responses,\n        });\n    }\n    async createInvite(req) {\n        try {\n            if (!validateObject(req, [\"recipient\"], [])) ;\n            const created = nsToDate(req.createdNs);\n            const recipient = toSignedPublicKeyBundle(req.recipient);\n            const myAddress = await this.getAccountAddress();\n            const theirAddress = await recipient.walletSignatureAddress();\n            const secret = await this.v2Keys.sharedSecret(recipient, this.v2Keys.getCurrentPreKey().publicKey, myAddress < theirAddress);\n            const sortedAddresses = [myAddress, theirAddress].sort();\n            const msgString = \n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            (req.context?.conversationId || \"\") + sortedAddresses.join();\n            const msgBytes = new TextEncoder().encode(msgString);\n            const topic = bytesToHex(await hmacSha256Sign(Buffer.from(secret), Buffer.from(msgBytes)));\n            const infoString = [\n                \"0\", // sequence number\n                ...sortedAddresses,\n            ].join(\"|\");\n            const info = new TextEncoder().encode(infoString);\n            const derivedKey = await deriveKey(secret, info);\n            const keyMaterial = new Uint8Array(await crypto.subtle.exportKey(\"raw\", derivedKey));\n            const invitation = new InvitationV1({\n                topic: buildDirectMessageTopicV2(topic),\n                aes256GcmHkdfSha256: { keyMaterial },\n                context: req.context,\n                consentProof: req.consentProof,\n            });\n            const sealed = await SealedInvitation.createV1({\n                sender: this.v2Keys,\n                recipient,\n                created,\n                invitation,\n            });\n            const topicData = {\n                invitation,\n                topic: invitation.topic,\n                createdNs: req.createdNs,\n                peerAddress: await recipient.walletSignatureAddress(),\n            };\n            await this.v2Store.add([topicData]);\n            return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.CreateInviteResponse.fromPartial({\n                conversation: topicDataToV2ConversationReference(topicData),\n                payload: sealed.toBytes(),\n            });\n        }\n        catch (e) {\n            throw convertError(e, ErrorCode.ERROR_CODE_INVALID_INPUT);\n        }\n    }\n    async signDigest(req) {\n        if (!validateObject(req, [\"digest\"], [])) ;\n        const { digest, identityKey, prekeyIndex } = req;\n        let key;\n        if (identityKey) {\n            key = this.v1Keys.identityKey;\n        }\n        else if (typeof prekeyIndex !== \"undefined\" &&\n            Number.isInteger(prekeyIndex)) {\n            key = this.v1Keys.preKeys[prekeyIndex];\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!key) {\n                throw new KeystoreError(ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY, \"no prekey found\");\n            }\n        }\n        else {\n            throw new KeystoreError(ErrorCode.ERROR_CODE_INVALID_INPUT, \"must specifify identityKey or prekeyIndex\");\n        }\n        return key.sign(digest);\n    }\n    async saveV1Conversations({ conversations, }) {\n        await this.v1Store.add(conversations.map((convo) => ({\n            topic: buildDirectMessageTopic(convo.peerAddress, this.walletAddress),\n            peerAddress: convo.peerAddress,\n            createdNs: convo.createdNs,\n            invitation: undefined,\n        })));\n        return {};\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async getV1Conversations() {\n        const convos = this.v1Store.topics.map(this.topicDataToV1ConversationReference.bind(this));\n        return { conversations: convos };\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async getV2Conversations() {\n        const convos = this.v2Store.topics.map((invite) => topicDataToV2ConversationReference(invite));\n        convos.sort((a, b) => a.createdNs.div(1_000_000).sub(b.createdNs.div(1_000_000)).toNumber());\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetConversationsResponse.fromPartial({\n            conversations: convos,\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async getPublicKeyBundle() {\n        return this.v1Keys.getPublicKeyBundle();\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async getPrivateKeyBundle() {\n        return this.v1Keys;\n    }\n    async getAccountAddress() {\n        if (!this.accountAddress) {\n            this.accountAddress = await this.v2Keys\n                .getPublicKeyBundle()\n                .walletSignatureAddress();\n        }\n        return this.accountAddress;\n    }\n    async getRefreshJob({ jobType, }) {\n        if (jobType === _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.JobType.JOB_TYPE_UNSPECIFIED) {\n            throw new KeystoreError(ErrorCode.ERROR_CODE_INVALID_INPUT, \"invalid job type\");\n        }\n        const lastRunTime = await this.getLastRunTime(jobType);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetRefreshJobResponse.fromPartial({\n            lastRunNs: lastRunTime || long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromNumber(0),\n        });\n    }\n    async setRefreshJob({ jobType, lastRunNs, }) {\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        const key = await this.buildJobStorageKey(jobType);\n        await this.jobStatePersistence.setItem(key, Uint8Array.from(lastRunNs.toBytes()));\n        return {};\n    }\n    topicDataToV1ConversationReference(data) {\n        return {\n            peerAddress: data.peerAddress,\n            createdNs: data.createdNs,\n            topic: buildDirectMessageTopic(data.peerAddress, this.walletAddress),\n            context: undefined,\n            consentProofPayload: undefined,\n        };\n    }\n    buildJobStorageKey(jobType) {\n        return `refreshJob/${jobType.toString()}`;\n    }\n    async getLastRunTime(jobType) {\n        const bytes = await this.jobStatePersistence.getItem(this.buildJobStorageKey(jobType));\n        if (!bytes || !bytes.length) {\n            return;\n        }\n        return long__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromBytes([...bytes]);\n    }\n    // This method is not defined as part of the standard Keystore API, but is available\n    // on the InMemoryKeystore to support legacy use-cases.\n    lookupTopic(topic) {\n        return this.v2Store.lookup(topic);\n    }\n    async getV2ConversationHmacKeys(req) {\n        const thirtyDayPeriodsSinceEpoch = Math.floor(Date.now() / 1000 / 60 / 60 / 24 / 30);\n        const hmacKeys = {};\n        let topics = this.v2Store.topics;\n        // if specific topics are requested, only include those topics\n        if (req?.topics) {\n            topics = topics.filter((topicData) => topicData.invitation !== undefined &&\n                req.topics.includes(topicData.invitation.topic));\n        }\n        await Promise.all(topics.map(async (topicData) => {\n            if (topicData.invitation?.topic) {\n                const keyMaterial = getKeyMaterial(topicData.invitation);\n                const values = await Promise.all([\n                    thirtyDayPeriodsSinceEpoch - 1,\n                    thirtyDayPeriodsSinceEpoch,\n                    thirtyDayPeriodsSinceEpoch + 1,\n                ].map(async (value) => {\n                    const info = `${value}-${await this.getAccountAddress()}`;\n                    const hmacKey = await hkdfHmacKey(keyMaterial, new TextEncoder().encode(info));\n                    return {\n                        thirtyDayPeriodsSinceEpoch: value,\n                        // convert CryptoKey to Uint8Array to match the proto\n                        hmacKey: await exportHmacKey(hmacKey),\n                    };\n                }));\n                hmacKeys[topicData.invitation.topic] = {\n                    values,\n                };\n            }\n        }));\n        return { hmacKeys };\n    }\n    async getPrivatePreferencesTopic() {\n        if (!__classPrivateFieldGet(this, _InMemoryKeystore_privatePreferencesTopic, \"f\")) {\n            const { identifier } = await this.getPrivatePreferencesTopicIdentifier();\n            __classPrivateFieldSet(this, _InMemoryKeystore_privatePreferencesTopic, buildUserPrivatePreferencesTopic(identifier), \"f\");\n        }\n        return __classPrivateFieldGet(this, _InMemoryKeystore_privatePreferencesTopic, \"f\");\n    }\n    async createPrivatePreference(action) {\n        // encrypt action payload\n        // there should only be one response\n        const { responses } = await this.selfEncrypt({\n            requests: [\n                {\n                    payload: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privatePreferences.PrivatePreferencesAction.encode(action).finish(),\n                },\n            ],\n        });\n        // encrypted message\n        const messages = responses.reduce((result, response) => {\n            return response.result?.encrypted\n                ? // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                    result.concat(response.result?.encrypted)\n                : result;\n            // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n        }, []);\n        const contentTopic = await this.getPrivatePreferencesTopic();\n        const timestamp = new Date();\n        // return envelopes to publish\n        return messages.map((message) => ({\n            contentTopic,\n            message,\n            timestamp,\n        }));\n    }\n    getPrivatePreferences() {\n        return this.privatePreferencesStore.actions;\n    }\n    savePrivatePreferences(data) {\n        return this.privatePreferencesStore.add(data);\n    }\n}\n_InMemoryKeystore_privatePreferencesTopic = new WeakMap();\n\nclass TopicPersistence {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n    }\n    // Returns the first record in a topic if it is present.\n    async getItem(key) {\n        for await (const env of this.apiClient.queryIterator({ contentTopic: this.buildTopic(key) }, {\n            pageSize: 1,\n            direction: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.messageApi.SortDirection.SORT_DIRECTION_DESCENDING,\n        })) {\n            if (!env.message)\n                continue;\n            try {\n                return Uint8Array.from(env.message);\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n        return null;\n    }\n    async setItem(key, value) {\n        const keys = Uint8Array.from(value);\n        await this.apiClient.publish([\n            {\n                contentTopic: this.buildTopic(key),\n                message: keys,\n            },\n        ]);\n    }\n    setAuthenticator(authenticator) {\n        this.apiClient.setAuthenticator(authenticator);\n    }\n    buildTopic(key) {\n        return buildUserPrivateStoreTopic(key);\n    }\n}\n\nconst IV_LENGTH = 16;\nconst EPHEMERAL_PUBLIC_KEY_LENGTH = 65;\nconst MAC_LENGTH = 32;\nconst AES_BLOCK_SIZE = 16;\nconst assertEciesLengths = (ecies) => {\n    if (ecies.iv.length !== IV_LENGTH) {\n        throw new Error(\"Invalid iv length\");\n    }\n    if (ecies.ephemeralPublicKey.length !== EPHEMERAL_PUBLIC_KEY_LENGTH) {\n        throw new Error(\"Invalid ephemPublicKey length\");\n    }\n    if (ecies.ciphertext.length < 1 ||\n        ecies.ciphertext.length % AES_BLOCK_SIZE !== 0) {\n        throw new Error(\"Invalid ciphertext length\");\n    }\n    if (ecies.mac.length !== MAC_LENGTH) {\n        throw new Error(\"Invalid mac length\");\n    }\n};\nclass SignedEciesCiphertext {\n    constructor({ eciesBytes, signature }) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!eciesBytes || !eciesBytes.length) {\n            throw new Error(\"eciesBytes is empty\");\n        }\n        if (!signature) {\n            throw new Error(\"signature is undefined\");\n        }\n        this.eciesBytes = eciesBytes;\n        this.signature = new Signature(signature);\n        this.ciphertext = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.ciphertext.SignedEciesCiphertext_Ecies.decode(eciesBytes);\n    }\n    toBytes() {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.ciphertext.SignedEciesCiphertext.encode(this).finish();\n    }\n    async verify(pubKey) {\n        return pubKey.verify(this.signature, await sha256(this.eciesBytes));\n    }\n    static fromBytes(data) {\n        const obj = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.ciphertext.SignedEciesCiphertext.decode(data);\n        return new SignedEciesCiphertext(obj);\n    }\n    static async create(ecies, signer) {\n        assertEciesLengths(ecies);\n        const eciesBytes = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.ciphertext.SignedEciesCiphertext_Ecies.encode(ecies).finish();\n        const signature = await signer.sign(await sha256(eciesBytes));\n        return new SignedEciesCiphertext({ eciesBytes, signature });\n    }\n}\n\n/**\n * EncryptedPersistence is a Persistence implementation that uses ECIES to encrypt all values\n * ECIES encryption protects against unauthorized reads, but not unauthorized writes.\n * A third party with access to the underlying store could write malicious data using the public key of the owner\n */\nclass EncryptedPersistence {\n    constructor(persistence, privateKey) {\n        this.persistence = persistence;\n        this.privateKey = privateKey;\n        this.privateKeyBytes = Buffer.from(privateKey.secp256k1.bytes);\n        this.publicKey = getPublic(this.privateKeyBytes);\n    }\n    async getItem(key) {\n        const encrypted = await this.persistence.getItem(key);\n        if (encrypted) {\n            return this.decrypt(encrypted);\n        }\n        return null;\n    }\n    async setItem(key, value) {\n        const encrypted = await this.encrypt(value);\n        await this.persistence.setItem(key, encrypted);\n    }\n    async encrypt(value) {\n        const ecies = await encrypt(this.publicKey, Buffer.from(value));\n        return this.serializeEcies(ecies);\n    }\n    async decrypt(value) {\n        const ecies = await this.deserializeEcies(value);\n        const result = await decrypt(this.privateKeyBytes, ecies);\n        return Uint8Array.from(result);\n    }\n    async serializeEcies(data) {\n        // This will create and sign a `SignedEciesCiphertext` payload based on the provided data\n        const protoVal = await SignedEciesCiphertext.create(data, this.privateKey);\n        return protoVal.toBytes();\n    }\n    async deserializeEcies(data) {\n        const protoVal = SignedEciesCiphertext.fromBytes(data);\n        // Verify the signature upon deserializing\n        if (!(await protoVal.verify(this.privateKey.publicKey))) {\n            throw new Error(\"signature validation failed\");\n        }\n        const ecies = protoVal.ciphertext;\n        return {\n            ciphertext: Buffer.from(ecies.ciphertext),\n            mac: Buffer.from(ecies.mac),\n            iv: Buffer.from(ecies.iv),\n            ephemeralPublicKey: Buffer.from(ecies.ephemeralPublicKey),\n        };\n    }\n}\n\nclass PrefixedPersistence {\n    constructor(prefix, persistence) {\n        this.prefix = prefix;\n        this.persistence = persistence;\n    }\n    getItem(key) {\n        return this.persistence.getItem(this.buildKey(key));\n    }\n    setItem(key, value) {\n        return this.persistence.setItem(this.buildKey(key), value);\n    }\n    buildKey(key) {\n        return this.prefix + key;\n    }\n}\n\nconst buildPersistenceFromOptions = async (opts, keys) => {\n    if (!opts.persistConversations) {\n        return InMemoryPersistence.create();\n    }\n    const address = await keys.identityKey.publicKey.walletSignatureAddress();\n    const prefix = buildPersistenceKey(opts.env, address);\n    const basePersistence = opts.basePersistence;\n    const shouldEncrypt = !opts.disablePersistenceEncryption;\n    return new PrefixedPersistence(prefix, shouldEncrypt\n        ? new EncryptedPersistence(basePersistence, keys.identityKey)\n        : basePersistence);\n};\n\nconst KEY_BUNDLE_NAME = \"key_bundle\";\n/**\n * EncryptedKeyStore wraps Store to enable encryption of private key bundles\n * using a wallet signature.\n */\nclass NetworkKeyManager {\n    constructor(signer, persistence, preEnableIdentityCallback) {\n        this.signer = signer;\n        this.persistence = persistence;\n        this.preEnableIdentityCallback = preEnableIdentityCallback;\n    }\n    async getStorageAddress(name) {\n        // I think we want to namespace the storage address by wallet\n        // This will allow us to support switching between multiple wallets in the same browser\n        let walletAddress = await this.signer.getAddress();\n        walletAddress = (0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(walletAddress);\n        return `${walletAddress}/${name}`;\n    }\n    // Retrieve a private key bundle for the active wallet address in the signer\n    async loadPrivateKeyBundle() {\n        const storageBuffer = await this.persistence.getItem(await this.getStorageAddress(KEY_BUNDLE_NAME));\n        if (!storageBuffer) {\n            return null;\n        }\n        const [bundle, needsUpdate] = await this.fromEncryptedBytes(this.signer, Uint8Array.from(storageBuffer));\n        // If a versioned bundle is not found, the legacy bundle needs to be resaved to the store in\n        // the new format. Once all bundles have been upgraded, this migration code can be removed.\n        if (needsUpdate) {\n            await this.storePrivateKeyBundle(bundle);\n        }\n        return bundle;\n    }\n    // Store the private key bundle at an address generated based on the active wallet in the signer\n    async storePrivateKeyBundle(bundle) {\n        const keyAddress = await this.getStorageAddress(KEY_BUNDLE_NAME);\n        const encodedBundle = await this.toEncryptedBytes(bundle, this.signer);\n        // We need to setup the Authenticator so that the underlying store can publish messages without error\n        if (typeof this.persistence.setAuthenticator === \"function\") {\n            this.persistence.setAuthenticator(new LocalAuthenticator(bundle.identityKey));\n        }\n        await this.persistence.setItem(keyAddress, encodedBundle);\n    }\n    // encrypts/serializes the bundle for storage\n    async toEncryptedBytes(bundle, wallet) {\n        // serialize the contents\n        const bytes = bundle.encode();\n        const wPreKey = crypto.getRandomValues(new Uint8Array(32));\n        const input = storageSigRequestText(wPreKey);\n        const walletAddr = await wallet.getAddress();\n        if (this.preEnableIdentityCallback) {\n            await this.preEnableIdentityCallback();\n        }\n        const sig = await wallet.signMessage(input);\n        // Check that the signature is correct, was created using the expected\n        // input, and retry if not. This mitigates a bug in interacting with\n        // LedgerLive for iOS, where the previous signature response is\n        // returned in some cases.\n        const valid = (0,viem__WEBPACK_IMPORTED_MODULE_14__.verifyMessage)({\n            address: walletAddr,\n            message: input,\n            signature: sig,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/no-misused-promises\n        if (!valid) {\n            throw new Error(\"invalid signature\");\n        }\n        const secret = (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToBytes)(sig);\n        const ciphertext = await encrypt$1(bytes, secret);\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.EncryptedPrivateKeyBundle.encode({\n            v1: {\n                walletPreKey: wPreKey,\n                ciphertext,\n            },\n        }).finish();\n    }\n    // decrypts/deserializes the bundle from storage bytes\n    async fromEncryptedBytes(wallet, bytes) {\n        const [eBundle, needsUpdate] = getEncryptedBundle(bytes);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!eBundle.walletPreKey) {\n            throw new Error(\"missing wallet pre-key\");\n        }\n        if (!eBundle.ciphertext?.aes256GcmHkdfSha256) {\n            throw new Error(\"missing bundle ciphertext\");\n        }\n        if (this.preEnableIdentityCallback) {\n            await this.preEnableIdentityCallback();\n        }\n        const secret = (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToBytes)((await wallet.signMessage(storageSigRequestText(eBundle.walletPreKey))));\n        // Ledger uses the last byte = v=[0,1,...] but Metamask and other wallets generate with\n        // v+27 as the last byte. We need to support both for interoperability. Doing this\n        // on the decryption side provides an immediate retroactive fix.\n        // Ledger is using the canonical way, whereas Ethereum adds 27 due to some legacy stuff\n        // https://github.com/ethereum/go-ethereum/issues/19751#issuecomment-504900739\n        try {\n            // Try the original version of the signature first\n            const ciphertext = new Ciphertext(eBundle.ciphertext);\n            const decrypted = await decrypt$1(ciphertext, secret);\n            const [bundle, needsUpdate2] = getPrivateBundle(decrypted);\n            return [bundle, needsUpdate || needsUpdate2];\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        }\n        catch (e) {\n            // Assert that the secret is length 65 (encoded signature + recovery byte)\n            if (secret.length !== 65) {\n                throw new Error(\"Expected 65 bytes before trying a different recovery byte\");\n            }\n            // Try the other version of recovery byte, either +27 or -27\n            const lastByte = secret[secret.length - 1];\n            let newSecret = secret.slice(0, secret.length - 1);\n            if (lastByte < 27) {\n                // This is a canonical signature, so we need to add 27 to the recovery byte and try again\n                newSecret = new Uint8Array([...newSecret, lastByte + 27]);\n            }\n            else {\n                // This canocalizes v to 0 or 1 (or maybe 2 or 3 but very unlikely)\n                newSecret = new Uint8Array([...newSecret, lastByte - 27]);\n            }\n            const ciphertext = new Ciphertext(eBundle.ciphertext);\n            const decrypted = await decrypt$1(ciphertext, newSecret);\n            const [bundle, needsUpdate2] = getPrivateBundle(decrypted);\n            return [bundle, needsUpdate || needsUpdate2];\n        }\n    }\n}\n// getEncryptedV1Bundle returns the decoded bundle from the provided bytes. If there is an error decoding the bundle it attempts\n// to decode the bundle as a legacy bundle. Additionally return whether the bundle is in the expected format.\nfunction getEncryptedBundle(bytes) {\n    try {\n        const b = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.EncryptedPrivateKeyBundle.decode(bytes);\n        if (b.v1) {\n            return [b.v1, false];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    }\n    catch (e) {\n        return [_xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.EncryptedPrivateKeyBundleV1.decode(bytes), true];\n    }\n    throw new Error(\"unrecognized encrypted private key bundle version\");\n}\n// getPrivateV1Bundle returns the decoded bundle from the provided bytes. If there is an error decoding the bundle it attempts\n// to decode the bundle as a legacy bundle. Additionally return whether the bundle is in the expected format.\nfunction getPrivateBundle(bytes) {\n    try {\n        // TODO: add support for V2\n        const b = decodePrivateKeyBundle(bytes);\n        if (b instanceof PrivateKeyBundleV2) {\n            throw new Error(\"V2 bundles not supported yet\");\n        }\n        return [b, false];\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    }\n    catch (e) {\n        // Adds a default fallback for older versions of the proto\n        const b = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.PrivateKeyBundleV1.decode(bytes);\n        return [new PrivateKeyBundleV1(b), true];\n    }\n}\nfunction storageSigRequestText(preKey) {\n    // Note that an update to this signature request text will require\n    // addition of backward compatibility for existing encrypted bundles\n    // and/or a migration; otherwise clients will no longer be able to\n    // decrypt those bundles.\n    return (\"XMTP : Enable Identity\\n\" +\n        `${bytesToHex(preKey)}\\n` +\n        \"\\n\" +\n        \"For more info: https://xmtp.org/signatures/\");\n}\n\n/**\n * KeyGeneratorKeystoreProvider will create a new XMTP `PrivateKeyBundle` and persist it to the network\n * This provider should always be specified last in the list of `keystoreProviders` on client creation,\n * as it will overwrite any XMTP identities already on the network\n */\nclass KeyGeneratorKeystoreProvider {\n    async newKeystore(opts, apiClient, wallet) {\n        if (!wallet) {\n            throw new KeystoreProviderUnavailableError(\"Wallet required to generate new keys\");\n        }\n        if (opts.preCreateIdentityCallback) {\n            await opts.preCreateIdentityCallback();\n        }\n        const bundle = await PrivateKeyBundleV1.generate(wallet);\n        const manager = new NetworkKeyManager(wallet, new TopicPersistence(apiClient), opts.preEnableIdentityCallback);\n        await manager.storePrivateKeyBundle(bundle);\n        return InMemoryKeystore.create(bundle, await buildPersistenceFromOptions(opts, bundle));\n    }\n}\n\n/**\n * NetworkKeystoreProvider will look on the XMTP network for an `EncryptedPrivateKeyBundle`\n * on the user's private storage topic. If found, will decrypt the bundle using a wallet\n * signature and instantiate a Keystore instance using the decrypted value.\n */\nclass NetworkKeystoreProvider {\n    async newKeystore(opts, apiClient, wallet) {\n        if (!wallet) {\n            throw new KeystoreProviderUnavailableError(\"No wallet provided\");\n        }\n        const loader = new NetworkKeyManager(wallet, new TopicPersistence(apiClient), opts.preEnableIdentityCallback);\n        const keys = await loader.loadPrivateKeyBundle();\n        if (!keys) {\n            throw new KeystoreProviderUnavailableError(\"No keys found\");\n        }\n        return InMemoryKeystore.create(keys, await buildPersistenceFromOptions(opts, keys));\n    }\n}\n\nfunction getEthereum() {\n    return window.ethereum;\n}\n\nfunction semverParse(version) {\n    const [major, minor, ...patch] = version.split(\".\");\n    return {\n        major: Number(major),\n        minor: Number(minor),\n        // Keep patch as a string so that it can support prerelease versions\n        patch: patch.join(\".\"),\n    };\n}\nfunction isSameMajorVersion(a, b) {\n    // If no version is provided, assume it is the same\n    if (!a || !b) {\n        return true;\n    }\n    return semverParse(a).major === semverParse(b).major;\n}\n// Checks if A semver is greater than B semver\nfunction semverGreaterThan(a, b) {\n    if (!a || !b) {\n        return false;\n    }\n    const aSemver = semverParse(a);\n    const bSemver = semverParse(b);\n    if (aSemver.major !== bSemver.major) {\n        return aSemver.major > bSemver.major;\n    }\n    if (aSemver.minor !== bSemver.minor) {\n        return aSemver.minor > bSemver.minor;\n    }\n    if (!aSemver.patch || !bSemver.patch) {\n        return false;\n    }\n    return patchGreaterThan(aSemver.patch, bSemver.patch);\n}\n// Home-brewed attempt at comparing patch versions so we don't have to import semver package.\n// Example full version might be \"2.0.1-alpha.1\", and this will be operating on the \"1-alpha.1\" portion\nfunction patchGreaterThan(a, b) {\n    const [aVersion, aExtra] = a.split(\"-\");\n    const [bVersion, bExtra] = b.split(\"-\");\n    if (Number(aVersion) !== Number(bVersion)) {\n        return Number(aVersion) > Number(bVersion);\n    }\n    if (!aExtra || !bExtra) {\n        return false;\n    }\n    const [aTag, aTagVersion] = aExtra.split(\".\");\n    const [bTag, bTagVersion] = bExtra.split(\".\");\n    if (aTag !== bTag) {\n        return true;\n    }\n    return Number(aTagVersion) > Number(bTagVersion);\n}\n\nconst { GetKeystoreStatusResponse_KeystoreStatus: KeystoreStatus$1, InitKeystoreRequest, InitKeystoreResponse, GetKeystoreStatusRequest, GetKeystoreStatusResponse, } = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore;\nasync function snapRPC(method, rpc, req, meta, snapId) {\n    let reqParam = null;\n    if (rpc.req) {\n        const encoder = rpc.req.encode;\n        const reqBytes = encoder(req).finish();\n        reqParam = b64Encode(reqBytes, 0, reqBytes.length);\n    }\n    const responseString = await snapRequest(method, reqParam, meta, snapId);\n    if (Array.isArray(responseString)) {\n        throw new Error(\"Unexpected array response\");\n    }\n    return rpc.res.decode(b64Decode(responseString));\n}\nasync function snapRequest(method, req, meta, snapId) {\n    const params = { meta };\n    if (typeof req === \"string\") {\n        params.req = req;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const response = await getEthereum()?.request({\n        method: \"wallet_invokeSnap\",\n        params: {\n            snapId,\n            request: {\n                method,\n                params,\n            },\n        },\n    });\n    if (!response || typeof response !== \"object\") {\n        throw new Error(\"No response value\");\n    }\n    return response.res;\n}\n// If a browser has multiple providers, but one of them supports MetaMask flask\n// this function will ensure that Flask is being used and return true.\n// Designed to be resistant to provider clobbering by Phantom and CBW\n// Inspired by https://github.com/Montoya/snap-connect-test/blob/main/index.html\nasync function hasMetamaskWithSnaps() {\n    const ethereum = getEthereum();\n    // Naive way of detecting snaps support\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ethereum?.isMetaMask) {\n        try {\n            await ethereum.request({\n                method: \"wallet_getSnaps\",\n            });\n            return true;\n        }\n        catch {\n            // no-op\n        }\n    }\n    if (\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    typeof ethereum?.detected !== \"undefined\" &&\n        Array.isArray(ethereum.detected)) {\n        for (const provider of ethereum.detected) {\n            try {\n                // Detect snaps support\n                await provider.request({\n                    method: \"wallet_getSnaps\",\n                });\n                // enforces MetaMask as provider\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                ethereum?.setProvider?.(provider);\n                return true;\n            }\n            catch {\n                // no-op\n            }\n        }\n    }\n    if (\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    typeof ethereum?.providers !== \"undefined\" &&\n        Array.isArray(ethereum.providers)) {\n        for (const provider of ethereum.providers) {\n            try {\n                // Detect snaps support\n                await provider.request({\n                    method: \"wallet_getSnaps\",\n                });\n                window.ethereum = provider;\n                return true;\n            }\n            catch {\n                // no-op\n            }\n        }\n    }\n    return false;\n}\nasync function getSnaps() {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return await getEthereum()?.request({\n        method: \"wallet_getSnaps\",\n    });\n}\nasync function getSnap(snapId, version) {\n    try {\n        const snaps = await getSnaps();\n        if (snaps) {\n            return Object.values(snaps).find((snap) => snap &&\n                snap.id === snapId &&\n                (!version || isSameMajorVersion(snap.version, version)));\n        }\n        return undefined;\n    }\n    catch (e) {\n        console.warn(\"Failed to obtain installed snap\", e);\n        return undefined;\n    }\n}\nasync function connectSnap(snapId, \n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nparams = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    await getEthereum()?.request({\n        method: \"wallet_requestSnaps\",\n        params: {\n            [snapId]: params,\n        },\n    });\n}\nconst getWalletStatusCodec = {\n    req: GetKeystoreStatusRequest,\n    res: GetKeystoreStatusResponse,\n};\nasync function getWalletStatus(meta, snapId) {\n    const response = await snapRPC(\"getKeystoreStatus\", getWalletStatusCodec, {\n        walletAddress: meta.walletAddress,\n    }, meta, snapId);\n    if ([\n        KeystoreStatus$1.KEYSTORE_STATUS_UNSPECIFIED,\n        KeystoreStatus$1.UNRECOGNIZED,\n    ].includes(response.status)) {\n        throw new Error(\"No status specified in response\");\n    }\n    return response.status;\n}\nconst initKeystoreCodec = {\n    req: InitKeystoreRequest,\n    res: InitKeystoreResponse,\n};\nasync function initSnap(bundle, env, snapId) {\n    const walletAddress = bundle.identityKey.publicKey.walletSignatureAddress();\n    const response = await snapRPC(\"initKeystore\", initKeystoreCodec, {\n        v1: bundle,\n    }, { walletAddress, env }, snapId);\n    if (response.error) {\n        throw new KeystoreError(response.error.code, response.error.message);\n    }\n}\n\nconst apiDefs = {\n    /**\n     * Decrypt a batch of V1 messages\n     */\n    decryptV1: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.DecryptV1Request,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.DecryptResponse,\n    },\n    /**\n     * Decrypt a batch of V2 messages\n     */\n    decryptV2: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.DecryptV2Request,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.DecryptResponse,\n    },\n    /**\n     * Encrypt a batch of V1 messages\n     */\n    encryptV1: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.EncryptV1Request,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.EncryptResponse,\n    },\n    /**\n     * Encrypt a batch of V2 messages\n     */\n    encryptV2: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.EncryptV2Request,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.EncryptResponse,\n    },\n    /**\n     * Take a batch of invite messages and store the `TopicKeys` for later use in\n     * decrypting messages\n     */\n    saveInvites: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SaveInvitesRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SaveInvitesResponse,\n    },\n    /**\n     * Create a sealed/encrypted invite and store the Topic keys in the Keystore\n     * for later use. The returned invite payload must be sent to the network for\n     * the other party to be able to communicate.\n     */\n    createInvite: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.CreateInviteRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.CreateInviteResponse,\n    },\n    /**\n     * Create an XMTP auth token to be used as a header on XMTP API requests\n     */\n    createAuthToken: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.CreateAuthTokenRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.authn.Token,\n    },\n    /**\n     * Sign the provided digest with either the `IdentityKey` or a specified\n     * `PreKey`\n     */\n    signDigest: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SignDigestRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.signature.Signature,\n    },\n    /**\n     * Get the `PublicKeyBundle` associated with the Keystore's private keys\n     */\n    getPublicKeyBundle: {\n        req: null,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.PublicKeyBundle,\n    },\n    /**\n     * Export the private keys. May throw an error if the keystore implementation\n     * does not allow this operation\n     */\n    getPrivateKeyBundle: {\n        req: null,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privateKey.PrivateKeyBundleV1,\n    },\n    /**\n     * Save V1 Conversations\n     */\n    saveV1Conversations: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SaveV1ConversationsRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SaveV1ConversationsResponse,\n    },\n    /**\n     * Get a list of V1 conversations\n     */\n    getV1Conversations: {\n        req: null,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetConversationsResponse,\n    },\n    /**\n     * Get a list of V2 conversations\n     */\n    getV2Conversations: {\n        req: null,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetConversationsResponse,\n    },\n    /**\n     * Get a refresh job from the persistence\n     */\n    getRefreshJob: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetRefreshJobRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetRefreshJobResponse,\n    },\n    /**\n     * Sets the time of a refresh job\n     */\n    setRefreshJob: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SetRefeshJobRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SetRefreshJobResponse,\n    },\n    /**\n     * Encrypt a batch of messages to yourself\n     */\n    selfEncrypt: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SelfEncryptRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SelfEncryptResponse,\n    },\n    /**\n     * Decrypt a batch of messages to yourself\n     */\n    selfDecrypt: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.SelfDecryptRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.DecryptResponse,\n    },\n    /**\n     * Get the private preferences topic identifier\n     */\n    getPrivatePreferencesTopicIdentifier: {\n        req: null,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetPrivatePreferencesTopicIdentifierResponse,\n    },\n    /**\n     * Returns the conversation HMAC keys for the current, previous, and next\n     * 30 day periods since the epoch\n     */\n    getV2ConversationHmacKeys: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetConversationHmacKeysRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetConversationHmacKeysResponse,\n    },\n};\nconst snapApiDefs = {\n    getKeystoreStatus: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetKeystoreStatusRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.GetKeystoreStatusResponse,\n    },\n    initKeystore: {\n        req: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.InitKeystoreRequest,\n        res: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore.InitKeystoreResponse,\n    },\n};\n\nfunction SnapKeystore(walletAddress, env, snapId) {\n    const generatedMethods = {};\n    const snapMeta = {\n        walletAddress,\n        env,\n    };\n    for (const [method, rpc] of Object.entries(snapApiDefs)) {\n        // eslint-disable-next-line @typescript-eslint/require-await\n        generatedMethods[method] = async (req) => {\n            if (!rpc.req) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return snapRPC(method, rpc, undefined, snapMeta, snapId);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-argument\n            return snapRPC(method, rpc, req, snapMeta, snapId);\n        };\n    }\n    return {\n        ...generatedMethods,\n        // Don't bother calling the keystore, since we already have the wallet address\n        // eslint-disable-next-line @typescript-eslint/require-await\n        async getAccountAddress() {\n            return walletAddress;\n        },\n    };\n}\n\nconst { GetKeystoreStatusResponse_KeystoreStatus: KeystoreStatus } = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.keystore;\nconst SNAP_LOCAL_ORIGIN = \"local:http://localhost:8080\";\n/**\n * The Snap keystore provider will:\n * 1. Check if the user is capable of using Snaps\n * 2. Check if the user has already setup the Snap with the appropriate keys\n * 3. If not, will get keys from the network or create new keys and store them in the Snap\n */\nclass SnapKeystoreProvider {\n    constructor(snapId = SNAP_LOCAL_ORIGIN, snapVersion) {\n        this.snapId = snapId;\n        this.snapVersion = snapVersion;\n    }\n    async newKeystore(opts, apiClient, wallet) {\n        if (!wallet) {\n            throw new KeystoreProviderUnavailableError(\"No wallet provided\");\n        }\n        if (!(await hasMetamaskWithSnaps())) {\n            throw new KeystoreProviderUnavailableError(\"MetaMask with Snaps not detected\");\n        }\n        const walletAddress = await wallet.getAddress();\n        const env = opts.env;\n        const hasSnap = await getSnap(this.snapId, this.snapVersion);\n        if (!hasSnap || semverGreaterThan(this.snapVersion, hasSnap.version)) {\n            await connectSnap(this.snapId, this.snapVersion ? { version: this.snapVersion } : {});\n        }\n        if (!(await checkSnapLoaded(walletAddress, env, this.snapId))) {\n            const bundle = await bundleFromOptions(opts, apiClient, wallet);\n            await initSnap(bundle, env, this.snapId);\n        }\n        return SnapKeystore(walletAddress, env, this.snapId);\n    }\n}\nasync function createBundle(opts, apiClient, wallet) {\n    const tmpProvider = new KeyGeneratorKeystoreProvider();\n    const tmpKeystore = await tmpProvider.newKeystore(opts, apiClient, wallet);\n    return new PrivateKeyBundleV1(await tmpKeystore.getPrivateKeyBundle());\n}\nasync function bundleFromOptions(opts, apiClient, wallet) {\n    if (opts.privateKeyOverride) {\n        const bundle = decodePrivateKeyBundle(opts.privateKeyOverride);\n        if (!(bundle instanceof PrivateKeyBundleV1)) {\n            throw new Error(\"Unsupported private key bundle version\");\n        }\n        return bundle;\n    }\n    if (!wallet) {\n        throw new Error(\"No privateKeyOverride or wallet\");\n    }\n    return getOrCreateBundle(opts, apiClient, wallet);\n}\nasync function getOrCreateBundle(opts, apiClient, wallet) {\n    // I really don't love using other providers inside a provider. Feels like too much indirection\n    // TODO: Refactor keystore providers to better support the weird Snap flow\n    const networkProvider = new NetworkKeystoreProvider();\n    try {\n        const tmpKeystore = await networkProvider.newKeystore(opts, apiClient, wallet);\n        return new PrivateKeyBundleV1(await tmpKeystore.getPrivateKeyBundle());\n    }\n    catch (e) {\n        if (e instanceof KeystoreProviderUnavailableError) {\n            return createBundle(opts, apiClient, wallet);\n        }\n        throw e;\n    }\n}\nasync function checkSnapLoaded(walletAddress, env, snapId) {\n    const status = await getWalletStatus({ walletAddress, env }, snapId);\n    if (status === KeystoreStatus.KEYSTORE_STATUS_INITIALIZED) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * StaticKeystoreProvider will look for a `privateKeyOverride` in the provided options,\n * and bootstrap a Keystore using those options if provided.\n *\n * If no `privateKeyOverride` is supplied will throw a `KeystoreProviderUnavailableError` causing\n * the client to continue iterating through the `KeystoreProviders` list.\n */\nclass StaticKeystoreProvider {\n    async newKeystore(opts) {\n        const { privateKeyOverride } = opts;\n        if (!privateKeyOverride) {\n            throw new KeystoreProviderUnavailableError(\"No private key override provided\");\n        }\n        const bundle = decodePrivateKeyBundle(privateKeyOverride);\n        if (bundle instanceof PrivateKeyBundleV2) {\n            throw new Error(\"V2 private key bundle found. Only V1 supported\");\n        }\n        return InMemoryKeystore.create(bundle, await buildPersistenceFromOptions(opts, bundle));\n    }\n}\n\nconst isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\nfunction getSigner(wallet) {\n    if (!wallet) {\n        return null;\n    }\n    if (isWalletClient(wallet)) {\n        return convertWalletClientToSigner(wallet);\n    }\n    if (typeof wallet.getAddress !== \"function\") {\n        throw new Error(\"Unknown wallet type\");\n    }\n    return wallet;\n}\nfunction isWalletClient(wallet) {\n    return (\"type\" in wallet &&\n        (wallet.type === \"walletClient\" || wallet.type === \"base\"));\n}\nfunction convertWalletClientToSigner(walletClient) {\n    const { account } = walletClient;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!account || !account.address) {\n        throw new Error(\"WalletClient is not configured\");\n    }\n    return {\n        // eslint-disable-next-line @typescript-eslint/require-await\n        getAddress: async () => account.address,\n        signMessage: async (message) => walletClient.signMessage({\n            message: typeof message === \"string\" ? message : { raw: message },\n            account,\n        }),\n    };\n}\n\n// This import has to come first so that the polyfills are registered before the stream polyfills\n//\n// Compression\n//\nasync function decompress(encoded, maxSize) {\n    if (encoded.compression === undefined) {\n        return;\n    }\n    const sink = { bytes: new Uint8Array(encoded.content.length) };\n    await readStreamFromBytes(encoded.content)\n        .pipeThrough(new DecompressionStream(compressionIdFromCode(encoded.compression)))\n        .pipeTo(writeStreamToBytes(sink, maxSize));\n    encoded.content = sink.bytes;\n}\nasync function compress(encoded) {\n    if (encoded.compression === undefined) {\n        return;\n    }\n    const sink = { bytes: new Uint8Array(encoded.content.length / 10) };\n    await readStreamFromBytes(encoded.content)\n        .pipeThrough(new CompressionStream(compressionIdFromCode(encoded.compression)))\n        .pipeTo(writeStreamToBytes(sink, encoded.content.length + 1000));\n    encoded.content = sink.bytes;\n}\nfunction compressionIdFromCode(code) {\n    if (code === _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.content.Compression.COMPRESSION_GZIP) {\n        return \"gzip\";\n    }\n    if (code === _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.content.Compression.COMPRESSION_DEFLATE) {\n        return \"deflate\";\n    }\n    throw new Error(\"unrecognized compression algorithm\");\n}\nfunction readStreamFromBytes(bytes, chunkSize = 1024) {\n    let position = 0;\n    return new ReadableStream({\n        pull(controller) {\n            if (position >= bytes.length) {\n                // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n                return controller.close();\n            }\n            let end = position + chunkSize;\n            end = end <= bytes.length ? end : bytes.length;\n            controller.enqueue(bytes.subarray(position, end));\n            position = end;\n        },\n    });\n}\nfunction writeStreamToBytes(sink, maxSize) {\n    let position = 0;\n    return new WritableStream({\n        write(chunk) {\n            const end = position + chunk.length;\n            if (end > maxSize) {\n                throw new Error(\"maximum output size exceeded\");\n            }\n            while (sink.bytes.length < end) {\n                sink.bytes = growBytes(sink.bytes, maxSize);\n            }\n            sink.bytes.set(chunk, position);\n            position = end;\n        },\n        close() {\n            if (position < sink.bytes.length) {\n                sink.bytes = sink.bytes.subarray(0, position);\n            }\n        },\n    });\n}\nfunction growBytes(bytes, maxSize) {\n    let newSize = bytes.length * 2;\n    if (newSize > maxSize) {\n        newSize = maxSize;\n    }\n    const bigger = new Uint8Array(newSize);\n    bigger.set(bytes);\n    return bigger;\n}\n\n// Decodes contact bundles from the contact topic.\nfunction decodeContactBundle(bytes) {\n    let cb;\n    try {\n        cb = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.contact.ContactBundle.decode(bytes);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    }\n    catch (e) {\n        const pb = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.publicKey.PublicKeyBundle.decode(bytes);\n        cb = { v1: { keyBundle: new PublicKeyBundle(pb) }, v2: undefined };\n    }\n    if (cb.v1?.keyBundle) {\n        return new PublicKeyBundle(cb.v1.keyBundle);\n    }\n    if (cb.v2?.keyBundle) {\n        return new SignedPublicKeyBundle(cb.v2.keyBundle);\n    }\n    throw new Error(\"unknown or invalid contact bundle\");\n}\n// Encodes public key bundle for the contact topic.\nfunction encodeContactBundle(bundle) {\n    if (bundle instanceof PublicKeyBundle) {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.contact.ContactBundle.encode({\n            v1: { keyBundle: bundle },\n            v2: undefined,\n        }).finish();\n    }\n    else {\n        return _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.contact.ContactBundle.encode({\n            v1: undefined,\n            v2: { keyBundle: bundle },\n        }).finish();\n    }\n}\n\nvar _Contacts_instances, _Contacts_consentList, _Contacts_jobRunner, _Contacts_validateConsentSignature;\nclass ConsentListEntry {\n    constructor(value, entryType, permissionType) {\n        this.value = value;\n        this.entryType = entryType;\n        this.permissionType = permissionType;\n    }\n    get key() {\n        return `${this.entryType}-${this.value}`;\n    }\n    static fromAddress(address, permissionType = \"unknown\") {\n        return new ConsentListEntry(address, \"address\", permissionType);\n    }\n    static fromGroupId(groupId, permissionType = \"unknown\") {\n        return new ConsentListEntry(groupId, \"groupId\", permissionType);\n    }\n    static fromInboxId(inboxId, permissionType = \"unknown\") {\n        return new ConsentListEntry(inboxId, \"inboxId\", permissionType);\n    }\n}\nclass ConsentList {\n    constructor(client) {\n        this.entries = new Map();\n        this.client = client;\n    }\n    allow(address) {\n        const entry = ConsentListEntry.fromAddress(address, \"allowed\");\n        this.entries.set(entry.key, \"allowed\");\n        return entry;\n    }\n    deny(address) {\n        const entry = ConsentListEntry.fromAddress(address, \"denied\");\n        this.entries.set(entry.key, \"denied\");\n        return entry;\n    }\n    allowGroup(groupId) {\n        const entry = ConsentListEntry.fromGroupId(groupId, \"allowed\");\n        this.entries.set(entry.key, \"allowed\");\n        return entry;\n    }\n    denyGroup(groupId) {\n        const entry = ConsentListEntry.fromGroupId(groupId, \"denied\");\n        this.entries.set(entry.key, \"denied\");\n        return entry;\n    }\n    allowInboxId(inboxId) {\n        const entry = ConsentListEntry.fromInboxId(inboxId, \"allowed\");\n        this.entries.set(entry.key, \"allowed\");\n        return entry;\n    }\n    denyInboxId(inboxId) {\n        const entry = ConsentListEntry.fromInboxId(inboxId, \"denied\");\n        this.entries.set(entry.key, \"denied\");\n        return entry;\n    }\n    state(address) {\n        const entry = ConsentListEntry.fromAddress(address);\n        return this.entries.get(entry.key) ?? \"unknown\";\n    }\n    groupState(groupId) {\n        const entry = ConsentListEntry.fromGroupId(groupId);\n        return this.entries.get(entry.key) ?? \"unknown\";\n    }\n    inboxIdState(inboxId) {\n        const entry = ConsentListEntry.fromInboxId(inboxId);\n        return this.entries.get(entry.key) ?? \"unknown\";\n    }\n    /**\n     * Decode messages and save them to the keystore\n     */\n    async decodeMessages(messageMap) {\n        const messages = Array.from(messageMap.values());\n        // decrypt messages\n        const { responses } = await this.client.keystore.selfDecrypt({\n            requests: messages.map((message) => ({ payload: message })),\n        });\n        const decryptedMessageEntries = Array.from(messageMap.keys()).map((key, index) => [key, responses[index]]);\n        // decode decrypted messages into actions, convert to map\n        const actionsMap = decryptedMessageEntries.reduce((result, [key, response]) => {\n            if (response.result?.decrypted) {\n                const action = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.privatePreferences.PrivatePreferencesAction.decode(response.result.decrypted);\n                result.set(key, action);\n            }\n            return result;\n        }, new Map());\n        // save actions to keystore\n        await this.client.keystore.savePrivatePreferences(actionsMap);\n        return actionsMap;\n    }\n    /*\n     * Process actions and update internal consent list\n     */\n    processActions(actionsMap) {\n        // actions to process\n        const actions = Array.from(actionsMap.values());\n        // update the consent list\n        actions.forEach((action) => {\n            action.allowAddress?.walletAddresses.forEach((address) => {\n                this.allow(address);\n            });\n            action.denyAddress?.walletAddresses.forEach((address) => {\n                this.deny(address);\n            });\n            action.allowGroup?.groupIds.forEach((groupId) => {\n                this.allowGroup(groupId);\n            });\n            action.denyGroup?.groupIds.forEach((groupId) => {\n                this.denyGroup(groupId);\n            });\n            action.allowInboxId?.inboxIds.forEach((inboxId) => {\n                this.allowInboxId(inboxId);\n            });\n            action.denyInboxId?.inboxIds.forEach((inboxId) => {\n                this.denyInboxId(inboxId);\n            });\n        });\n    }\n    async stream(onConnectionLost) {\n        const contentTopic = await this.client.keystore.getPrivatePreferencesTopic();\n        return Stream.create(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this.client, [contentTopic], async (envelope) => {\n            // ignore envelopes without message or timestamp\n            if (!envelope.message || !envelope.timestampNs) {\n                return undefined;\n            }\n            // decode message and save to keystore\n            const actionsMap = await this.decodeMessages(new Map([[envelope.timestampNs, envelope.message]]));\n            // update consent list\n            this.processActions(actionsMap);\n            // return the action\n            return actionsMap.get(envelope.timestampNs);\n        }, undefined, onConnectionLost);\n    }\n    reset() {\n        // clear existing entries\n        this.entries.clear();\n    }\n    async load(startTime) {\n        const contentTopic = await this.client.keystore.getPrivatePreferencesTopic();\n        // get private preferences from the network\n        const messageEntries = (await this.client.listEnvelopes(contentTopic, \n        // eslint-disable-next-line @typescript-eslint/require-await\n        async ({ message, timestampNs }) => [timestampNs, message], {\n            // special exception for private preferences topic\n            pageSize: 500,\n            // ensure messages are in ascending order\n            direction: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.messageApi.SortDirection.SORT_DIRECTION_ASCENDING,\n            startTime,\n        }))\n            // filter out messages with no timestamp\n            .filter(([timestampNs]) => Boolean(timestampNs));\n        // decode messages and save them to keystore\n        await this.decodeMessages(new Map(messageEntries));\n        // get all actions from keystore\n        const actionsMap = this.client.keystore.getPrivatePreferences();\n        // reset consent list\n        this.reset();\n        // process actions and update consent list\n        this.processActions(actionsMap);\n        return this.entries;\n    }\n    async publish(entries) {\n        // this reduce is purposefully verbose for type safety\n        const action = entries.reduce((result, entry) => {\n            let actionKey;\n            let valueKey;\n            let values;\n            // ignore unknown permission types\n            if (entry.permissionType === \"unknown\") {\n                return result;\n            }\n            switch (entry.entryType) {\n                case \"address\": {\n                    actionKey =\n                        entry.permissionType === \"allowed\" ? \"allowAddress\" : \"denyAddress\";\n                    valueKey = \"walletAddresses\";\n                    values = result[actionKey]?.[valueKey] ?? [];\n                    break;\n                }\n                case \"groupId\": {\n                    actionKey =\n                        entry.permissionType === \"allowed\" ? \"allowGroup\" : \"denyGroup\";\n                    valueKey = \"groupIds\";\n                    values = result[actionKey]?.[valueKey] ?? [];\n                    break;\n                }\n                case \"inboxId\": {\n                    actionKey =\n                        entry.permissionType === \"allowed\" ? \"allowInboxId\" : \"denyInboxId\";\n                    valueKey = \"inboxIds\";\n                    values = result[actionKey]?.[valueKey] ?? [];\n                    break;\n                }\n                default:\n                    return result;\n            }\n            return {\n                ...result,\n                [actionKey]: {\n                    [valueKey]: [...values, entry.value],\n                },\n            };\n            // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n        }, {});\n        // get envelopes to publish (there should only be one)\n        const envelopes = await this.client.keystore.createPrivatePreference(action);\n        // publish private preferences update\n        await this.client.publishEnvelopes(envelopes);\n        // persist newly published private preference to keystore\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.client.keystore.savePrivatePreferences(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        new Map([[envelopes[0].timestamp.getTime().toString(), action]]));\n        // update local entries after publishing\n        entries.forEach((entry) => {\n            this.entries.set(entry.key, entry.permissionType);\n        });\n    }\n}\nclass Contacts {\n    constructor(client) {\n        _Contacts_instances.add(this);\n        _Contacts_consentList.set(this, void 0);\n        _Contacts_jobRunner.set(this, void 0);\n        this.addresses = new Set();\n        this.client = client;\n        __classPrivateFieldSet(this, _Contacts_consentList, new ConsentList(client), \"f\");\n        __classPrivateFieldSet(this, _Contacts_jobRunner, new JobRunner(\"user-preferences\", client.keystore), \"f\");\n    }\n    async loadConsentList(startTime) {\n        return __classPrivateFieldGet(this, _Contacts_jobRunner, \"f\").run(async (lastRun) => {\n            // allow for override of startTime\n            const entries = await __classPrivateFieldGet(this, _Contacts_consentList, \"f\").load(startTime ?? lastRun);\n            try {\n                const conversations = await this.client.conversations.list();\n                const validConsentProofAddresses = conversations.reduce((result, conversation) => {\n                    if (conversation.consentProof &&\n                        this.consentState(conversation.peerAddress) === \"unknown\" &&\n                        __classPrivateFieldGet(this, _Contacts_instances, \"m\", _Contacts_validateConsentSignature).call(this, conversation.consentProof, conversation.peerAddress)) {\n                        return result.concat(conversation.peerAddress);\n                    }\n                    else {\n                        return result;\n                    }\n                }, \n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                []);\n                if (validConsentProofAddresses.length) {\n                    await this.client.contacts.allow(validConsentProofAddresses);\n                }\n            }\n            catch (err) {\n                console.log(err);\n            }\n            return entries;\n        });\n    }\n    async refreshConsentList() {\n        // clear existing consent list\n        __classPrivateFieldGet(this, _Contacts_consentList, \"f\").reset();\n        // reset last run time to the epoch\n        await __classPrivateFieldGet(this, _Contacts_jobRunner, \"f\").resetLastRunTime();\n        // reload the consent list\n        return this.loadConsentList();\n    }\n    async streamConsentList(onConnectionLost) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").stream(onConnectionLost);\n    }\n    setConsentListEntries(entries) {\n        if (!entries.length) {\n            return;\n        }\n        __classPrivateFieldGet(this, _Contacts_consentList, \"f\").reset();\n        entries.forEach((entry) => {\n            if (entry.permissionType === \"allowed\") {\n                __classPrivateFieldGet(this, _Contacts_consentList, \"f\").allow(entry.value);\n            }\n            if (entry.permissionType === \"denied\") {\n                __classPrivateFieldGet(this, _Contacts_consentList, \"f\").deny(entry.value);\n            }\n        });\n    }\n    isAllowed(address) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").state(address) === \"allowed\";\n    }\n    isDenied(address) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").state(address) === \"denied\";\n    }\n    isGroupAllowed(groupId) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").groupState(groupId) === \"allowed\";\n    }\n    isGroupDenied(groupId) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").groupState(groupId) === \"denied\";\n    }\n    isInboxAllowed(inboxId) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").inboxIdState(inboxId) === \"allowed\";\n    }\n    isInboxDenied(inboxId) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").inboxIdState(inboxId) === \"denied\";\n    }\n    consentState(address) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").state(address);\n    }\n    groupConsentState(groupId) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").groupState(groupId);\n    }\n    inboxConsentState(inboxId) {\n        return __classPrivateFieldGet(this, _Contacts_consentList, \"f\").inboxIdState(inboxId);\n    }\n    async allow(addresses) {\n        await __classPrivateFieldGet(this, _Contacts_consentList, \"f\").publish(addresses.map((address) => ConsentListEntry.fromAddress(address, \"allowed\")));\n    }\n    async deny(addresses) {\n        await __classPrivateFieldGet(this, _Contacts_consentList, \"f\").publish(addresses.map((address) => ConsentListEntry.fromAddress(address, \"denied\")));\n    }\n    async allowGroups(groupIds) {\n        await __classPrivateFieldGet(this, _Contacts_consentList, \"f\").publish(groupIds.map((groupId) => ConsentListEntry.fromGroupId(groupId, \"allowed\")));\n    }\n    async denyGroups(groupIds) {\n        await __classPrivateFieldGet(this, _Contacts_consentList, \"f\").publish(groupIds.map((groupId) => ConsentListEntry.fromGroupId(groupId, \"denied\")));\n    }\n    async allowInboxes(inboxIds) {\n        await __classPrivateFieldGet(this, _Contacts_consentList, \"f\").publish(inboxIds.map((inboxId) => ConsentListEntry.fromInboxId(inboxId, \"allowed\")));\n    }\n    async denyInboxes(inboxIds) {\n        await __classPrivateFieldGet(this, _Contacts_consentList, \"f\").publish(inboxIds.map((inboxId) => ConsentListEntry.fromInboxId(inboxId, \"denied\")));\n    }\n}\n_Contacts_consentList = new WeakMap(), _Contacts_jobRunner = new WeakMap(), _Contacts_instances = new WeakSet(), _Contacts_validateConsentSignature = function _Contacts_validateConsentSignature({ signature, timestamp }, peerAddress) {\n    const timestampMs = Number(timestamp);\n    if (!signature || !timestampMs) {\n        return false;\n    }\n    // timestamp should be in the past\n    if (timestampMs > Date.now()) {\n        return false;\n    }\n    // timestamp should be within the last 30 days\n    if (timestampMs < Date.now() - 1000 * 60 * 60 * 24 * 30) {\n        return false;\n    }\n    const signatureData = splitSignature(signature);\n    const message = (0,_xmtp_consent_proof_signature__WEBPACK_IMPORTED_MODULE_15__.createConsentMessage)(peerAddress, timestampMs);\n    const digest = (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToBytes)((0,viem__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(message));\n    // Recover public key\n    const publicKey = ecdsaSignerKey(digest, signatureData);\n    return publicKey?.getEthereumAddress() === this.client.address;\n};\n\n/**\n * Where message backups should be stored\n */\nvar BackupType;\n(function (BackupType) {\n    BackupType[BackupType[\"none\"] = 0] = \"none\";\n    BackupType[BackupType[\"xmtpTopicStore\"] = 1] = \"xmtpTopicStore\";\n})(BackupType || (BackupType = {}));\n\nconst BACKUP_TYPE$1 = BackupType.none;\nclass NoBackupClient {\n    static createConfiguration() {\n        return {\n            type: BACKUP_TYPE$1,\n            version: 0,\n        };\n    }\n    constructor(configuration) {\n        this.configuration = configuration;\n    }\n    get backupType() {\n        return BACKUP_TYPE$1;\n    }\n}\n\nconst BACKUP_TYPE = BackupType.xmtpTopicStore;\nclass TopicStoreBackupClient {\n    static createConfiguration(walletAddress) {\n        // TODO: randomly generate topic and encryption key\n        return {\n            type: BACKUP_TYPE,\n            version: 0,\n            topic: \"history-v0:\" + walletAddress,\n        };\n    }\n    constructor(configuration) {\n        this.configuration = configuration;\n    }\n    get backupType() {\n        return BACKUP_TYPE;\n    }\n}\n\n/**\n * Creates a backup client of the correct provider type (e.g. xmtp backup, no backup, etc).\n * Uses an existing user preference from the backend if it exists, else prompts for a new\n * one using the `providerSelector`\n * @param walletAddress The public address of the user's wallet\n * @param selectBackupProvider A callback for determining the provider to use, in the event there is no\n * existing user preference. The app can define the policy to use here (e.g. prompt the user,\n * or default to a certain provider type).\n * @returns {Promise<BackupClient>} A backup client of the correct type\n */\nasync function createBackupClient(walletAddress, selectBackupProvider) {\n    const configuration = await fetchOrCreateConfiguration(walletAddress, selectBackupProvider);\n    switch (configuration.type) {\n        case BackupType.none:\n            return new NoBackupClient(configuration);\n        case BackupType.xmtpTopicStore:\n            return new TopicStoreBackupClient(configuration);\n    }\n}\nasync function fetchOrCreateConfiguration(walletAddress, selectBackupProvider) {\n    // TODO: return existing configuration from the backend if it exists\n    let backupConfiguration;\n    const provider = await selectBackupProvider();\n    switch (provider.type) {\n        case BackupType.none:\n            backupConfiguration = NoBackupClient.createConfiguration();\n            break;\n        case BackupType.xmtpTopicStore:\n            backupConfiguration =\n                TopicStoreBackupClient.createConfiguration(walletAddress);\n            break;\n    }\n    // TODO: Persist new configuration to backend\n    return backupConfiguration;\n}\n\nconst version = \"1.3.6\";\nconst packageName = \"@xmtp/snap\";\n\nconst { Compression } = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.content;\n// eslint-disable @typescript-eslint/explicit-module-boundary-types\n// eslint-disable @typescript-eslint/no-explicit-any\n// Default maximum allowed content size\nconst MaxContentSize = 100 * 1024 * 1024; // 100M\n/**\n * Provide a default client configuration. These settings can be used on their own, or as a starting point for custom configurations\n * @param opts additional options to override the default settings\n */\nfunction defaultOptions(opts) {\n    const _defaultOptions = {\n        privateKeyOverride: undefined,\n        env: \"dev\",\n        apiUrl: undefined,\n        codecs: [new _xmtp_content_type_text__WEBPACK_IMPORTED_MODULE_13__.TextCodec()],\n        maxContentSize: MaxContentSize,\n        persistConversations: true,\n        skipContactPublishing: false,\n        useSnaps: false,\n        basePersistence: isBrowser()\n            ? BrowserStoragePersistence.create()\n            : InMemoryPersistence.create(),\n        disablePersistenceEncryption: false,\n        keystoreProviders: defaultKeystoreProviders(),\n        apiClientFactory: createHttpApiClientFromOptions,\n    };\n    if (opts?.codecs) {\n        opts.codecs = _defaultOptions.codecs.concat(opts.codecs);\n    }\n    if (opts?.useSnaps) {\n        opts.keystoreProviders = [\n            new SnapKeystoreProvider(`npm:${packageName}`, version),\n            ..._defaultOptions.keystoreProviders,\n        ];\n    }\n    return { ..._defaultOptions, ...opts };\n}\n/**\n * Client class initiates connection to the XMTP network.\n * Should be created with `await Client.create(options)`\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass Client {\n    constructor(publicKeyBundle, apiClient, backupClient, keystore) {\n        this.knownPublicKeyBundles = new Map();\n        // TODO: Remove keys and legacyKeys\n        this.keystore = keystore;\n        this.publicKeyBundle = publicKeyBundle;\n        this.address = publicKeyBundle.walletSignatureAddress();\n        this._conversations = new Conversations(this);\n        this._codecs = new Map();\n        this._maxContentSize = MaxContentSize;\n        this.apiClient = apiClient;\n        this._backupClient = backupClient;\n        this.contacts = new Contacts(this);\n    }\n    /**\n     * @type {Conversations}\n     */\n    get conversations() {\n        return this._conversations;\n    }\n    get backupType() {\n        return this._backupClient.backupType;\n    }\n    get signedPublicKeyBundle() {\n        return SignedPublicKeyBundle.fromLegacyBundle(this.publicKeyBundle);\n    }\n    /**\n     * Create and start a client associated with given wallet.\n     * @param wallet the wallet as a Signer instance\n     * @param opts specify how to to connect to the network\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unnecessary-type-arguments\n    static async create(wallet, opts) {\n        const signer = getSigner(wallet);\n        const options = defaultOptions(opts);\n        const apiClient = options.apiClientFactory(options);\n        const keystore = await bootstrapKeystore(options, apiClient, signer);\n        const publicKeyBundle = new PublicKeyBundle(await keystore.getPublicKeyBundle());\n        const address = publicKeyBundle.walletSignatureAddress();\n        apiClient.setAuthenticator(new KeystoreAuthenticator(keystore));\n        const backupClient = await Client.setupBackupClient(address, options.env);\n        const client = new Client(publicKeyBundle, apiClient, backupClient, keystore);\n        await client.init(options);\n        return client;\n    }\n    /**\n     * Export the XMTP PrivateKeyBundle from the SDK as a `Uint8Array`.\n     *\n     * This bundle can then be provided as `privateKeyOverride` in a\n     * subsequent call to `Client.create(...)`\n     *\n     * Be very careful with these keys, as they can be used to\n     * impersonate a user on the XMTP network and read the user's\n     * messages.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters\n    static async getKeys(wallet, opts) {\n        const client = await Client.create(getSigner(wallet), opts);\n        const keys = await client.keystore.getPrivateKeyBundle();\n        return new PrivateKeyBundleV1(keys).encode();\n    }\n    /**\n     * Tells the caller whether the browser has a Snaps-compatible version of MetaMask installed\n     */\n    static isSnapsReady() {\n        return hasMetamaskWithSnaps();\n    }\n    static async setupBackupClient(walletAddress, env) {\n        // Hard-code the provider to use for now\n        const selectBackupProvider = async () => {\n            return Promise.resolve({\n                type: env === \"local\" ? BackupType.xmtpTopicStore : BackupType.none,\n            });\n        };\n        return createBackupClient(walletAddress, selectBackupProvider);\n    }\n    async init(options) {\n        options.codecs.forEach((codec) => {\n            this.registerCodec(codec);\n        });\n        this._maxContentSize = options.maxContentSize;\n        if (!options.skipContactPublishing) {\n            await this.ensureUserContactPublished(options.publishLegacyContact);\n        }\n    }\n    // gracefully shut down the client\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async close() {\n        return undefined;\n    }\n    async ensureUserContactPublished(legacy = false) {\n        const bundle = await getUserContactFromNetwork(this.apiClient, this.address);\n        if (bundle &&\n            bundle instanceof SignedPublicKeyBundle &&\n            this.signedPublicKeyBundle.equals(bundle)) {\n            return;\n        }\n        // TEMPORARY: publish V1 contact to make sure there is one in the topic\n        // in order to preserve compatibility with pre-v7 clients.\n        // Remove when pre-v7 clients are deprecated\n        await this.publishUserContact(true);\n        if (!legacy) {\n            await this.publishUserContact(legacy);\n        }\n    }\n    // PRIVATE: publish the key bundle into the contact topic\n    // left public for testing purposes\n    async publishUserContact(legacy = false) {\n        const bundle = legacy ? this.publicKeyBundle : this.signedPublicKeyBundle;\n        await this.publishEnvelopes([\n            {\n                contentTopic: buildUserContactTopic(this.address),\n                message: encodeContactBundle(bundle),\n            },\n        ]);\n    }\n    /**\n     * Returns the cached PublicKeyBundle if one is known for the given address or fetches\n     * one from the network\n     *\n     * This throws if either the address is invalid or the contact is not published.\n     * See also [#canMessage].\n     */\n    async getUserContact(peerAddress) {\n        peerAddress = (0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(peerAddress); // EIP55 normalize the address case.\n        const existingBundle = this.knownPublicKeyBundles.get(peerAddress);\n        if (existingBundle) {\n            return existingBundle;\n        }\n        const newBundle = await getUserContactFromNetwork(this.apiClient, peerAddress);\n        if (newBundle) {\n            this.knownPublicKeyBundles.set(peerAddress, newBundle);\n        }\n        return newBundle;\n    }\n    /**\n     * Identical to getUserContact but for multiple peer addresses\n     */\n    async getUserContacts(peerAddresses) {\n        // EIP55 normalize all peer addresses\n        const normalizedAddresses = peerAddresses.map((address) => (0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(address));\n        // The logic here is tricky because we need to do a batch query for any uncached bundles,\n        // then interleave back into an ordered array. So we create a map<string, keybundle|undefined>\n        // and fill it with cached values, then take any undefined entries and form a BatchQuery from those.\n        const addressToBundle = new Map();\n        const uncachedAddresses = [];\n        for (const address of normalizedAddresses) {\n            const existingBundle = this.knownPublicKeyBundles.get(address);\n            if (existingBundle) {\n                addressToBundle.set(address, existingBundle);\n            }\n            else {\n                addressToBundle.set(address, undefined);\n                uncachedAddresses.push(address);\n            }\n        }\n        // Now do a getUserContactsFromNetwork call\n        const newBundles = await getUserContactsFromNetwork(this.apiClient, uncachedAddresses);\n        // Now merge the newBundles into the addressToBundle map\n        for (let i = 0; i < newBundles.length; i++) {\n            const address = uncachedAddresses[i];\n            const bundle = newBundles[i];\n            addressToBundle.set(address, bundle);\n            // If the bundle is not undefined, cache it\n            if (bundle) {\n                this.knownPublicKeyBundles.set(address, bundle);\n            }\n        }\n        // Finally return the bundles in the same order as the input addresses\n        return normalizedAddresses.map((address) => addressToBundle.get(address));\n    }\n    /**\n     * Used to force getUserContact fetch contact from the network.\n     */\n    forgetContact(peerAddress) {\n        peerAddress = (0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(peerAddress); // EIP55 normalize the address case.\n        this.knownPublicKeyBundles.delete(peerAddress);\n    }\n    /**\n     * Check if @peerAddress can be messaged, specifically\n     * it checks that a PublicKeyBundle can be found for the given address\n     */\n    async canMessage(peerAddress) {\n        try {\n            if (Array.isArray(peerAddress)) {\n                const contacts = await this.getUserContacts(peerAddress);\n                return contacts.map((contact) => !!contact);\n            }\n            // Else do the single address case\n            const keyBundle = await this.getUserContact(peerAddress);\n            return keyBundle !== undefined;\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        }\n        catch (e) {\n            // Instead of throwing, a bad address should just return false.\n            return false;\n        }\n    }\n    static async canMessage(peerAddress, opts) {\n        const apiUrl = opts?.apiUrl || ApiUrls[opts?.env || \"dev\"];\n        const apiClient = new HttpApiClient(apiUrl, {\n            appVersion: opts?.appVersion,\n        });\n        if (Array.isArray(peerAddress)) {\n            const rawPeerAddresses = peerAddress;\n            // Try to normalize each of the peer addresses\n            const normalizedPeerAddresses = rawPeerAddresses.map((address) => (0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(address));\n            // The getUserContactsFromNetwork will return false instead of throwing\n            // on invalid envelopes\n            const contacts = await getUserContactsFromNetwork(apiClient, normalizedPeerAddresses);\n            return contacts.map((contact) => !!contact);\n        }\n        try {\n            peerAddress = (0,viem__WEBPACK_IMPORTED_MODULE_9__.getAddress)(peerAddress); // EIP55 normalize the address case.\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        }\n        catch (e) {\n            return false;\n        }\n        const keyBundle = await getUserContactFromNetwork(apiClient, peerAddress);\n        return keyBundle !== undefined;\n    }\n    validateEnvelope(env) {\n        const bytes = env.message;\n        if (!env.contentTopic) {\n            throw new Error(\"Missing content topic\");\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!bytes || !bytes.length) {\n            throw new Error(\"Cannot publish empty message\");\n        }\n    }\n    /**\n     * Low level method for publishing envelopes to the XMTP network with\n     * no pre-processing or encryption applied.\n     *\n     * Primarily used internally\n     * @param envelopes PublishParams[]\n     */\n    async publishEnvelopes(envelopes) {\n        for (const env of envelopes) {\n            this.validateEnvelope(env);\n        }\n        await this.apiClient.publish(envelopes);\n    }\n    /**\n     * Register a codec to be automatically used for encoding/decoding\n     * messages of the given Content Type\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unnecessary-type-arguments\n    registerCodec(codec) {\n        const id = codec.contentType;\n        const key = `${id.authorityId}/${id.typeId}`;\n        this._codecs.set(key, codec);\n        return this;\n    }\n    /**\n     * Find a matching codec for a given `ContentTypeId` from the\n     * client's codec registry\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unnecessary-type-arguments\n    codecFor(contentType) {\n        const key = `${contentType.authorityId}/${contentType.typeId}`;\n        const codec = this._codecs.get(key);\n        if (!codec) {\n            return undefined;\n        }\n        if (contentType.versionMajor > codec.contentType.versionMajor) {\n            return undefined;\n        }\n        return codec;\n    }\n    /**\n     * Convert arbitrary content into a serialized `EncodedContent` instance\n     * with the given options\n     */\n    async encodeContent(content$1, options) {\n        const contentType = options?.contentType || _xmtp_content_type_text__WEBPACK_IMPORTED_MODULE_13__.ContentTypeText;\n        const codec = this.codecFor(contentType);\n        if (!codec) {\n            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n            throw new Error(\"unknown content type \" + contentType);\n        }\n        const encoded = codec.encode(content$1, this);\n        const fallback = codec.fallback(content$1);\n        if (fallback) {\n            encoded.fallback = fallback;\n        }\n        if (typeof options?.compression === \"number\" &&\n            // do not compress content less than 10 bytes\n            encoded.content.length >= 10) {\n            encoded.compression = options.compression;\n        }\n        await compress(encoded);\n        return {\n            payload: _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.content.EncodedContent.encode(encoded).finish(),\n            shouldPush: codec.shouldPush(content$1),\n        };\n    }\n    async decodeContent(contentBytes) {\n        const encodedContent = _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.content.EncodedContent.decode(contentBytes);\n        if (!encodedContent.type) {\n            throw new Error(\"missing content type\");\n        }\n        let content$1; // eslint-disable-line @typescript-eslint/no-explicit-any\n        const contentType = new _xmtp_content_type_primitives__WEBPACK_IMPORTED_MODULE_16__.ContentTypeId(encodedContent.type);\n        let error;\n        await decompress(encodedContent, 1000);\n        const codec = this.codecFor(contentType);\n        if (codec) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            content$1 = codec.decode(encodedContent, this);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n            error = new Error(\"unknown content type \" + contentType);\n        }\n        return {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            content: content$1,\n            contentType,\n            error,\n            contentFallback: encodedContent.fallback,\n        };\n    }\n    listInvitations(opts) {\n        return this.listEnvelopes(buildUserInviteTopic(this.address), \n        // eslint-disable-next-line @typescript-eslint/require-await\n        async (env) => env, opts);\n    }\n    /**\n     * List stored messages from the specified topic.\n     *\n     * A specified mapper function will be applied to each envelope.\n     * If the mapper function throws an error during processing, the\n     * envelope will be discarded.\n     */\n    async listEnvelopes(topic, mapper, opts) {\n        if (!opts) {\n            opts = {};\n        }\n        const { startTime, endTime, limit, pageSize } = opts;\n        const envelopes = await this.apiClient.query({ contentTopic: topic, startTime, endTime }, {\n            direction: opts.direction || _xmtp_proto__WEBPACK_IMPORTED_MODULE_0__.messageApi.SortDirection.SORT_DIRECTION_ASCENDING,\n            limit,\n            pageSize,\n        });\n        const results = [];\n        for (const env of envelopes) {\n            if (!env.message)\n                continue;\n            try {\n                const res = await mapper(env);\n                results.push(res);\n            }\n            catch (e) {\n                console.warn(\"Error in listEnvelopes mapper\", e);\n            }\n        }\n        return results;\n    }\n    /**\n     * List messages on a given set of content topics, yielding one page at a time\n     */\n    listEnvelopesPaginated(contentTopic, mapper, opts) {\n        return mapPaginatedStream(this.apiClient.queryIteratePages({\n            contentTopic,\n            startTime: opts?.startTime,\n            endTime: opts?.endTime,\n        }, { direction: opts?.direction, pageSize: opts?.pageSize || 100 }), mapper);\n    }\n}\nfunction createHttpApiClientFromOptions(options) {\n    const apiUrl = options.apiUrl || ApiUrls[options.env];\n    return new HttpApiClient(apiUrl, { appVersion: options.appVersion });\n}\n/**\n * Retrieve a key bundle from given user's contact topic\n */\nasync function getUserContactFromNetwork(apiClient, peerAddress) {\n    const stream = apiClient.queryIterator({ contentTopic: buildUserContactTopic(peerAddress) }, { pageSize: 5, direction: SortDirection.SORT_DIRECTION_DESCENDING });\n    for await (const env of stream) {\n        if (!env.message)\n            continue;\n        const keyBundle = decodeContactBundle(env.message);\n        let address;\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            address = await keyBundle?.walletSignatureAddress();\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        }\n        catch (e) {\n            address = undefined;\n        }\n        if (address?.toLowerCase() === peerAddress.toLowerCase()) {\n            return keyBundle;\n        }\n    }\n    return undefined;\n}\n/**\n * Retrieve a list of key bundles given a list of user addresses\n */\nasync function getUserContactsFromNetwork(apiClient, peerAddresses) {\n    const userContactTopics = peerAddresses.map(buildUserContactTopic);\n    const topicToEnvelopes = await apiClient.batchQuery(userContactTopics.map((topic) => ({\n        contentTopic: topic,\n        pageSize: 5,\n        direction: SortDirection.SORT_DIRECTION_DESCENDING,\n    })));\n    // Transform topicToEnvelopes into a list of PublicKeyBundles or undefined\n    // by going through each message and attempting to decode\n    return Promise.all(peerAddresses.map(async (address, index) => {\n        const envelopes = topicToEnvelopes[index];\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!envelopes) {\n            return undefined;\n        }\n        for (const env of envelopes) {\n            if (!env.message)\n                continue;\n            try {\n                const keyBundle = decodeContactBundle(env.message);\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                const signingAddress = await keyBundle?.walletSignatureAddress();\n                if (address.toLowerCase() === signingAddress.toLowerCase()) {\n                    return keyBundle;\n                }\n                else {\n                    console.info(\"Received contact bundle with incorrect address\");\n                }\n            }\n            catch (e) {\n                console.info(\"Invalid contact bundle\", e);\n            }\n        }\n        return undefined;\n    }));\n}\n/**\n * Get the default list of `KeystoreProviders` used in the SDK\n *\n * Particularly useful if a developer wants to add their own\n * provider to the head of the list while falling back to the\n * default functionality\n */\nfunction defaultKeystoreProviders() {\n    return [\n        // First check to see if a `privateKeyOverride` is provided and use that\n        new StaticKeystoreProvider(),\n        // Next check to see if a EncryptedPrivateKeyBundle exists on the network for the wallet\n        new NetworkKeystoreProvider(),\n        // If the first two failed with `KeystoreProviderUnavailableError`, then generate a new key and write it to the network\n        new KeyGeneratorKeystoreProvider(),\n    ];\n}\n/**\n * Take an array of KeystoreProviders from the options and try them until one succeeds\n */\nasync function bootstrapKeystore(opts, apiClient, wallet) {\n    for (const provider of opts.keystoreProviders) {\n        try {\n            return await provider.newKeystore(opts, apiClient, wallet ?? undefined);\n        }\n        catch (err) {\n            if (err instanceof KeystoreProviderUnavailableError) {\n                continue;\n            }\n            throw err;\n        }\n    }\n    throw new Error(\"No keystore providers available\");\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/_shortw_utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: () => (/* binding */ createCurve),\n/* harmony export */   getHash: () => (/* binding */ getHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vX3Nob3J0d191dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQzBDO0FBQ3FCO0FBQ1A7QUFDeEQ7QUFDTztBQUNQO0FBQ0E7QUFDQSxnQ0FBZ0Msd0RBQUksWUFBWSxnRUFBVztBQUMzRCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNPO0FBQ1AsNkJBQTZCLHFFQUFXLEdBQUcsK0JBQStCO0FBQzFFLDJCQUEyQiw0QkFBNEI7QUFDdkQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL19zaG9ydHdfdXRpbHMuanM/N2U2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgeyBobWFjIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9obWFjJztcbmltcG9ydCB7IGNvbmNhdEJ5dGVzLCByYW5kb21CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHsgd2VpZXJzdHJhc3MgfSBmcm9tICcuL2Fic3RyYWN0L3dlaWVyc3RyYXNzLmpzJztcbi8vIGNvbm5lY3RzIG5vYmxlLWN1cnZlcyB0byBub2JsZS1oYXNoZXNcbmV4cG9ydCBmdW5jdGlvbiBnZXRIYXNoKGhhc2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBoYXNoLFxuICAgICAgICBobWFjOiAoa2V5LCAuLi5tc2dzKSA9PiBobWFjKGhhc2gsIGtleSwgY29uY2F0Qnl0ZXMoLi4ubXNncykpLFxuICAgICAgICByYW5kb21CeXRlcyxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUN1cnZlKGN1cnZlRGVmLCBkZWZIYXNoKSB7XG4gICAgY29uc3QgY3JlYXRlID0gKGhhc2gpID0+IHdlaWVyc3RyYXNzKHsgLi4uY3VydmVEZWYsIC4uLmdldEhhc2goaGFzaCkgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoeyAuLi5jcmVhdGUoZGVmSGFzaCksIGNyZWF0ZSB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9zaG9ydHdfdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/_shortw_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/curve.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/curve.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\nfunction validateDST(dst) {\n    if (dst instanceof Uint8Array)\n        return dst;\n    if (typeof dst === 'string')\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(dst);\n    throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction isBytes(item) {\n    if (!(item instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    isBytes(msg);\n    isNum(count);\n    const DST = validateDST(_DST);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/modular.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/modular.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/modular.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/utils.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nfunction equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nconst bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: () => (/* binding */ DER),\n/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),\n/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),\n/* harmony export */   weierstrass: () => (/* binding */ weierstrass),\n/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\n\n\n\n\nfunction validatePointOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_1__;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = _modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength(CURVE.n);\n            return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    _modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/weierstrass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/secp256k1.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/secp256k1.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   schnorr: () => (/* binding */ schnorr),\n/* harmony export */   secp256k1: () => (/* binding */ secp256k1)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/_shortw_utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b3, _3n, P) * b3) % P;\n    const b9 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b6, _3n, P) * b3) % P;\n    const b11 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b9, _2n, P) * b2) % P;\n    const b22 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b11, _11n, P) * b11) % P;\n    const b44 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b22, _22n, P) * b22) % P;\n    const b88 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b44, _44n, P) * b44) % P;\n    const b176 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b88, _88n, P) * b88) % P;\n    const b220 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b176, _44n, P) * b44) % P;\n    const b223 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b220, _3n, P) * b3) % P;\n    const t1 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b223, _23n, P) * b22) % P;\n    const t2 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t1, _6n, P) * b2) % P;\n    const root = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nconst secp256k1 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE)(n, 32);\nconst modP = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1P);\nconst modN = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(32)) {\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('signature', signature, 64);\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\n    const pub = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('publicKey', publicKey, 32);\n    try {\n        const P = lift_x((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nconst schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE,\n        bytesToNumberBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE,\n        taggedHash,\n        mod: _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.isogenyMap)(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__.mapToCurveSimpleSWU)(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.createHasher)(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256,\n}))();\nconst hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vc2VjcDI1NmsxLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDOEM7QUFDSTtBQUNPO0FBQ087QUFDaUM7QUFDMUI7QUFDdEI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLGtDQUFrQztBQUNsQyxnQkFBZ0IsMERBQUk7QUFDcEIsZ0JBQWdCLDBEQUFJO0FBQ3BCLGlCQUFpQiwwREFBSTtBQUNyQixpQkFBaUIsMERBQUk7QUFDckIsaUJBQWlCLDBEQUFJO0FBQ3JCLGlCQUFpQiwwREFBSTtBQUNyQixrQkFBa0IsMERBQUk7QUFDdEIsa0JBQWtCLDBEQUFJO0FBQ3RCLGtCQUFrQiwwREFBSTtBQUN0QixnQkFBZ0IsMERBQUk7QUFDcEIsZ0JBQWdCLDBEQUFJO0FBQ3BCLGlCQUFpQiwwREFBSTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMkRBQUsscUNBQXFDLGVBQWU7QUFDN0Qsa0JBQWtCLDZEQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkU7QUFDN0U7QUFDQTtBQUNBLHFCQUFxQix5REFBRztBQUN4QixxQkFBcUIseURBQUc7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLFNBQVM7QUFDVCxLQUFLO0FBQ0wsQ0FBQyxFQUFFLHdEQUFNO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNERBQU07QUFDM0IsZUFBZSwrREFBVztBQUMxQjtBQUNBO0FBQ0EsV0FBVyw0REFBTSxDQUFDLCtEQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtRUFBZTtBQUN2QyxvQkFBb0IseURBQUc7QUFDdkIsb0JBQW9CLHlEQUFHO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNELHNDQUFzQyxhQUFhO0FBQ25EO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0Esd0NBQXdDO0FBQ3hDLHdCQUF3QjtBQUN4QjtBQUNBLHNCQUFzQjtBQUN0QixvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUVBQWU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGdFQUFXO0FBQy9ELGNBQWMsK0RBQVc7QUFDekIsWUFBWSx1QkFBdUIsbUNBQW1DO0FBQ3RFLGNBQWMsK0RBQVcsMEJBQTBCO0FBQ25ELDJCQUEyQixtRUFBZSxpQ0FBaUM7QUFDM0Usd0RBQXdEO0FBQ3hELG9CQUFvQixtRUFBZSxTQUFTO0FBQzVDO0FBQ0EsbURBQW1EO0FBQ25ELFlBQVksdUJBQXVCLDJCQUEyQjtBQUM5RCxvQ0FBb0M7QUFDcEMsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrREFBVztBQUMzQixjQUFjLCtEQUFXO0FBQ3pCLGdCQUFnQiwrREFBVztBQUMzQjtBQUNBLHlCQUF5QixtRUFBZSxRQUFRLHdCQUF3QjtBQUN4RSxrQkFBa0IsbUVBQWUsdUJBQXVCLDJCQUEyQjtBQUNuRjtBQUNBO0FBQ0Esa0JBQWtCLG1FQUFlLHdCQUF3Qiw0QkFBNEI7QUFDckY7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RCwyQ0FBMkM7QUFDM0M7QUFDQSwwQkFBMEI7QUFDMUIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QjtBQUNBLFdBQVc7QUFDWCxLQUFLO0FBQ0wsQ0FBQztBQUNELHNDQUFzQyxzRUFBVTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyw2RUFBbUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1DQUFtQyx3RUFBWTtBQUMvQyxZQUFZLE9BQU87QUFDbkI7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx3REFBTTtBQUNoQixDQUFDO0FBQ007QUFDQTtBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vc2VjcDI1NmsxLmpzPzRiNjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuaW1wb3J0IHsgc2hhMjU2IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zaGEyNTYnO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3V0aWxzJztcbmltcG9ydCB7IEZpZWxkLCBtb2QsIHBvdzIgfSBmcm9tICcuL2Fic3RyYWN0L21vZHVsYXIuanMnO1xuaW1wb3J0IHsgbWFwVG9DdXJ2ZVNpbXBsZVNXVSB9IGZyb20gJy4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMnO1xuaW1wb3J0IHsgYnl0ZXNUb051bWJlckJFLCBjb25jYXRCeXRlcywgZW5zdXJlQnl0ZXMsIG51bWJlclRvQnl0ZXNCRSB9IGZyb20gJy4vYWJzdHJhY3QvdXRpbHMuanMnO1xuaW1wb3J0IHsgY3JlYXRlSGFzaGVyLCBpc29nZW55TWFwIH0gZnJvbSAnLi9hYnN0cmFjdC9oYXNoLXRvLWN1cnZlLmpzJztcbmltcG9ydCB7IGNyZWF0ZUN1cnZlIH0gZnJvbSAnLi9fc2hvcnR3X3V0aWxzLmpzJztcbmNvbnN0IHNlY3AyNTZrMVAgPSBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmVmZmZmZmMyZicpO1xuY29uc3Qgc2VjcDI1NmsxTiA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWJhYWVkY2U2YWY0OGEwM2JiZmQyNWU4Y2QwMzY0MTQxJyk7XG5jb25zdCBfMW4gPSBCaWdJbnQoMSk7XG5jb25zdCBfMm4gPSBCaWdJbnQoMik7XG5jb25zdCBkaXZOZWFyZXN0ID0gKGEsIGIpID0+IChhICsgYiAvIF8ybikgLyBiO1xuLyoqXG4gKiDiiJpuID0gbl4oKHArMSkvNCkgZm9yIGZpZWxkcyBwID0gMyBtb2QgNC4gV2UgdW53cmFwIHRoZSBsb29wIGFuZCBtdWx0aXBseSBiaXQtYnktYml0LlxuICogKFArMW4vNG4pLnRvU3RyaW5nKDIpIHdvdWxkIHByb2R1Y2UgYml0cyBbMjIzeCAxLCAwLCAyMnggMSwgNHggMCwgMTEsIDAwXVxuICovXG5mdW5jdGlvbiBzcXJ0TW9kKHkpIHtcbiAgICBjb25zdCBQID0gc2VjcDI1NmsxUDtcbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICBjb25zdCBfM24gPSBCaWdJbnQoMyksIF82biA9IEJpZ0ludCg2KSwgXzExbiA9IEJpZ0ludCgxMSksIF8yMm4gPSBCaWdJbnQoMjIpO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIGNvbnN0IF8yM24gPSBCaWdJbnQoMjMpLCBfNDRuID0gQmlnSW50KDQ0KSwgXzg4biA9IEJpZ0ludCg4OCk7XG4gICAgY29uc3QgYjIgPSAoeSAqIHkgKiB5KSAlIFA7IC8vIHheMywgMTFcbiAgICBjb25zdCBiMyA9IChiMiAqIGIyICogeSkgJSBQOyAvLyB4XjdcbiAgICBjb25zdCBiNiA9IChwb3cyKGIzLCBfM24sIFApICogYjMpICUgUDtcbiAgICBjb25zdCBiOSA9IChwb3cyKGI2LCBfM24sIFApICogYjMpICUgUDtcbiAgICBjb25zdCBiMTEgPSAocG93MihiOSwgXzJuLCBQKSAqIGIyKSAlIFA7XG4gICAgY29uc3QgYjIyID0gKHBvdzIoYjExLCBfMTFuLCBQKSAqIGIxMSkgJSBQO1xuICAgIGNvbnN0IGI0NCA9IChwb3cyKGIyMiwgXzIybiwgUCkgKiBiMjIpICUgUDtcbiAgICBjb25zdCBiODggPSAocG93MihiNDQsIF80NG4sIFApICogYjQ0KSAlIFA7XG4gICAgY29uc3QgYjE3NiA9IChwb3cyKGI4OCwgXzg4biwgUCkgKiBiODgpICUgUDtcbiAgICBjb25zdCBiMjIwID0gKHBvdzIoYjE3NiwgXzQ0biwgUCkgKiBiNDQpICUgUDtcbiAgICBjb25zdCBiMjIzID0gKHBvdzIoYjIyMCwgXzNuLCBQKSAqIGIzKSAlIFA7XG4gICAgY29uc3QgdDEgPSAocG93MihiMjIzLCBfMjNuLCBQKSAqIGIyMikgJSBQO1xuICAgIGNvbnN0IHQyID0gKHBvdzIodDEsIF82biwgUCkgKiBiMikgJSBQO1xuICAgIGNvbnN0IHJvb3QgPSBwb3cyKHQyLCBfMm4sIFApO1xuICAgIGlmICghRnAuZXFsKEZwLnNxcihyb290KSwgeSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICByZXR1cm4gcm9vdDtcbn1cbmNvbnN0IEZwID0gRmllbGQoc2VjcDI1NmsxUCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHsgc3FydDogc3FydE1vZCB9KTtcbmV4cG9ydCBjb25zdCBzZWNwMjU2azEgPSBjcmVhdGVDdXJ2ZSh7XG4gICAgYTogQmlnSW50KDApLFxuICAgIGI6IEJpZ0ludCg3KSxcbiAgICBGcCxcbiAgICBuOiBzZWNwMjU2azFOLFxuICAgIC8vIEJhc2UgcG9pbnQgKHgsIHkpIGFrYSBnZW5lcmF0b3IgcG9pbnRcbiAgICBHeDogQmlnSW50KCc1NTA2NjI2MzAyMjI3NzM0MzY2OTU3ODcxODg5NTE2ODUzNDMyNjI1MDYwMzQ1Mzc3NzU5NDE3NTUwMDE4NzM2MDM4OTExNjcyOTI0MCcpLFxuICAgIEd5OiBCaWdJbnQoJzMyNjcwNTEwMDIwNzU4ODE2OTc4MDgzMDg1MTMwNTA3MDQzMTg0NDcxMjczMzgwNjU5MjQzMjc1OTM4OTA0MzM1NzU3MzM3NDgyNDI0JyksXG4gICAgaDogQmlnSW50KDEpLFxuICAgIGxvd1M6IHRydWUsXG4gICAgLyoqXG4gICAgICogc2VjcDI1NmsxIGJlbG9uZ3MgdG8gS29ibGl0eiBjdXJ2ZXM6IGl0IGhhcyBlZmZpY2llbnRseSBjb21wdXRhYmxlIGVuZG9tb3JwaGlzbS5cbiAgICAgKiBFbmRvbW9ycGhpc20gdXNlcyAyeCBsZXNzIFJBTSwgc3BlZWRzIHVwIHByZWNvbXB1dGF0aW9uIGJ5IDJ4IGFuZCBFQ0RIIC8ga2V5IHJlY292ZXJ5IGJ5IDIwJS5cbiAgICAgKiBGb3IgcHJlY29tcHV0ZWQgd05BRiBpdCB0cmFkZXMgb2ZmIDEvMiBpbml0IHRpbWUgJiAxLzMgcmFtIGZvciAyMCUgcGVyZiBoaXQuXG4gICAgICogRXhwbGFuYXRpb246IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxtaWxsci9lYjY3MDgwNjc5M2U4NGRmNjI4YTdjNDM0YTg3MzA2NlxuICAgICAqL1xuICAgIGVuZG86IHtcbiAgICAgICAgYmV0YTogQmlnSW50KCcweDdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnKSxcbiAgICAgICAgc3BsaXRTY2FsYXI6IChrKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0gc2VjcDI1NmsxTjtcbiAgICAgICAgICAgIGNvbnN0IGExID0gQmlnSW50KCcweDMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1Jyk7XG4gICAgICAgICAgICBjb25zdCBiMSA9IC1fMW4gKiBCaWdJbnQoJzB4ZTQ0MzdlZDYwMTBlODgyODZmNTQ3ZmE5MGFiZmU0YzMnKTtcbiAgICAgICAgICAgIGNvbnN0IGEyID0gQmlnSW50KCcweDExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcpO1xuICAgICAgICAgICAgY29uc3QgYjIgPSBhMTtcbiAgICAgICAgICAgIGNvbnN0IFBPV18yXzEyOCA9IEJpZ0ludCgnMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnKTsgLy8gKDJuKioxMjhuKS50b1N0cmluZygxNilcbiAgICAgICAgICAgIGNvbnN0IGMxID0gZGl2TmVhcmVzdChiMiAqIGssIG4pO1xuICAgICAgICAgICAgY29uc3QgYzIgPSBkaXZOZWFyZXN0KC1iMSAqIGssIG4pO1xuICAgICAgICAgICAgbGV0IGsxID0gbW9kKGsgLSBjMSAqIGExIC0gYzIgKiBhMiwgbik7XG4gICAgICAgICAgICBsZXQgazIgPSBtb2QoLWMxICogYjEgLSBjMiAqIGIyLCBuKTtcbiAgICAgICAgICAgIGNvbnN0IGsxbmVnID0gazEgPiBQT1dfMl8xMjg7XG4gICAgICAgICAgICBjb25zdCBrMm5lZyA9IGsyID4gUE9XXzJfMTI4O1xuICAgICAgICAgICAgaWYgKGsxbmVnKVxuICAgICAgICAgICAgICAgIGsxID0gbiAtIGsxO1xuICAgICAgICAgICAgaWYgKGsybmVnKVxuICAgICAgICAgICAgICAgIGsyID0gbiAtIGsyO1xuICAgICAgICAgICAgaWYgKGsxID4gUE9XXzJfMTI4IHx8IGsyID4gUE9XXzJfMTI4KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzcGxpdFNjYWxhcjogRW5kb21vcnBoaXNtIGZhaWxlZCwgaz0nICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBrMW5lZywgazEsIGsybmVnLCBrMiB9O1xuICAgICAgICB9LFxuICAgIH0sXG59LCBzaGEyNTYpO1xuLy8gU2Nobm9yciBzaWduYXR1cmVzIGFyZSBzdXBlcmlvciB0byBFQ0RTQSBmcm9tIGFib3ZlLiBCZWxvdyBpcyBTY2hub3JyLXNwZWNpZmljIEJJUDAzNDAgY29kZS5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAzNDAubWVkaWF3aWtpXG5jb25zdCBfMG4gPSBCaWdJbnQoMCk7XG5jb25zdCBmZSA9ICh4KSA9PiB0eXBlb2YgeCA9PT0gJ2JpZ2ludCcgJiYgXzBuIDwgeCAmJiB4IDwgc2VjcDI1NmsxUDtcbmNvbnN0IGdlID0gKHgpID0+IHR5cGVvZiB4ID09PSAnYmlnaW50JyAmJiBfMG4gPCB4ICYmIHggPCBzZWNwMjU2azFOO1xuLyoqIEFuIG9iamVjdCBtYXBwaW5nIHRhZ3MgdG8gdGhlaXIgdGFnZ2VkIGhhc2ggcHJlZml4IG9mIFtTSEEyNTYodGFnKSB8IFNIQTI1Nih0YWcpXSAqL1xuY29uc3QgVEFHR0VEX0hBU0hfUFJFRklYRVMgPSB7fTtcbmZ1bmN0aW9uIHRhZ2dlZEhhc2godGFnLCAuLi5tZXNzYWdlcykge1xuICAgIGxldCB0YWdQID0gVEFHR0VEX0hBU0hfUFJFRklYRVNbdGFnXTtcbiAgICBpZiAodGFnUCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHRhZ0ggPSBzaGEyNTYoVWludDhBcnJheS5mcm9tKHRhZywgKGMpID0+IGMuY2hhckNvZGVBdCgwKSkpO1xuICAgICAgICB0YWdQID0gY29uY2F0Qnl0ZXModGFnSCwgdGFnSCk7XG4gICAgICAgIFRBR0dFRF9IQVNIX1BSRUZJWEVTW3RhZ10gPSB0YWdQO1xuICAgIH1cbiAgICByZXR1cm4gc2hhMjU2KGNvbmNhdEJ5dGVzKHRhZ1AsIC4uLm1lc3NhZ2VzKSk7XG59XG4vLyBFQ0RTQSBjb21wYWN0IHBvaW50cyBhcmUgMzMtYnl0ZS4gU2Nobm9yciBpcyAzMjogd2Ugc3RyaXAgZmlyc3QgYnl0ZSAweDAyIG9yIDB4MDNcbmNvbnN0IHBvaW50VG9CeXRlcyA9IChwb2ludCkgPT4gcG9pbnQudG9SYXdCeXRlcyh0cnVlKS5zbGljZSgxKTtcbmNvbnN0IG51bVRvMzJiID0gKG4pID0+IG51bWJlclRvQnl0ZXNCRShuLCAzMik7XG5jb25zdCBtb2RQID0gKHgpID0+IG1vZCh4LCBzZWNwMjU2azFQKTtcbmNvbnN0IG1vZE4gPSAoeCkgPT4gbW9kKHgsIHNlY3AyNTZrMU4pO1xuY29uc3QgUG9pbnQgPSBzZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50O1xuY29uc3QgR211bEFkZCA9IChRLCBhLCBiKSA9PiBQb2ludC5CQVNFLm11bHRpcGx5QW5kQWRkVW5zYWZlKFEsIGEsIGIpO1xuLy8gQ2FsY3VsYXRlIHBvaW50LCBzY2FsYXIgYW5kIGJ5dGVzXG5mdW5jdGlvbiBzY2hub3JyR2V0RXh0UHViS2V5KHByaXYpIHtcbiAgICBsZXQgZF8gPSBzZWNwMjU2azEudXRpbHMubm9ybVByaXZhdGVLZXlUb1NjYWxhcihwcml2KTsgLy8gc2FtZSBtZXRob2QgZXhlY3V0ZWQgaW4gZnJvbVByaXZhdGVLZXlcbiAgICBsZXQgcCA9IFBvaW50LmZyb21Qcml2YXRlS2V5KGRfKTsgLy8gUCA9IGQn4ouFRzsgMCA8IGQnIDwgbiBjaGVjayBpcyBkb25lIGluc2lkZVxuICAgIGNvbnN0IHNjYWxhciA9IHAuaGFzRXZlblkoKSA/IGRfIDogbW9kTigtZF8pO1xuICAgIHJldHVybiB7IHNjYWxhcjogc2NhbGFyLCBieXRlczogcG9pbnRUb0J5dGVzKHApIH07XG59XG4vKipcbiAqIGxpZnRfeCBmcm9tIEJJUDM0MC4gQ29udmVydCAzMi1ieXRlIHggY29vcmRpbmF0ZSB0byBlbGxpcHRpYyBjdXJ2ZSBwb2ludC5cbiAqIEByZXR1cm5zIHZhbGlkIHBvaW50IGNoZWNrZWQgZm9yIGJlaW5nIG9uLWN1cnZlXG4gKi9cbmZ1bmN0aW9uIGxpZnRfeCh4KSB7XG4gICAgaWYgKCFmZSh4KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgeDogbmVlZCAwIDwgeCA8IHAnKTsgLy8gRmFpbCBpZiB4IOKJpSBwLlxuICAgIGNvbnN0IHh4ID0gbW9kUCh4ICogeCk7XG4gICAgY29uc3QgYyA9IG1vZFAoeHggKiB4ICsgQmlnSW50KDcpKTsgLy8gTGV0IGMgPSB4wrMgKyA3IG1vZCBwLlxuICAgIGxldCB5ID0gc3FydE1vZChjKTsgLy8gTGV0IHkgPSBjXihwKzEpLzQgbW9kIHAuXG4gICAgaWYgKHkgJSBfMm4gIT09IF8wbilcbiAgICAgICAgeSA9IG1vZFAoLXkpOyAvLyBSZXR1cm4gdGhlIHVuaXF1ZSBwb2ludCBQIHN1Y2ggdGhhdCB4KFApID0geCBhbmRcbiAgICBjb25zdCBwID0gbmV3IFBvaW50KHgsIHksIF8xbik7IC8vIHkoUCkgPSB5IGlmIHkgbW9kIDIgPSAwIG9yIHkoUCkgPSBwLXkgb3RoZXJ3aXNlLlxuICAgIHAuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICByZXR1cm4gcDtcbn1cbi8qKlxuICogQ3JlYXRlIHRhZ2dlZCBoYXNoLCBjb252ZXJ0IGl0IHRvIGJpZ2ludCwgcmVkdWNlIG1vZHVsby1uLlxuICovXG5mdW5jdGlvbiBjaGFsbGVuZ2UoLi4uYXJncykge1xuICAgIHJldHVybiBtb2ROKGJ5dGVzVG9OdW1iZXJCRSh0YWdnZWRIYXNoKCdCSVAwMzQwL2NoYWxsZW5nZScsIC4uLmFyZ3MpKSk7XG59XG4vKipcbiAqIFNjaG5vcnIgcHVibGljIGtleSBpcyBqdXN0IGB4YCBjb29yZGluYXRlIG9mIFBvaW50IGFzIHBlciBCSVAzNDAuXG4gKi9cbmZ1bmN0aW9uIHNjaG5vcnJHZXRQdWJsaWNLZXkocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiBzY2hub3JyR2V0RXh0UHViS2V5KHByaXZhdGVLZXkpLmJ5dGVzOyAvLyBkJz1pbnQoc2spLiBGYWlsIGlmIGQnPTAgb3IgZCfiiaVuLiBSZXQgYnl0ZXMoZCfii4VHKVxufVxuLyoqXG4gKiBDcmVhdGVzIFNjaG5vcnIgc2lnbmF0dXJlIGFzIHBlciBCSVAzNDAuIFZlcmlmaWVzIGl0c2VsZiBiZWZvcmUgcmV0dXJuaW5nIGFueXRoaW5nLlxuICogYXV4UmFuZCBpcyBvcHRpb25hbCBhbmQgaXMgbm90IHRoZSBzb2xlIHNvdXJjZSBvZiBrIGdlbmVyYXRpb246IGJhZCBDU1BSTkcgd29uJ3QgYmUgZGFuZ2Vyb3VzLlxuICovXG5mdW5jdGlvbiBzY2hub3JyU2lnbihtZXNzYWdlLCBwcml2YXRlS2V5LCBhdXhSYW5kID0gcmFuZG9tQnl0ZXMoMzIpKSB7XG4gICAgY29uc3QgbSA9IGVuc3VyZUJ5dGVzKCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgY29uc3QgeyBieXRlczogcHgsIHNjYWxhcjogZCB9ID0gc2Nobm9yckdldEV4dFB1YktleShwcml2YXRlS2V5KTsgLy8gY2hlY2tzIGZvciBpc1dpdGhpbkN1cnZlT3JkZXJcbiAgICBjb25zdCBhID0gZW5zdXJlQnl0ZXMoJ2F1eFJhbmQnLCBhdXhSYW5kLCAzMik7IC8vIEF1eGlsaWFyeSByYW5kb20gZGF0YSBhOiBhIDMyLWJ5dGUgYXJyYXlcbiAgICBjb25zdCB0ID0gbnVtVG8zMmIoZCBeIGJ5dGVzVG9OdW1iZXJCRSh0YWdnZWRIYXNoKCdCSVAwMzQwL2F1eCcsIGEpKSk7IC8vIExldCB0IGJlIHRoZSBieXRlLXdpc2UgeG9yIG9mIGJ5dGVzKGQpIGFuZCBoYXNoL2F1eChhKVxuICAgIGNvbnN0IHJhbmQgPSB0YWdnZWRIYXNoKCdCSVAwMzQwL25vbmNlJywgdCwgcHgsIG0pOyAvLyBMZXQgcmFuZCA9IGhhc2gvbm9uY2UodCB8fCBieXRlcyhQKSB8fCBtKVxuICAgIGNvbnN0IGtfID0gbW9kTihieXRlc1RvTnVtYmVyQkUocmFuZCkpOyAvLyBMZXQgaycgPSBpbnQocmFuZCkgbW9kIG5cbiAgICBpZiAoa18gPT09IF8wbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaWduIGZhaWxlZDogayBpcyB6ZXJvJyk7IC8vIEZhaWwgaWYgaycgPSAwLlxuICAgIGNvbnN0IHsgYnl0ZXM6IHJ4LCBzY2FsYXI6IGsgfSA9IHNjaG5vcnJHZXRFeHRQdWJLZXkoa18pOyAvLyBMZXQgUiA9IGsn4ouFRy5cbiAgICBjb25zdCBlID0gY2hhbGxlbmdlKHJ4LCBweCwgbSk7IC8vIExldCBlID0gaW50KGhhc2gvY2hhbGxlbmdlKGJ5dGVzKFIpIHx8IGJ5dGVzKFApIHx8IG0pKSBtb2Qgbi5cbiAgICBjb25zdCBzaWcgPSBuZXcgVWludDhBcnJheSg2NCk7IC8vIExldCBzaWcgPSBieXRlcyhSKSB8fCBieXRlcygoayArIGVkKSBtb2QgbikuXG4gICAgc2lnLnNldChyeCwgMCk7XG4gICAgc2lnLnNldChudW1UbzMyYihtb2ROKGsgKyBlICogZCkpLCAzMik7XG4gICAgLy8gSWYgVmVyaWZ5KGJ5dGVzKFApLCBtLCBzaWcpIChzZWUgYmVsb3cpIHJldHVybnMgZmFpbHVyZSwgYWJvcnRcbiAgICBpZiAoIXNjaG5vcnJWZXJpZnkoc2lnLCBtLCBweCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbjogSW52YWxpZCBzaWduYXR1cmUgcHJvZHVjZWQnKTtcbiAgICByZXR1cm4gc2lnO1xufVxuLyoqXG4gKiBWZXJpZmllcyBTY2hub3JyIHNpZ25hdHVyZS5cbiAqIFdpbGwgc3dhbGxvdyBlcnJvcnMgJiByZXR1cm4gZmFsc2UgZXhjZXB0IGZvciBpbml0aWFsIHR5cGUgdmFsaWRhdGlvbiBvZiBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIHNjaG5vcnJWZXJpZnkoc2lnbmF0dXJlLCBtZXNzYWdlLCBwdWJsaWNLZXkpIHtcbiAgICBjb25zdCBzaWcgPSBlbnN1cmVCeXRlcygnc2lnbmF0dXJlJywgc2lnbmF0dXJlLCA2NCk7XG4gICAgY29uc3QgbSA9IGVuc3VyZUJ5dGVzKCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgY29uc3QgcHViID0gZW5zdXJlQnl0ZXMoJ3B1YmxpY0tleScsIHB1YmxpY0tleSwgMzIpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFAgPSBsaWZ0X3goYnl0ZXNUb051bWJlckJFKHB1YikpOyAvLyBQID0gbGlmdF94KGludChwaykpOyBmYWlsIGlmIHRoYXQgZmFpbHNcbiAgICAgICAgY29uc3QgciA9IGJ5dGVzVG9OdW1iZXJCRShzaWcuc3ViYXJyYXkoMCwgMzIpKTsgLy8gTGV0IHIgPSBpbnQoc2lnWzA6MzJdKTsgZmFpbCBpZiByIOKJpSBwLlxuICAgICAgICBpZiAoIWZlKHIpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBzID0gYnl0ZXNUb051bWJlckJFKHNpZy5zdWJhcnJheSgzMiwgNjQpKTsgLy8gTGV0IHMgPSBpbnQoc2lnWzMyOjY0XSk7IGZhaWwgaWYgcyDiiaUgbi5cbiAgICAgICAgaWYgKCFnZShzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgZSA9IGNoYWxsZW5nZShudW1UbzMyYihyKSwgcG9pbnRUb0J5dGVzKFApLCBtKTsgLy8gaW50KGNoYWxsZW5nZShieXRlcyhyKXx8Ynl0ZXMoUCl8fG0pKSVuXG4gICAgICAgIGNvbnN0IFIgPSBHbXVsQWRkKFAsIHMsIG1vZE4oLWUpKTsgLy8gUiA9IHPii4VHIC0gZeKLhVBcbiAgICAgICAgaWYgKCFSIHx8ICFSLmhhc0V2ZW5ZKCkgfHwgUi50b0FmZmluZSgpLnggIT09IHIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIC1lUCA9PSAobi1lKVBcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIEZhaWwgaWYgaXNfaW5maW5pdGUoUikgLyBub3QgaGFzX2V2ZW5feShSKSAvIHgoUikg4omgIHIuXG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IHNjaG5vcnIgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+ICh7XG4gICAgZ2V0UHVibGljS2V5OiBzY2hub3JyR2V0UHVibGljS2V5LFxuICAgIHNpZ246IHNjaG5vcnJTaWduLFxuICAgIHZlcmlmeTogc2Nobm9yclZlcmlmeSxcbiAgICB1dGlsczoge1xuICAgICAgICByYW5kb21Qcml2YXRlS2V5OiBzZWNwMjU2azEudXRpbHMucmFuZG9tUHJpdmF0ZUtleSxcbiAgICAgICAgbGlmdF94LFxuICAgICAgICBwb2ludFRvQnl0ZXMsXG4gICAgICAgIG51bWJlclRvQnl0ZXNCRSxcbiAgICAgICAgYnl0ZXNUb051bWJlckJFLFxuICAgICAgICB0YWdnZWRIYXNoLFxuICAgICAgICBtb2QsXG4gICAgfSxcbn0pKSgpO1xuY29uc3QgaXNvTWFwID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBpc29nZW55TWFwKEZwLCBbXG4gICAgLy8geE51bVxuICAgIFtcbiAgICAgICAgJzB4OGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGRhYWFhYThjNycsXG4gICAgICAgICcweDdkM2Q0YzgwYmMzMjFkNWI5ZjMxNWNlYTdmZDQ0YzVkNTk1ZDJmYzBiZjYzYjkyZGZmZjEwNDRmMTdjNjU4MScsXG4gICAgICAgICcweDUzNGMzMjhkMjNmMjM0ZTZlMmE0MTNkZWNhMjVjYWVjZTQ1MDYxNDQwMzdjNDAzMTRlY2JkMGI1M2Q5ZGQyNjInLFxuICAgICAgICAnMHg4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZGFhYWFhODhjJyxcbiAgICBdLFxuICAgIC8vIHhEZW5cbiAgICBbXG4gICAgICAgICcweGQzNTc3MTE5M2Q5NDkxOGE5Y2EzNGNjYmI3YjY0MGRkODZjZDQwOTU0MmY4NDg3ZDlmZTZiNzQ1NzgxZWI0OWInLFxuICAgICAgICAnMHhlZGFkYzZmNjQzODNkYzFkZjdjNGIyZDUxYjU0MjI1NDA2ZDM2YjY0MWY1ZTQxYmJjNTJhNTY2MTJhOGM2ZDE0JyxcbiAgICAgICAgJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsIC8vIExBU1QgMVxuICAgIF0sXG4gICAgLy8geU51bVxuICAgIFtcbiAgICAgICAgJzB4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGI4ZTM4ZTIzYycsXG4gICAgICAgICcweGM3NWUwYzMyZDVjYjdjMGZhOWQwYTU0YjEyYTBhNmQ1NjQ3YWIwNDZkNjg2ZGE2ZmRmZmM5MGZjMjAxZDcxYTMnLFxuICAgICAgICAnMHgyOWE2MTk0NjkxZjkxYTczNzE1MjA5ZWY2NTEyZTU3NjcyMjgzMGEyMDFiZTIwMThhNzY1ZTg1YTllY2VlOTMxJyxcbiAgICAgICAgJzB4MmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmYzOGUzOGQ4NCcsXG4gICAgXSxcbiAgICAvLyB5RGVuXG4gICAgW1xuICAgICAgICAnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmOTNiJyxcbiAgICAgICAgJzB4N2EwNjUzNGJiOGJkYjQ5ZmQ1ZTllNjYzMjcyMmMyOTg5NDY3YzFiZmM4ZThkOTc4ZGZiNDI1ZDI2ODVjMjU3MycsXG4gICAgICAgICcweDY0ODRhYTcxNjU0NWNhMmNmM2E3MGMzZmE4ZmUzMzdlMGEzZDIxMTYyZjBkNjI5OWE3YmY4MTkyYmZkMmE3NmYnLFxuICAgICAgICAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxJywgLy8gTEFTVCAxXG4gICAgXSxcbl0ubWFwKChpKSA9PiBpLm1hcCgoaikgPT4gQmlnSW50KGopKSkpKSgpO1xuY29uc3QgbWFwU1dVID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtYXBUb0N1cnZlU2ltcGxlU1dVKEZwLCB7XG4gICAgQTogQmlnSW50KCcweDNmODczMWFiZGQ2NjFhZGNhMDhhNTU1OGYwZjVkMjcyZTk1M2QzNjNjYjZmMGU1ZDQwNTQ0N2MwMWE0NDQ1MzMnKSxcbiAgICBCOiBCaWdJbnQoJzE3NzEnKSxcbiAgICBaOiBGcC5jcmVhdGUoQmlnSW50KCctMTEnKSksXG59KSkoKTtcbmNvbnN0IGh0ZiA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gY3JlYXRlSGFzaGVyKHNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQsIChzY2FsYXJzKSA9PiB7XG4gICAgY29uc3QgeyB4LCB5IH0gPSBtYXBTV1UoRnAuY3JlYXRlKHNjYWxhcnNbMF0pKTtcbiAgICByZXR1cm4gaXNvTWFwKHgsIHkpO1xufSwge1xuICAgIERTVDogJ3NlY3AyNTZrMV9YTUQ6U0hBLTI1Nl9TU1dVX1JPXycsXG4gICAgZW5jb2RlRFNUOiAnc2VjcDI1NmsxX1hNRDpTSEEtMjU2X1NTV1VfTlVfJyxcbiAgICBwOiBGcC5PUkRFUixcbiAgICBtOiAxLFxuICAgIGs6IDEyOCxcbiAgICBleHBhbmQ6ICd4bWQnLFxuICAgIGhhc2g6IHNoYTI1Nixcbn0pKSgpO1xuZXhwb3J0IGNvbnN0IGhhc2hUb0N1cnZlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBodGYuaGFzaFRvQ3VydmUpKCk7XG5leHBvcnQgY29uc3QgZW5jb2RlVG9DdXJ2ZSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gaHRmLmVuY29kZVRvQ3VydmUpKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWNwMjU2azEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_assert.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_assert.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBLG1EQUFtRCxFQUFFO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxFQUFFO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsUUFBUSxrQkFBa0IsU0FBUztBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLElBQUk7QUFDckY7QUFDQTtBQUNxRDtBQUNyRCxpQkFBaUI7QUFDakIsaUVBQWUsTUFBTSxFQUFDO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcz8xZDhkIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuKSB8fCBuIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBwb3NpdGl2ZSBpbnRlZ2VyOiAke259YCk7XG59XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBib29sZWFuLCBub3QgJHtifWApO1xufVxuZnVuY3Rpb24gYnl0ZXMoYiwgLi4ubGVuZ3Rocykge1xuICAgIGlmICghKGIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBVaW50OEFycmF5Jyk7XG4gICAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiLmxlbmd0aCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgVWludDhBcnJheSBvZiBsZW5ndGggJHtsZW5ndGhzfSwgbm90IG9mIGxlbmd0aD0ke2IubGVuZ3RofWApO1xufVxuZnVuY3Rpb24gaGFzaChoYXNoKSB7XG4gICAgaWYgKHR5cGVvZiBoYXNoICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBoYXNoLmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIHNob3VsZCBiZSB3cmFwcGVkIGJ5IHV0aWxzLndyYXBDb25zdHJ1Y3RvcicpO1xuICAgIG51bWJlcihoYXNoLm91dHB1dExlbik7XG4gICAgbnVtYmVyKGhhc2guYmxvY2tMZW4pO1xufVxuZnVuY3Rpb24gZXhpc3RzKGluc3RhbmNlLCBjaGVja0ZpbmlzaGVkID0gdHJ1ZSkge1xuICAgIGlmIChpbnN0YW5jZS5kZXN0cm95ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWQnKTtcbiAgICBpZiAoY2hlY2tGaW5pc2hlZCAmJiBpbnN0YW5jZS5maW5pc2hlZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoI2RpZ2VzdCgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkJyk7XG59XG5mdW5jdGlvbiBvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xuICAgIGJ5dGVzKG91dCk7XG4gICAgY29uc3QgbWluID0gaW5zdGFuY2Uub3V0cHV0TGVuO1xuICAgIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlnZXN0SW50bygpIGV4cGVjdHMgb3V0cHV0IGJ1ZmZlciBvZiBsZW5ndGggYXQgbGVhc3QgJHttaW59YCk7XG4gICAgfVxufVxuZXhwb3J0IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmNvbnN0IGFzc2VydCA9IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmV4cG9ydCBkZWZhdWx0IGFzc2VydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9hc3NlcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_sha2.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_sha2.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA2: () => (/* binding */ SHA2)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3NoYTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ1M7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG1CQUFtQiwyQ0FBSTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFEQUFVO0FBQzlCO0FBQ0E7QUFDQSxRQUFRLGtEQUFNO0FBQ2QsZ0JBQWdCLHlCQUF5QjtBQUN6QyxlQUFlLGtEQUFPO0FBQ3RCO0FBQ0EsMEJBQTBCLFVBQVU7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHFEQUFVO0FBQzNDLHVCQUF1Qix1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFNO0FBQ2QsUUFBUSxrREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtCQUErQjtBQUMvQyxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQXFEO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3NoYTIuanM/MGVkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGlzdHMsIG91dHB1dCB9IGZyb20gJy4vX2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBIYXNoLCBjcmVhdGVWaWV3LCB0b0J5dGVzIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBQb2x5ZmlsbCBmb3IgU2FmYXJpIDE0XG5mdW5jdGlvbiBzZXRCaWdVaW50NjQodmlldywgYnl0ZU9mZnNldCwgdmFsdWUsIGlzTEUpIHtcbiAgICBpZiAodHlwZW9mIHZpZXcuc2V0QmlnVWludDY0ID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gdmlldy5zZXRCaWdVaW50NjQoYnl0ZU9mZnNldCwgdmFsdWUsIGlzTEUpO1xuICAgIGNvbnN0IF8zMm4gPSBCaWdJbnQoMzIpO1xuICAgIGNvbnN0IF91MzJfbWF4ID0gQmlnSW50KDB4ZmZmZmZmZmYpO1xuICAgIGNvbnN0IHdoID0gTnVtYmVyKCh2YWx1ZSA+PiBfMzJuKSAmIF91MzJfbWF4KTtcbiAgICBjb25zdCB3bCA9IE51bWJlcih2YWx1ZSAmIF91MzJfbWF4KTtcbiAgICBjb25zdCBoID0gaXNMRSA/IDQgOiAwO1xuICAgIGNvbnN0IGwgPSBpc0xFID8gMCA6IDQ7XG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGgsIHdoLCBpc0xFKTtcbiAgICB2aWV3LnNldFVpbnQzMihieXRlT2Zmc2V0ICsgbCwgd2wsIGlzTEUpO1xufVxuLy8gQmFzZSBTSEEyIGNsYXNzIChSRkMgNjIzNClcbmV4cG9ydCBjbGFzcyBTSEEyIGV4dGVuZHMgSGFzaCB7XG4gICAgY29uc3RydWN0b3IoYmxvY2tMZW4sIG91dHB1dExlbiwgcGFkT2Zmc2V0LCBpc0xFKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSBibG9ja0xlbjtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRoaXMucGFkT2Zmc2V0ID0gcGFkT2Zmc2V0O1xuICAgICAgICB0aGlzLmlzTEUgPSBpc0xFO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgdGhpcy52aWV3ID0gY3JlYXRlVmlldyh0aGlzLmJ1ZmZlcik7XG4gICAgfVxuICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIGV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyB2aWV3LCBidWZmZXIsIGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgICAgLy8gRmFzdCBwYXRoOiB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBibG9jayBpbiBpbnB1dCwgY2FzdCBpdCB0byB2aWV3IGFuZCBwcm9jZXNzXG4gICAgICAgICAgICBpZiAodGFrZSA9PT0gYmxvY2tMZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhVmlldyA9IGNyZWF0ZVZpZXcoZGF0YSk7XG4gICAgICAgICAgICAgICAgZm9yICg7IGJsb2NrTGVuIDw9IGxlbiAtIHBvczsgcG9zICs9IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoZGF0YVZpZXcsIHBvcyk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIuc2V0KGRhdGEuc3ViYXJyYXkocG9zLCBwb3MgKyB0YWtlKSwgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHRoaXMucm91bmRDbGVhbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMpO1xuICAgICAgICBvdXRwdXQob3V0LCB0aGlzKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIC8vIFBhZGRpbmdcbiAgICAgICAgLy8gV2UgY2FuIGF2b2lkIGFsbG9jYXRpb24gb2YgYnVmZmVyIGZvciBwYWRkaW5nIGNvbXBsZXRlbHkgaWYgaXRcbiAgICAgICAgLy8gd2FzIHByZXZpb3VzbHkgbm90IGFsbG9jYXRlZCBoZXJlLiBCdXQgaXQgd29uJ3QgY2hhbmdlIHBlcmZvcm1hbmNlLlxuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgdmlldywgYmxvY2tMZW4sIGlzTEUgfSA9IHRoaXM7XG4gICAgICAgIGxldCB7IHBvcyB9ID0gdGhpcztcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBiaXQgJzEnIHRvIHRoZSBtZXNzYWdlXG4gICAgICAgIGJ1ZmZlcltwb3MrK10gPSAwYjEwMDAwMDAwO1xuICAgICAgICB0aGlzLmJ1ZmZlci5zdWJhcnJheShwb3MpLmZpbGwoMCk7XG4gICAgICAgIC8vIHdlIGhhdmUgbGVzcyB0aGFuIHBhZE9mZnNldCBsZWZ0IGluIGJ1ZmZlciwgc28gd2UgY2Fubm90IHB1dCBsZW5ndGggaW4gY3VycmVudCBibG9jaywgbmVlZCBwcm9jZXNzIGl0IGFuZCBwYWQgYWdhaW5cbiAgICAgICAgaWYgKHRoaXMucGFkT2Zmc2V0ID4gYmxvY2tMZW4gLSBwb3MpIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgIHBvcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFkIHVudGlsIGZ1bGwgYmxvY2sgYnl0ZSB3aXRoIHplcm9zXG4gICAgICAgIGZvciAobGV0IGkgPSBwb3M7IGkgPCBibG9ja0xlbjsgaSsrKVxuICAgICAgICAgICAgYnVmZmVyW2ldID0gMDtcbiAgICAgICAgLy8gTm90ZTogc2hhNTEyIHJlcXVpcmVzIGxlbmd0aCB0byBiZSAxMjhiaXQgaW50ZWdlciwgYnV0IGxlbmd0aCBpbiBKUyB3aWxsIG92ZXJmbG93IGJlZm9yZSB0aGF0XG4gICAgICAgIC8vIFlvdSBuZWVkIHRvIHdyaXRlIGFyb3VuZCAyIGV4YWJ5dGVzICh1NjRfbWF4IC8gOCAvICgxMDI0Kio2KSkgZm9yIHRoaXMgdG8gaGFwcGVuLlxuICAgICAgICAvLyBTbyB3ZSBqdXN0IHdyaXRlIGxvd2VzdCA2NCBiaXRzIG9mIHRoYXQgdmFsdWUuXG4gICAgICAgIHNldEJpZ1VpbnQ2NCh2aWV3LCBibG9ja0xlbiAtIDgsIEJpZ0ludCh0aGlzLmxlbmd0aCAqIDgpLCBpc0xFKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICBjb25zdCBvdmlldyA9IGNyZWF0ZVZpZXcob3V0KTtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5vdXRwdXRMZW47XG4gICAgICAgIC8vIE5PVEU6IHdlIGRvIGRpdmlzaW9uIGJ5IDQgbGF0ZXIsIHdoaWNoIHNob3VsZCBiZSBmdXNlZCBpbiBzaW5nbGUgb3Agd2l0aCBtb2R1bG8gYnkgSklUXG4gICAgICAgIGlmIChsZW4gJSA0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIHNob3VsZCBiZSBhbGlnbmVkIHRvIDMyYml0Jyk7XG4gICAgICAgIGNvbnN0IG91dExlbiA9IGxlbiAvIDQ7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXQoKTtcbiAgICAgICAgaWYgKG91dExlbiA+IHN0YXRlLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignX3NoYTI6IG91dHB1dExlbiBiaWdnZXIgdGhhbiBzdGF0ZScpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dExlbjsgaSsrKVxuICAgICAgICAgICAgb3ZpZXcuc2V0VWludDMyKDQgKiBpLCBzdGF0ZVtpXSwgaXNMRSk7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgY29uc3QgeyBidWZmZXIsIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKGJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJ1ZmZlci5zbGljZSgwLCBvdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICB0byB8fCAodG8gPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpKTtcbiAgICAgICAgdG8uc2V0KC4uLnRoaXMuZ2V0KCkpO1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBidWZmZXIsIGxlbmd0aCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgcG9zIH0gPSB0aGlzO1xuICAgICAgICB0by5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRvLnBvcyA9IHBvcztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICBpZiAobGVuZ3RoICUgYmxvY2tMZW4pXG4gICAgICAgICAgICB0by5idWZmZXIuc2V0KGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fc2hhMi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_sha2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_u64.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_u64.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   add3H: () => (/* binding */ add3H),\n/* harmony export */   add3L: () => (/* binding */ add3L),\n/* harmony export */   add4H: () => (/* binding */ add4H),\n/* harmony export */   add4L: () => (/* binding */ add4L),\n/* harmony export */   add5H: () => (/* binding */ add5H),\n/* harmony export */   add5L: () => (/* binding */ add5L),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromBig: () => (/* binding */ fromBig),\n/* harmony export */   rotlBH: () => (/* binding */ rotlBH),\n/* harmony export */   rotlBL: () => (/* binding */ rotlBL),\n/* harmony export */   rotlSH: () => (/* binding */ rotlSH),\n/* harmony export */   rotlSL: () => (/* binding */ rotlSL),\n/* harmony export */   rotr32H: () => (/* binding */ rotr32H),\n/* harmony export */   rotr32L: () => (/* binding */ rotr32L),\n/* harmony export */   rotrBH: () => (/* binding */ rotrBH),\n/* harmony export */   rotrBL: () => (/* binding */ rotrBL),\n/* harmony export */   rotrSH: () => (/* binding */ rotrSH),\n/* harmony export */   rotrSL: () => (/* binding */ rotrSL),\n/* harmony export */   shrSH: () => (/* binding */ shrSH),\n/* harmony export */   shrSL: () => (/* binding */ shrSL),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   toBig: () => (/* binding */ toBig)\n/* harmony export */ });\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\n\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);\n//# sourceMappingURL=_u64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3U2NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQyxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2lMO0FBQ2pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLEdBQUcsRUFBQztBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL191NjQuanM/MDM4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVMzJfTUFTSzY0ID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgyICoqIDMyIC0gMSk7XG5jb25zdCBfMzJuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgzMik7XG4vLyBXZSBhcmUgbm90IHVzaW5nIEJpZ1VpbnQ2NEFycmF5LCBiZWNhdXNlIHRoZXkgYXJlIGV4dHJlbWVseSBzbG93IGFzIHBlciAyMDIyXG5mdW5jdGlvbiBmcm9tQmlnKG4sIGxlID0gZmFsc2UpIHtcbiAgICBpZiAobGUpXG4gICAgICAgIHJldHVybiB7IGg6IE51bWJlcihuICYgVTMyX01BU0s2NCksIGw6IE51bWJlcigobiA+PiBfMzJuKSAmIFUzMl9NQVNLNjQpIH07XG4gICAgcmV0dXJuIHsgaDogTnVtYmVyKChuID4+IF8zMm4pICYgVTMyX01BU0s2NCkgfCAwLCBsOiBOdW1iZXIobiAmIFUzMl9NQVNLNjQpIHwgMCB9O1xufVxuZnVuY3Rpb24gc3BsaXQobHN0LCBsZSA9IGZhbHNlKSB7XG4gICAgbGV0IEFoID0gbmV3IFVpbnQzMkFycmF5KGxzdC5sZW5ndGgpO1xuICAgIGxldCBBbCA9IG5ldyBVaW50MzJBcnJheShsc3QubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB7IGgsIGwgfSA9IGZyb21CaWcobHN0W2ldLCBsZSk7XG4gICAgICAgIFtBaFtpXSwgQWxbaV1dID0gW2gsIGxdO1xuICAgIH1cbiAgICByZXR1cm4gW0FoLCBBbF07XG59XG5jb25zdCB0b0JpZyA9IChoLCBsKSA9PiAoQmlnSW50KGggPj4+IDApIDw8IF8zMm4pIHwgQmlnSW50KGwgPj4+IDApO1xuLy8gZm9yIFNoaWZ0IGluIFswLCAzMilcbmNvbnN0IHNoclNIID0gKGgsIF9sLCBzKSA9PiBoID4+PiBzO1xuY29uc3Qgc2hyU0wgPSAoaCwgbCwgcykgPT4gKGggPDwgKDMyIC0gcykpIHwgKGwgPj4+IHMpO1xuLy8gUmlnaHQgcm90YXRlIGZvciBTaGlmdCBpbiBbMSwgMzIpXG5jb25zdCByb3RyU0ggPSAoaCwgbCwgcykgPT4gKGggPj4+IHMpIHwgKGwgPDwgKDMyIC0gcykpO1xuY29uc3Qgcm90clNMID0gKGgsIGwsIHMpID0+IChoIDw8ICgzMiAtIHMpKSB8IChsID4+PiBzKTtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gKDMyLCA2NCksIE5PVEU6IDMyIGlzIHNwZWNpYWwgY2FzZS5cbmNvbnN0IHJvdHJCSCA9IChoLCBsLCBzKSA9PiAoaCA8PCAoNjQgLSBzKSkgfCAobCA+Pj4gKHMgLSAzMikpO1xuY29uc3Qgcm90ckJMID0gKGgsIGwsIHMpID0+IChoID4+PiAocyAtIDMyKSkgfCAobCA8PCAoNjQgLSBzKSk7XG4vLyBSaWdodCByb3RhdGUgZm9yIHNoaWZ0PT09MzIgKGp1c3Qgc3dhcHMgbCZoKVxuY29uc3Qgcm90cjMySCA9IChfaCwgbCkgPT4gbDtcbmNvbnN0IHJvdHIzMkwgPSAoaCwgX2wpID0+IGg7XG4vLyBMZWZ0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gWzEsIDMyKVxuY29uc3Qgcm90bFNIID0gKGgsIGwsIHMpID0+IChoIDw8IHMpIHwgKGwgPj4+ICgzMiAtIHMpKTtcbmNvbnN0IHJvdGxTTCA9IChoLCBsLCBzKSA9PiAobCA8PCBzKSB8IChoID4+PiAoMzIgLSBzKSk7XG4vLyBMZWZ0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gKDMyLCA2NCksIE5PVEU6IDMyIGlzIHNwZWNpYWwgY2FzZS5cbmNvbnN0IHJvdGxCSCA9IChoLCBsLCBzKSA9PiAobCA8PCAocyAtIDMyKSkgfCAoaCA+Pj4gKDY0IC0gcykpO1xuY29uc3Qgcm90bEJMID0gKGgsIGwsIHMpID0+IChoIDw8IChzIC0gMzIpKSB8IChsID4+PiAoNjQgLSBzKSk7XG4vLyBKUyB1c2VzIDMyLWJpdCBzaWduZWQgaW50ZWdlcnMgZm9yIGJpdHdpc2Ugb3BlcmF0aW9ucyB3aGljaCBtZWFucyB3ZSBjYW5ub3Rcbi8vIHNpbXBsZSB0YWtlIGNhcnJ5IG91dCBvZiBsb3cgYml0IHN1bSBieSBzaGlmdCwgd2UgbmVlZCB0byB1c2UgZGl2aXNpb24uXG5mdW5jdGlvbiBhZGQoQWgsIEFsLCBCaCwgQmwpIHtcbiAgICBjb25zdCBsID0gKEFsID4+PiAwKSArIChCbCA+Pj4gMCk7XG4gICAgcmV0dXJuIHsgaDogKEFoICsgQmggKyAoKGwgLyAyICoqIDMyKSB8IDApKSB8IDAsIGw6IGwgfCAwIH07XG59XG4vLyBBZGRpdGlvbiB3aXRoIG1vcmUgdGhhbiAyIGVsZW1lbnRzXG5jb25zdCBhZGQzTCA9IChBbCwgQmwsIENsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCk7XG5jb25zdCBhZGQzSCA9IChsb3csIEFoLCBCaCwgQ2gpID0+IChBaCArIEJoICsgQ2ggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcbmNvbnN0IGFkZDRMID0gKEFsLCBCbCwgQ2wsIERsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCkgKyAoRGwgPj4+IDApO1xuY29uc3QgYWRkNEggPSAobG93LCBBaCwgQmgsIENoLCBEaCkgPT4gKEFoICsgQmggKyBDaCArIERoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG5jb25zdCBhZGQ1TCA9IChBbCwgQmwsIENsLCBEbCwgRWwpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKSArIChEbCA+Pj4gMCkgKyAoRWwgPj4+IDApO1xuY29uc3QgYWRkNUggPSAobG93LCBBaCwgQmgsIENoLCBEaCwgRWgpID0+IChBaCArIEJoICsgQ2ggKyBEaCArIEVoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCB7IGZyb21CaWcsIHNwbGl0LCB0b0JpZywgc2hyU0gsIHNoclNMLCByb3RyU0gsIHJvdHJTTCwgcm90ckJILCByb3RyQkwsIHJvdHIzMkgsIHJvdHIzMkwsIHJvdGxTSCwgcm90bFNMLCByb3RsQkgsIHJvdGxCTCwgYWRkLCBhZGQzTCwgYWRkM0gsIGFkZDRMLCBhZGQ0SCwgYWRkNUgsIGFkZDVMLCB9O1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCB1NjQgPSB7XG4gICAgZnJvbUJpZywgc3BsaXQsIHRvQmlnLFxuICAgIHNoclNILCBzaHJTTCxcbiAgICByb3RyU0gsIHJvdHJTTCwgcm90ckJILCByb3RyQkwsXG4gICAgcm90cjMySCwgcm90cjMyTCxcbiAgICByb3RsU0gsIHJvdGxTTCwgcm90bEJILCByb3RsQkwsXG4gICAgYWRkLCBhZGQzTCwgYWRkM0gsIGFkZDRMLCBhZGQ0SCwgYWRkNUgsIGFkZDVMLFxufTtcbmV4cG9ydCBkZWZhdWx0IHU2NDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV91NjQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_u64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNrQztBQUMzQixlQUFlLDJNQUFFLFdBQVcsMk1BQUUsaUJBQWlCLDBOQUFpQixHQUFHLGtEQUFZO0FBQ3RGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcz80NzlkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIHVzZSBXZWJDcnlwdG8gYWthIGdsb2JhbFRoaXMuY3J5cHRvLCB3aGljaCBleGlzdHMgaW4gYnJvd3NlcnMgYW5kIG5vZGUuanMgMTYrLlxuLy8gU2VlIHV0aWxzLnRzIGZvciBkZXRhaWxzLlxuLy8gVGhlIGZpbGUgd2lsbCB0aHJvdyBvbiBub2RlLmpzIDE0IGFuZCBlYXJsaWVyLlxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0ICogYXMgbmMgZnJvbSAnbm9kZTpjcnlwdG8nO1xuZXhwb3J0IGNvbnN0IGNyeXB0byA9IG5jICYmIHR5cGVvZiBuYyA9PT0gJ29iamVjdCcgJiYgJ3dlYmNyeXB0bycgaW4gbmMgPyBuYy53ZWJjcnlwdG8gOiB1bmRlZmluZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG9Ob2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/hmac.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/hmac.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// HMAC (RFC 2104)\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.hash)(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vaG1hYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdHO0FBQ3JEO0FBQzNDO0FBQ08sbUJBQW1CLDJDQUFJO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnREFBVTtBQUNsQixvQkFBb0Isa0RBQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBWTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0RBQVk7QUFDcEIsUUFBUSxpREFBVztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRTtBQUNqRSxnQkFBZ0IseURBQXlEO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2htYWMuanM/ZWE1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYXNoIGFzIGFzc2VydEhhc2gsIGJ5dGVzIGFzIGFzc2VydEJ5dGVzLCBleGlzdHMgYXMgYXNzZXJ0RXhpc3RzIH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcbmltcG9ydCB7IEhhc2gsIHRvQnl0ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIEhNQUMgKFJGQyAyMTA0KVxuZXhwb3J0IGNsYXNzIEhNQUMgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihoYXNoLCBfa2V5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgYXNzZXJ0SGFzaChoYXNoKTtcbiAgICAgICAgY29uc3Qga2V5ID0gdG9CeXRlcyhfa2V5KTtcbiAgICAgICAgdGhpcy5pSGFzaCA9IGhhc2guY3JlYXRlKCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5pSGFzaC51cGRhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGluc3RhbmNlIG9mIGNsYXNzIHdoaWNoIGV4dGVuZHMgdXRpbHMuSGFzaCcpO1xuICAgICAgICB0aGlzLmJsb2NrTGVuID0gdGhpcy5pSGFzaC5ibG9ja0xlbjtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSB0aGlzLmlIYXNoLm91dHB1dExlbjtcbiAgICAgICAgY29uc3QgYmxvY2tMZW4gPSB0aGlzLmJsb2NrTGVuO1xuICAgICAgICBjb25zdCBwYWQgPSBuZXcgVWludDhBcnJheShibG9ja0xlbik7XG4gICAgICAgIC8vIGJsb2NrTGVuIGNhbiBiZSBiaWdnZXIgdGhhbiBvdXRwdXRMZW5cbiAgICAgICAgcGFkLnNldChrZXkubGVuZ3RoID4gYmxvY2tMZW4gPyBoYXNoLmNyZWF0ZSgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpIDoga2V5KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNjtcbiAgICAgICAgdGhpcy5pSGFzaC51cGRhdGUocGFkKTtcbiAgICAgICAgLy8gQnkgZG9pbmcgdXBkYXRlIChwcm9jZXNzaW5nIG9mIGZpcnN0IGJsb2NrKSBvZiBvdXRlciBoYXNoIGhlcmUgd2UgY2FuIHJlLXVzZSBpdCBiZXR3ZWVuIG11bHRpcGxlIGNhbGxzIHZpYSBjbG9uZVxuICAgICAgICB0aGlzLm9IYXNoID0gaGFzaC5jcmVhdGUoKTtcbiAgICAgICAgLy8gVW5kbyBpbnRlcm5hbCBYT1IgJiYgYXBwbHkgb3V0ZXIgWE9SXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzYgXiAweDVjO1xuICAgICAgICB0aGlzLm9IYXNoLnVwZGF0ZShwYWQpO1xuICAgICAgICBwYWQuZmlsbCgwKTtcbiAgICB9XG4gICAgdXBkYXRlKGJ1Zikge1xuICAgICAgICBhc3NlcnRFeGlzdHModGhpcyk7XG4gICAgICAgIHRoaXMuaUhhc2gudXBkYXRlKGJ1Zik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBhc3NlcnRFeGlzdHModGhpcyk7XG4gICAgICAgIGFzc2VydEJ5dGVzKG91dCwgdGhpcy5vdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pSGFzaC5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKG91dCk7XG4gICAgICAgIHRoaXMub0hhc2guZGlnZXN0SW50byhvdXQpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheSh0aGlzLm9IYXNoLm91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGlnZXN0SW50byhvdXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIC8vIENyZWF0ZSBuZXcgaW5zdGFuY2Ugd2l0aG91dCBjYWxsaW5nIGNvbnN0cnVjdG9yIHNpbmNlIGtleSBhbHJlYWR5IGluIHN0YXRlIGFuZCB3ZSBkb24ndCBrbm93IGl0LlxuICAgICAgICB0byB8fCAodG8gPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwge30pKTtcbiAgICAgICAgY29uc3QgeyBvSGFzaCwgaUhhc2gsIGZpbmlzaGVkLCBkZXN0cm95ZWQsIGJsb2NrTGVuLCBvdXRwdXRMZW4gfSA9IHRoaXM7XG4gICAgICAgIHRvID0gdG87XG4gICAgICAgIHRvLmZpbmlzaGVkID0gZmluaXNoZWQ7XG4gICAgICAgIHRvLmRlc3Ryb3llZCA9IGRlc3Ryb3llZDtcbiAgICAgICAgdG8uYmxvY2tMZW4gPSBibG9ja0xlbjtcbiAgICAgICAgdG8ub3V0cHV0TGVuID0gb3V0cHV0TGVuO1xuICAgICAgICB0by5vSGFzaCA9IG9IYXNoLl9jbG9uZUludG8odG8ub0hhc2gpO1xuICAgICAgICB0by5pSGFzaCA9IGlIYXNoLl9jbG9uZUludG8odG8uaUhhc2gpO1xuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vSGFzaC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaUhhc2guZGVzdHJveSgpO1xuICAgIH1cbn1cbi8qKlxuICogSE1BQzogUkZDMjEwNCBtZXNzYWdlIGF1dGhlbnRpY2F0aW9uIGNvZGUuXG4gKiBAcGFyYW0gaGFzaCAtIGZ1bmN0aW9uIHRoYXQgd291bGQgYmUgdXNlZCBlLmcuIHNoYTI1NlxuICogQHBhcmFtIGtleSAtIG1lc3NhZ2Uga2V5XG4gKiBAcGFyYW0gbWVzc2FnZSAtIG1lc3NhZ2UgZGF0YVxuICovXG5leHBvcnQgY29uc3QgaG1hYyA9IChoYXNoLCBrZXksIG1lc3NhZ2UpID0+IG5ldyBITUFDKGhhc2gsIGtleSkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdCgpO1xuaG1hYy5jcmVhdGUgPSAoaGFzaCwga2V5KSA9PiBuZXcgSE1BQyhoYXNoLCBrZXkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG1hYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/hmac.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/sha256.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/sha256.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_sha2.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/sha3.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/sha3.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keccak: () => (/* binding */ Keccak),\n/* harmony export */   keccakP: () => (/* binding */ keccakP),\n/* harmony export */   keccak_224: () => (/* binding */ keccak_224),\n/* harmony export */   keccak_256: () => (/* binding */ keccak_256),\n/* harmony export */   keccak_384: () => (/* binding */ keccak_384),\n/* harmony export */   keccak_512: () => (/* binding */ keccak_512),\n/* harmony export */   sha3_224: () => (/* binding */ sha3_224),\n/* harmony export */   sha3_256: () => (/* binding */ sha3_256),\n/* harmony export */   sha3_384: () => (/* binding */ sha3_384),\n/* harmony export */   sha3_512: () => (/* binding */ sha3_512),\n/* harmony export */   shake128: () => (/* binding */ shake128),\n/* harmony export */   shake256: () => (/* binding */ shake256)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBH)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBL)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSL)(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nclass Keccak extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this);\n        const { blockLen, state } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this, false);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.output)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nconst sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nconst sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nconst sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nconst sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nconst keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nconst keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nconst keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nconst keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nconst shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nconst shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/sha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\n\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/async-mutex/index.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/async-mutex/index.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E_ALREADY_LOCKED: () => (/* binding */ E_ALREADY_LOCKED),\n/* harmony export */   E_CANCELED: () => (/* binding */ E_CANCELED),\n/* harmony export */   E_TIMEOUT: () => (/* binding */ E_TIMEOUT),\n/* harmony export */   Mutex: () => (/* binding */ Mutex),\n/* harmony export */   Semaphore: () => (/* binding */ Semaphore),\n/* harmony export */   tryAcquire: () => (/* binding */ tryAcquire),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout)\n/* harmony export */ });\nconst E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\n\nvar __awaiter$2 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Semaphore {\n    constructor(_value, _cancelError = E_CANCELED) {\n        this._value = _value;\n        this._cancelError = _cancelError;\n        this._queue = [];\n        this._weightedWaiters = [];\n    }\n    acquire(weight = 1, priority = 0) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        return new Promise((resolve, reject) => {\n            const task = { resolve, reject, weight, priority };\n            const i = findIndexFromEnd(this._queue, (other) => priority <= other.priority);\n            if (i === -1 && weight <= this._value) {\n                // Needs immediate dispatch, skip the queue\n                this._dispatchItem(task);\n            }\n            else {\n                this._queue.splice(i + 1, 0, task);\n            }\n        });\n    }\n    runExclusive(callback_1) {\n        return __awaiter$2(this, arguments, void 0, function* (callback, weight = 1, priority = 0) {\n            const [value, release] = yield this.acquire(weight, priority);\n            try {\n                return yield callback(value);\n            }\n            finally {\n                release();\n            }\n        });\n    }\n    waitForUnlock(weight = 1, priority = 0) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        if (this._couldLockImmediately(weight, priority)) {\n            return Promise.resolve();\n        }\n        else {\n            return new Promise((resolve) => {\n                if (!this._weightedWaiters[weight - 1])\n                    this._weightedWaiters[weight - 1] = [];\n                insertSorted(this._weightedWaiters[weight - 1], { resolve, priority });\n            });\n        }\n    }\n    isLocked() {\n        return this._value <= 0;\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value) {\n        this._value = value;\n        this._dispatchQueue();\n    }\n    release(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        this._value += weight;\n        this._dispatchQueue();\n    }\n    cancel() {\n        this._queue.forEach((entry) => entry.reject(this._cancelError));\n        this._queue = [];\n    }\n    _dispatchQueue() {\n        this._drainUnlockWaiters();\n        while (this._queue.length > 0 && this._queue[0].weight <= this._value) {\n            this._dispatchItem(this._queue.shift());\n            this._drainUnlockWaiters();\n        }\n    }\n    _dispatchItem(item) {\n        const previousValue = this._value;\n        this._value -= item.weight;\n        item.resolve([previousValue, this._newReleaser(item.weight)]);\n    }\n    _newReleaser(weight) {\n        let called = false;\n        return () => {\n            if (called)\n                return;\n            called = true;\n            this.release(weight);\n        };\n    }\n    _drainUnlockWaiters() {\n        if (this._queue.length === 0) {\n            for (let weight = this._value; weight > 0; weight--) {\n                const waiters = this._weightedWaiters[weight - 1];\n                if (!waiters)\n                    continue;\n                waiters.forEach((waiter) => waiter.resolve());\n                this._weightedWaiters[weight - 1] = [];\n            }\n        }\n        else {\n            const queuedPriority = this._queue[0].priority;\n            for (let weight = this._value; weight > 0; weight--) {\n                const waiters = this._weightedWaiters[weight - 1];\n                if (!waiters)\n                    continue;\n                const i = waiters.findIndex((waiter) => waiter.priority <= queuedPriority);\n                (i === -1 ? waiters : waiters.splice(0, i))\n                    .forEach((waiter => waiter.resolve()));\n            }\n        }\n    }\n    _couldLockImmediately(weight, priority) {\n        return (this._queue.length === 0 || this._queue[0].priority < priority) &&\n            weight <= this._value;\n    }\n}\nfunction insertSorted(a, v) {\n    const i = findIndexFromEnd(a, (other) => v.priority <= other.priority);\n    a.splice(i + 1, 0, v);\n}\nfunction findIndexFromEnd(a, predicate) {\n    for (let i = a.length - 1; i >= 0; i--) {\n        if (predicate(a[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nvar __awaiter$1 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Mutex {\n    constructor(cancelError) {\n        this._semaphore = new Semaphore(1, cancelError);\n    }\n    acquire() {\n        return __awaiter$1(this, arguments, void 0, function* (priority = 0) {\n            const [, releaser] = yield this._semaphore.acquire(1, priority);\n            return releaser;\n        });\n    }\n    runExclusive(callback, priority = 0) {\n        return this._semaphore.runExclusive(() => callback(), 1, priority);\n    }\n    isLocked() {\n        return this._semaphore.isLocked();\n    }\n    waitForUnlock(priority = 0) {\n        return this._semaphore.waitForUnlock(1, priority);\n    }\n    release() {\n        if (this._semaphore.isLocked())\n            this._semaphore.release();\n    }\n    cancel() {\n        return this._semaphore.cancel();\n    }\n}\n\nvar __awaiter = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n    return {\n        acquire: (weightOrPriority, priority) => {\n            let weight;\n            if (isSemaphore(sync)) {\n                weight = weightOrPriority;\n            }\n            else {\n                weight = undefined;\n                priority = weightOrPriority;\n            }\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                let isTimeout = false;\n                const handle = setTimeout(() => {\n                    isTimeout = true;\n                    reject(timeoutError);\n                }, timeout);\n                try {\n                    const ticket = yield (isSemaphore(sync)\n                        ? sync.acquire(weight, priority)\n                        : sync.acquire(priority));\n                    if (isTimeout) {\n                        const release = Array.isArray(ticket) ? ticket[1] : ticket;\n                        release();\n                    }\n                    else {\n                        clearTimeout(handle);\n                        resolve(ticket);\n                    }\n                }\n                catch (e) {\n                    if (!isTimeout) {\n                        clearTimeout(handle);\n                        reject(e);\n                    }\n                }\n            }));\n        },\n        runExclusive(callback, weight, priority) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let release = () => undefined;\n                try {\n                    const ticket = yield this.acquire(weight, priority);\n                    if (Array.isArray(ticket)) {\n                        release = ticket[1];\n                        return yield callback(ticket[0]);\n                    }\n                    else {\n                        release = ticket;\n                        return yield callback();\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        },\n        release(weight) {\n            sync.release(weight);\n        },\n        cancel() {\n            return sync.cancel();\n        },\n        waitForUnlock: (weightOrPriority, priority) => {\n            let weight;\n            if (isSemaphore(sync)) {\n                weight = weightOrPriority;\n            }\n            else {\n                weight = undefined;\n                priority = weightOrPriority;\n            }\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => {\n                const handle = setTimeout(() => reject(timeoutError), timeout);\n                (isSemaphore(sync)\n                    ? sync.waitForUnlock(weight, priority)\n                    : sync.waitForUnlock(priority)).then(() => {\n                    clearTimeout(handle);\n                    resolve();\n                });\n            });\n        },\n        isLocked: () => sync.isLocked(),\n        getValue: () => sync.getValue(),\n        setValue: (value) => sync.setValue(value),\n    };\n}\nfunction isSemaphore(sync) {\n    return sync.getValue !== undefined;\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return withTimeout(sync, 0, alreadyAcquiredError);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/async-mutex/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyToAddress: () => (/* binding */ publicKeyToAddress)\n/* harmony export */ });\n/* harmony import */ var _utils_address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/address/getAddress.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var _utils_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/hash/keccak256.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/hash/keccak256.js\");\n\n\n/**\n * @description Converts an ECDSA public key to an address.\n *\n * @param publicKey The public key to convert.\n *\n * @returns The address.\n */\nfunction publicKeyToAddress(publicKey) {\n    const address = (0,_utils_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(`0x${publicKey.substring(4)}`).substring(26);\n    return (0,_utils_address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__.checksumAddress)(`0x${address}`);\n}\n//# sourceMappingURL=publicKeyToAddress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2FjY291bnRzL3V0aWxzL3B1YmxpY0tleVRvQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUU7QUFDVjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asb0JBQW9CLG1FQUFTLE1BQU0sdUJBQXVCO0FBQzFELFdBQVcsNkVBQWUsTUFBTSxRQUFRO0FBQ3hDO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC94bXRwLWpzL25vZGVfbW9kdWxlcy92aWVtL19lc20vYWNjb3VudHMvdXRpbHMvcHVibGljS2V5VG9BZGRyZXNzLmpzP2ViNGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hlY2tzdW1BZGRyZXNzLCB9IGZyb20gJy4uLy4uL3V0aWxzL2FkZHJlc3MvZ2V0QWRkcmVzcy5qcyc7XG5pbXBvcnQgeyBrZWNjYWsyNTYsIH0gZnJvbSAnLi4vLi4vdXRpbHMvaGFzaC9rZWNjYWsyNTYuanMnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgYW4gRUNEU0EgcHVibGljIGtleSB0byBhbiBhZGRyZXNzLlxuICpcbiAqIEBwYXJhbSBwdWJsaWNLZXkgVGhlIHB1YmxpYyBrZXkgdG8gY29udmVydC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgYWRkcmVzcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1YmxpY0tleVRvQWRkcmVzcyhwdWJsaWNLZXkpIHtcbiAgICBjb25zdCBhZGRyZXNzID0ga2VjY2FrMjU2KGAweCR7cHVibGljS2V5LnN1YnN0cmluZyg0KX1gKS5zdWJzdHJpbmcoMjYpO1xuICAgIHJldHVybiBjaGVja3N1bUFkZHJlc3MoYDB4JHthZGRyZXNzfWApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGljS2V5VG9BZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/constants/strings.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/constants/strings.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   presignMessagePrefix: () => (/* binding */ presignMessagePrefix)\n/* harmony export */ });\nconst presignMessagePrefix = '\\x19Ethereum Signed Message:\\n';\n//# sourceMappingURL=strings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2NvbnN0YW50cy9zdHJpbmdzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2NvbnN0YW50cy9zdHJpbmdzLmpzPzQ0NDkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHByZXNpZ25NZXNzYWdlUHJlZml4ID0gJ1xceDE5RXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6XFxuJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/constants/strings.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/address.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/address.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidAddressError: () => (/* binding */ InvalidAddressError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/base.js\");\n\nclass InvalidAddressError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ address }) {\n        super(`Address \"${address}\" is invalid.`, {\n            metaMessages: [\n                '- Address must be a hex value of 20 bytes (40 hex characters).',\n                '- Address must match its checksum counterpart.',\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidAddressError'\n        });\n    }\n}\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNDO0FBQy9CLGtDQUFrQywrQ0FBUztBQUNsRCxrQkFBa0IsU0FBUztBQUMzQiwwQkFBMEIsUUFBUTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvYWRkcmVzcy5qcz9iMjE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VFcnJvciB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY2xhc3MgSW52YWxpZEFkZHJlc3NFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBhZGRyZXNzIH0pIHtcbiAgICAgICAgc3VwZXIoYEFkZHJlc3MgXCIke2FkZHJlc3N9XCIgaXMgaW52YWxpZC5gLCB7XG4gICAgICAgICAgICBtZXRhTWVzc2FnZXM6IFtcbiAgICAgICAgICAgICAgICAnLSBBZGRyZXNzIG11c3QgYmUgYSBoZXggdmFsdWUgb2YgMjAgYnl0ZXMgKDQwIGhleCBjaGFyYWN0ZXJzKS4nLFxuICAgICAgICAgICAgICAgICctIEFkZHJlc3MgbXVzdCBtYXRjaCBpdHMgY2hlY2tzdW0gY291bnRlcnBhcnQuJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnSW52YWxpZEFkZHJlc3NFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/base.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/base.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseError: () => (/* binding */ BaseError)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/utils.js\");\n\nclass BaseError extends Error {\n    constructor(shortMessage, args = {}) {\n        super();\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metaMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'ViemError'\n        });\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getVersion)()\n        });\n        const details = args.cause instanceof BaseError\n            ? args.cause.details\n            : args.cause?.message\n                ? args.cause.message\n                : args.details;\n        const docsPath = args.cause instanceof BaseError\n            ? args.cause.docsPath || args.docsPath\n            : args.docsPath;\n        this.message = [\n            shortMessage || 'An error occurred.',\n            '',\n            ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n            ...(docsPath\n                ? [\n                    `Docs: https://viem.sh${docsPath}${args.docsSlug ? `#${args.docsSlug}` : ''}`,\n                ]\n                : []),\n            ...(details ? [`Details: ${details}`] : []),\n            `Version: ${this.version}`,\n        ].join('\\n');\n        if (args.cause)\n            this.cause = args.cause;\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        this.shortMessage = shortMessage;\n    }\n    walk(fn) {\n        return walk(this, fn);\n    }\n}\nfunction walk(err, fn) {\n    if (fn?.(err))\n        return err;\n    if (err && typeof err === 'object' && 'cause' in err)\n        return walk(err.cause, fn);\n    return fn ? null : err;\n}\n//# sourceMappingURL=base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdDO0FBQ2pDO0FBQ1AsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFEQUFVO0FBQzdCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFNBQVMsRUFBRSxvQkFBb0IsY0FBYyxPQUFPO0FBQ2hHO0FBQ0E7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQyx3QkFBd0IsYUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9iYXNlLmpzPzM5NzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VmVyc2lvbiB9IGZyb20gJy4vdXRpbHMuanMnO1xuZXhwb3J0IGNsYXNzIEJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihzaG9ydE1lc3NhZ2UsIGFyZ3MgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZXRhaWxzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRvY3NQYXRoXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1ldGFNZXNzYWdlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzaG9ydE1lc3NhZ2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1ZpZW1FcnJvcidcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZlcnNpb25cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGdldFZlcnNpb24oKVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZGV0YWlscyA9IGFyZ3MuY2F1c2UgaW5zdGFuY2VvZiBCYXNlRXJyb3JcbiAgICAgICAgICAgID8gYXJncy5jYXVzZS5kZXRhaWxzXG4gICAgICAgICAgICA6IGFyZ3MuY2F1c2U/Lm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA/IGFyZ3MuY2F1c2UubWVzc2FnZVxuICAgICAgICAgICAgICAgIDogYXJncy5kZXRhaWxzO1xuICAgICAgICBjb25zdCBkb2NzUGF0aCA9IGFyZ3MuY2F1c2UgaW5zdGFuY2VvZiBCYXNlRXJyb3JcbiAgICAgICAgICAgID8gYXJncy5jYXVzZS5kb2NzUGF0aCB8fCBhcmdzLmRvY3NQYXRoXG4gICAgICAgICAgICA6IGFyZ3MuZG9jc1BhdGg7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IFtcbiAgICAgICAgICAgIHNob3J0TWVzc2FnZSB8fCAnQW4gZXJyb3Igb2NjdXJyZWQuJyxcbiAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgLi4uKGFyZ3MubWV0YU1lc3NhZ2VzID8gWy4uLmFyZ3MubWV0YU1lc3NhZ2VzLCAnJ10gOiBbXSksXG4gICAgICAgICAgICAuLi4oZG9jc1BhdGhcbiAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgYERvY3M6IGh0dHBzOi8vdmllbS5zaCR7ZG9jc1BhdGh9JHthcmdzLmRvY3NTbHVnID8gYCMke2FyZ3MuZG9jc1NsdWd9YCA6ICcnfWAsXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIDogW10pLFxuICAgICAgICAgICAgLi4uKGRldGFpbHMgPyBbYERldGFpbHM6ICR7ZGV0YWlsc31gXSA6IFtdKSxcbiAgICAgICAgICAgIGBWZXJzaW9uOiAke3RoaXMudmVyc2lvbn1gLFxuICAgICAgICBdLmpvaW4oJ1xcbicpO1xuICAgICAgICBpZiAoYXJncy5jYXVzZSlcbiAgICAgICAgICAgIHRoaXMuY2F1c2UgPSBhcmdzLmNhdXNlO1xuICAgICAgICB0aGlzLmRldGFpbHMgPSBkZXRhaWxzO1xuICAgICAgICB0aGlzLmRvY3NQYXRoID0gZG9jc1BhdGg7XG4gICAgICAgIHRoaXMubWV0YU1lc3NhZ2VzID0gYXJncy5tZXRhTWVzc2FnZXM7XG4gICAgICAgIHRoaXMuc2hvcnRNZXNzYWdlID0gc2hvcnRNZXNzYWdlO1xuICAgIH1cbiAgICB3YWxrKGZuKSB7XG4gICAgICAgIHJldHVybiB3YWxrKHRoaXMsIGZuKTtcbiAgICB9XG59XG5mdW5jdGlvbiB3YWxrKGVyciwgZm4pIHtcbiAgICBpZiAoZm4/LihlcnIpKVxuICAgICAgICByZXR1cm4gZXJyO1xuICAgIGlmIChlcnIgJiYgdHlwZW9mIGVyciA9PT0gJ29iamVjdCcgJiYgJ2NhdXNlJyBpbiBlcnIpXG4gICAgICAgIHJldHVybiB3YWxrKGVyci5jYXVzZSwgZm4pO1xuICAgIHJldHVybiBmbiA/IG51bGwgOiBlcnI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/data.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/data.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidBytesLengthError: () => (/* binding */ InvalidBytesLengthError),\n/* harmony export */   SizeExceedsPaddingSizeError: () => (/* binding */ SizeExceedsPaddingSizeError),\n/* harmony export */   SliceOffsetOutOfBoundsError: () => (/* binding */ SliceOffsetOutOfBoundsError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/base.js\");\n\nclass SliceOffsetOutOfBoundsError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ offset, position, size, }) {\n        super(`Slice ${position === 'start' ? 'starting' : 'ending'} at offset \"${offset}\" is out-of-bounds (size: ${size}).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'SliceOffsetOutOfBoundsError'\n        });\n    }\n}\nclass SizeExceedsPaddingSizeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ size, targetSize, type, }) {\n        super(`${type.charAt(0).toUpperCase()}${type\n            .slice(1)\n            .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'SizeExceedsPaddingSizeError'\n        });\n    }\n}\nclass InvalidBytesLengthError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ size, targetSize, type, }) {\n        super(`${type.charAt(0).toUpperCase()}${type\n            .slice(1)\n            .toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidBytesLengthError'\n        });\n    }\n}\n//# sourceMappingURL=data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0M7QUFDL0IsMENBQTBDLCtDQUFTO0FBQzFELGtCQUFrQix5QkFBeUI7QUFDM0MsdUJBQXVCLDhDQUE4QyxhQUFhLE9BQU8sNEJBQTRCLEtBQUs7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ08sMENBQTBDLCtDQUFTO0FBQzFELGtCQUFrQix5QkFBeUI7QUFDM0MsaUJBQWlCLDZCQUE2QixFQUFFO0FBQ2hEO0FBQ0EsNEJBQTRCLFFBQVEsS0FBSywwQkFBMEIsV0FBVztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDTyxzQ0FBc0MsK0NBQVM7QUFDdEQsa0JBQWtCLHlCQUF5QjtBQUMzQyxpQkFBaUIsNkJBQTZCLEVBQUU7QUFDaEQ7QUFDQSw0QkFBNEIsb0JBQW9CLFlBQVksRUFBRSxNQUFNLGVBQWUsTUFBTSxFQUFFLE1BQU07QUFDakc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC94bXRwLWpzL25vZGVfbW9kdWxlcy92aWVtL19lc20vZXJyb3JzL2RhdGEuanM/ZTUzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRXJyb3IgfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNsYXNzIFNsaWNlT2Zmc2V0T3V0T2ZCb3VuZHNFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBvZmZzZXQsIHBvc2l0aW9uLCBzaXplLCB9KSB7XG4gICAgICAgIHN1cGVyKGBTbGljZSAke3Bvc2l0aW9uID09PSAnc3RhcnQnID8gJ3N0YXJ0aW5nJyA6ICdlbmRpbmcnfSBhdCBvZmZzZXQgXCIke29mZnNldH1cIiBpcyBvdXQtb2YtYm91bmRzIChzaXplOiAke3NpemV9KS5gKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1NsaWNlT2Zmc2V0T3V0T2ZCb3VuZHNFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFNpemVFeGNlZWRzUGFkZGluZ1NpemVFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBzaXplLCB0YXJnZXRTaXplLCB0eXBlLCB9KSB7XG4gICAgICAgIHN1cGVyKGAke3R5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCl9JHt0eXBlXG4gICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpfSBzaXplICgke3NpemV9KSBleGNlZWRzIHBhZGRpbmcgc2l6ZSAoJHt0YXJnZXRTaXplfSkuYCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQnl0ZXNMZW5ndGhFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBzaXplLCB0YXJnZXRTaXplLCB0eXBlLCB9KSB7XG4gICAgICAgIHN1cGVyKGAke3R5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCl9JHt0eXBlXG4gICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpfSBpcyBleHBlY3RlZCB0byBiZSAke3RhcmdldFNpemV9ICR7dHlwZX0gbG9uZywgYnV0IGlzICR7c2l6ZX0gJHt0eXBlfSBsb25nLmApO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnSW52YWxpZEJ5dGVzTGVuZ3RoRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/encoding.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/encoding.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntegerOutOfRangeError: () => (/* binding */ IntegerOutOfRangeError),\n/* harmony export */   InvalidBytesBooleanError: () => (/* binding */ InvalidBytesBooleanError),\n/* harmony export */   InvalidHexBooleanError: () => (/* binding */ InvalidHexBooleanError),\n/* harmony export */   InvalidHexValueError: () => (/* binding */ InvalidHexValueError),\n/* harmony export */   SizeOverflowError: () => (/* binding */ SizeOverflowError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/base.js\");\n\nclass IntegerOutOfRangeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ max, min, signed, size, value, }) {\n        super(`Number \"${value}\" is not in safe ${size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'IntegerOutOfRangeError'\n        });\n    }\n}\nclass InvalidBytesBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(bytes) {\n        super(`Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidBytesBooleanError'\n        });\n    }\n}\nclass InvalidHexBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(hex) {\n        super(`Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidHexBooleanError'\n        });\n    }\n}\nclass InvalidHexValueError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(value) {\n        super(`Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidHexValueError'\n        });\n    }\n}\nclass SizeOverflowError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ givenSize, maxSize }) {\n        super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'SizeOverflowError'\n        });\n    }\n}\n//# sourceMappingURL=encoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9lbmNvZGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0M7QUFDL0IscUNBQXFDLCtDQUFTO0FBQ3JELGtCQUFrQixnQ0FBZ0M7QUFDbEQseUJBQXlCLE1BQU0sbUJBQW1CLFVBQVUsU0FBUyxPQUFPLGdDQUFnQyxPQUFPLGdCQUFnQixVQUFVLEtBQUssS0FBSyxJQUFJLGVBQWUsSUFBSSxHQUFHO0FBQ2pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNPLHVDQUF1QywrQ0FBUztBQUN2RDtBQUNBLDhCQUE4QixNQUFNO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNPLHFDQUFxQywrQ0FBUztBQUNyRDtBQUNBLDRCQUE0QixJQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNPLG1DQUFtQywrQ0FBUztBQUNuRDtBQUNBLDRCQUE0QixNQUFNLHNCQUFzQixhQUFhO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNPLGdDQUFnQywrQ0FBUztBQUNoRCxrQkFBa0Isb0JBQW9CO0FBQ3RDLG9DQUFvQyxTQUFTLHFCQUFxQixXQUFXO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9lbmNvZGluZy5qcz82ZTQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VFcnJvciB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY2xhc3MgSW50ZWdlck91dE9mUmFuZ2VFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBtYXgsIG1pbiwgc2lnbmVkLCBzaXplLCB2YWx1ZSwgfSkge1xuICAgICAgICBzdXBlcihgTnVtYmVyIFwiJHt2YWx1ZX1cIiBpcyBub3QgaW4gc2FmZSAke3NpemUgPyBgJHtzaXplICogOH0tYml0ICR7c2lnbmVkID8gJ3NpZ25lZCcgOiAndW5zaWduZWQnfSBgIDogJyd9aW50ZWdlciByYW5nZSAke21heCA/IGAoJHttaW59IHRvICR7bWF4fSlgIDogYChhYm92ZSAke21pbn0pYH1gKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ0ludGVnZXJPdXRPZlJhbmdlRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQnl0ZXNCb29sZWFuRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGJ5dGVzKSB7XG4gICAgICAgIHN1cGVyKGBCeXRlcyB2YWx1ZSBcIiR7Ynl0ZXN9XCIgaXMgbm90IGEgdmFsaWQgYm9vbGVhbi4gVGhlIGJ5dGVzIGFycmF5IG11c3QgY29udGFpbiBhIHNpbmdsZSBieXRlIG9mIGVpdGhlciBhIDAgb3IgMSB2YWx1ZS5gKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ0ludmFsaWRCeXRlc0Jvb2xlYW5FcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRIZXhCb29sZWFuRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGhleCkge1xuICAgICAgICBzdXBlcihgSGV4IHZhbHVlIFwiJHtoZXh9XCIgaXMgbm90IGEgdmFsaWQgYm9vbGVhbi4gVGhlIGhleCB2YWx1ZSBtdXN0IGJlIFwiMHgwXCIgKGZhbHNlKSBvciBcIjB4MVwiICh0cnVlKS5gKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ0ludmFsaWRIZXhCb29sZWFuRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkSGV4VmFsdWVFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgc3VwZXIoYEhleCB2YWx1ZSBcIiR7dmFsdWV9XCIgaXMgYW4gb2RkIGxlbmd0aCAoJHt2YWx1ZS5sZW5ndGh9KS4gSXQgbXVzdCBiZSBhbiBldmVuIGxlbmd0aC5gKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ0ludmFsaWRIZXhWYWx1ZUVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2l6ZU92ZXJmbG93RXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgZ2l2ZW5TaXplLCBtYXhTaXplIH0pIHtcbiAgICAgICAgc3VwZXIoYFNpemUgY2Fubm90IGV4Y2VlZCAke21heFNpemV9IGJ5dGVzLiBHaXZlbiBzaXplOiAke2dpdmVuU2l6ZX0gYnl0ZXMuYCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdTaXplT3ZlcmZsb3dFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getContractAddress: () => (/* binding */ getContractAddress),\n/* harmony export */   getUrl: () => (/* binding */ getUrl),\n/* harmony export */   getVersion: () => (/* binding */ getVersion)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/version.js\");\n\nconst getContractAddress = (address) => address;\nconst getUrl = (url) => url;\nconst getVersion = () => `viem@${_version_js__WEBPACK_IMPORTED_MODULE_0__.version}`;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVDO0FBQ2hDO0FBQ0E7QUFDQSxpQ0FBaUMsZ0RBQU8sQ0FBQztBQUNoRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvdXRpbHMuanM/YmVhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uLmpzJztcbmV4cG9ydCBjb25zdCBnZXRDb250cmFjdEFkZHJlc3MgPSAoYWRkcmVzcykgPT4gYWRkcmVzcztcbmV4cG9ydCBjb25zdCBnZXRVcmwgPSAodXJsKSA9PiB1cmw7XG5leHBvcnQgY29uc3QgZ2V0VmVyc2lvbiA9ICgpID0+IGB2aWVtQCR7dmVyc2lvbn1gO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/version.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/version.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = '2.7.15';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy92ZXJzaW9uLmpzPzE4OTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMi43LjE1Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/getAddress.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/getAddress.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checksumAddress: () => (/* binding */ checksumAddress),\n/* harmony export */   getAddress: () => (/* binding */ getAddress)\n/* harmony export */ });\n/* harmony import */ var _errors_address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/address.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/address.js\");\n/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoding/toBytes.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var _hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hash/keccak256.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/hash/keccak256.js\");\n/* harmony import */ var _isAddress_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isAddress.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/isAddress.js\");\n\n\n\n\nfunction checksumAddress(address_, chainId) {\n    const hexAddress = chainId\n        ? `${chainId}${address_.toLowerCase()}`\n        : address_.substring(2).toLowerCase();\n    const hash = (0,_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_1__.stringToBytes)(hexAddress), 'bytes');\n    const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split('');\n    for (let i = 0; i < 40; i += 2) {\n        if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n            address[i] = address[i].toUpperCase();\n        }\n        if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n            address[i + 1] = address[i + 1].toUpperCase();\n        }\n    }\n    return `0x${address.join('')}`;\n}\nfunction getAddress(address, chainId) {\n    if (!(0,_isAddress_js__WEBPACK_IMPORTED_MODULE_2__.isAddress)(address))\n        throw new _errors_address_js__WEBPACK_IMPORTED_MODULE_3__.InvalidAddressError({ address });\n    return checksumAddress(address, chainId);\n}\n//# sourceMappingURL=getAddress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2FkZHJlc3MvZ2V0QWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBOEQ7QUFDTjtBQUNQO0FBQ047QUFDcEM7QUFDUDtBQUNBLGFBQWEsUUFBUSxFQUFFLHVCQUF1QjtBQUM5QztBQUNBLGlCQUFpQiw2REFBUyxDQUFDLG1FQUFhO0FBQ3hDLHVEQUF1RCxRQUFRO0FBQy9ELG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNPO0FBQ1AsU0FBUyx3REFBUztBQUNsQixrQkFBa0IsbUVBQW1CLEdBQUcsU0FBUztBQUNqRDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC94bXRwLWpzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvYWRkcmVzcy9nZXRBZGRyZXNzLmpzPzJhMzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW52YWxpZEFkZHJlc3NFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycy9hZGRyZXNzLmpzJztcbmltcG9ydCB7IHN0cmluZ1RvQnl0ZXMsIH0gZnJvbSAnLi4vZW5jb2RpbmcvdG9CeXRlcy5qcyc7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tICcuLi9oYXNoL2tlY2NhazI1Ni5qcyc7XG5pbXBvcnQgeyBpc0FkZHJlc3MgfSBmcm9tICcuL2lzQWRkcmVzcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tzdW1BZGRyZXNzKGFkZHJlc3NfLCBjaGFpbklkKSB7XG4gICAgY29uc3QgaGV4QWRkcmVzcyA9IGNoYWluSWRcbiAgICAgICAgPyBgJHtjaGFpbklkfSR7YWRkcmVzc18udG9Mb3dlckNhc2UoKX1gXG4gICAgICAgIDogYWRkcmVzc18uc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgaGFzaCA9IGtlY2NhazI1NihzdHJpbmdUb0J5dGVzKGhleEFkZHJlc3MpLCAnYnl0ZXMnKTtcbiAgICBjb25zdCBhZGRyZXNzID0gKGNoYWluSWQgPyBoZXhBZGRyZXNzLnN1YnN0cmluZyhgJHtjaGFpbklkfTB4YC5sZW5ndGgpIDogaGV4QWRkcmVzcykuc3BsaXQoJycpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDA7IGkgKz0gMikge1xuICAgICAgICBpZiAoaGFzaFtpID4+IDFdID4+IDQgPj0gOCAmJiBhZGRyZXNzW2ldKSB7XG4gICAgICAgICAgICBhZGRyZXNzW2ldID0gYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaGFzaFtpID4+IDFdICYgMHgwZikgPj0gOCAmJiBhZGRyZXNzW2kgKyAxXSkge1xuICAgICAgICAgICAgYWRkcmVzc1tpICsgMV0gPSBhZGRyZXNzW2kgKyAxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBgMHgke2FkZHJlc3Muam9pbignJyl9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZGRyZXNzKGFkZHJlc3MsIGNoYWluSWQpIHtcbiAgICBpZiAoIWlzQWRkcmVzcyhhZGRyZXNzKSlcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBZGRyZXNzRXJyb3IoeyBhZGRyZXNzIH0pO1xuICAgIHJldHVybiBjaGVja3N1bUFkZHJlc3MoYWRkcmVzcywgY2hhaW5JZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/getAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/isAddress.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/isAddress.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAddress: () => (/* binding */ isAddress)\n/* harmony export */ });\n/* harmony import */ var _lru_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lru.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/lru.js\");\n/* harmony import */ var _getAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getAddress.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/getAddress.js\");\n\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/;\nconst isAddressCache = /*#__PURE__*/ new _lru_js__WEBPACK_IMPORTED_MODULE_0__.LruMap(8192);\nfunction isAddress(address, { strict = true } = {}) {\n    if (isAddressCache.has(address))\n        return isAddressCache.get(address);\n    const result = (() => {\n        if (!addressRegex.test(address))\n            return false;\n        if (address.toLowerCase() === address)\n            return true;\n        if (strict)\n            return (0,_getAddress_js__WEBPACK_IMPORTED_MODULE_1__.checksumAddress)(address) === address;\n        return true;\n    })();\n    isAddressCache.set(address, result);\n    return result;\n}\n//# sourceMappingURL=isAddress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2FkZHJlc3MvaXNBZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUNlO0FBQ2xELHFDQUFxQyxHQUFHO0FBQ3hDLHlDQUF5QywyQ0FBTTtBQUN4Qyw4QkFBOEIsZ0JBQWdCLElBQUk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwrREFBZTtBQUNsQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9hZGRyZXNzL2lzQWRkcmVzcy5qcz9kMDc3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExydU1hcCB9IGZyb20gJy4uL2xydS5qcyc7XG5pbXBvcnQgeyBjaGVja3N1bUFkZHJlc3MgfSBmcm9tICcuL2dldEFkZHJlc3MuanMnO1xuY29uc3QgYWRkcmVzc1JlZ2V4ID0gL14weFthLWZBLUYwLTldezQwfSQvO1xuY29uc3QgaXNBZGRyZXNzQ2FjaGUgPSAvKiNfX1BVUkVfXyovIG5ldyBMcnVNYXAoODE5Mik7XG5leHBvcnQgZnVuY3Rpb24gaXNBZGRyZXNzKGFkZHJlc3MsIHsgc3RyaWN0ID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBpZiAoaXNBZGRyZXNzQ2FjaGUuaGFzKGFkZHJlc3MpKVxuICAgICAgICByZXR1cm4gaXNBZGRyZXNzQ2FjaGUuZ2V0KGFkZHJlc3MpO1xuICAgIGNvbnN0IHJlc3VsdCA9ICgoKSA9PiB7XG4gICAgICAgIGlmICghYWRkcmVzc1JlZ2V4LnRlc3QoYWRkcmVzcykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChhZGRyZXNzLnRvTG93ZXJDYXNlKCkgPT09IGFkZHJlc3MpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHN0cmljdClcbiAgICAgICAgICAgIHJldHVybiBjaGVja3N1bUFkZHJlc3MoYWRkcmVzcykgPT09IGFkZHJlc3M7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pKCk7XG4gICAgaXNBZGRyZXNzQ2FjaGUuc2V0KGFkZHJlc3MsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/isAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/isAddressEqual.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/isAddressEqual.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAddressEqual: () => (/* binding */ isAddressEqual)\n/* harmony export */ });\n/* harmony import */ var _errors_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors/address.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/address.js\");\n/* harmony import */ var _isAddress_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isAddress.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/isAddress.js\");\n\n\nfunction isAddressEqual(a, b) {\n    if (!(0,_isAddress_js__WEBPACK_IMPORTED_MODULE_0__.isAddress)(a, { strict: false }))\n        throw new _errors_address_js__WEBPACK_IMPORTED_MODULE_1__.InvalidAddressError({ address: a });\n    if (!(0,_isAddress_js__WEBPACK_IMPORTED_MODULE_0__.isAddress)(b, { strict: false }))\n        throw new _errors_address_js__WEBPACK_IMPORTED_MODULE_1__.InvalidAddressError({ address: b });\n    return a.toLowerCase() === b.toLowerCase();\n}\n//# sourceMappingURL=isAddressEqual.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2FkZHJlc3MvaXNBZGRyZXNzRXF1YWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStEO0FBQ3BCO0FBQ3BDO0FBQ1AsU0FBUyx3REFBUyxNQUFNLGVBQWU7QUFDdkMsa0JBQWtCLG1FQUFtQixHQUFHLFlBQVk7QUFDcEQsU0FBUyx3REFBUyxNQUFNLGVBQWU7QUFDdkMsa0JBQWtCLG1FQUFtQixHQUFHLFlBQVk7QUFDcEQ7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2FkZHJlc3MvaXNBZGRyZXNzRXF1YWwuanM/MWM5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnZhbGlkQWRkcmVzc0Vycm9yLCB9IGZyb20gJy4uLy4uL2Vycm9ycy9hZGRyZXNzLmpzJztcbmltcG9ydCB7IGlzQWRkcmVzcyB9IGZyb20gJy4vaXNBZGRyZXNzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc0FkZHJlc3NFcXVhbChhLCBiKSB7XG4gICAgaWYgKCFpc0FkZHJlc3MoYSwgeyBzdHJpY3Q6IGZhbHNlIH0pKVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFkZHJlc3NFcnJvcih7IGFkZHJlc3M6IGEgfSk7XG4gICAgaWYgKCFpc0FkZHJlc3MoYiwgeyBzdHJpY3Q6IGZhbHNlIH0pKVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFkZHJlc3NFcnJvcih7IGFkZHJlc3M6IGIgfSk7XG4gICAgcmV0dXJuIGEudG9Mb3dlckNhc2UoKSA9PT0gYi50b0xvd2VyQ2FzZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBZGRyZXNzRXF1YWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/isAddressEqual.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/concat.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/concat.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   concatHex: () => (/* binding */ concatHex)\n/* harmony export */ });\nfunction concat(values) {\n    if (typeof values[0] === 'string')\n        return concatHex(values);\n    return concatBytes(values);\n}\nfunction concatBytes(values) {\n    let length = 0;\n    for (const arr of values) {\n        length += arr.length;\n    }\n    const result = new Uint8Array(length);\n    let offset = 0;\n    for (const arr of values) {\n        result.set(arr, offset);\n        offset += arr.length;\n    }\n    return result;\n}\nfunction concatHex(values) {\n    return `0x${values.reduce((acc, x) => acc + x.replace('0x', ''), '')}`;\n}\n//# sourceMappingURL=concat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvY29uY2F0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0JBQWdCLHlEQUF5RDtBQUN6RTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvY29uY2F0LmpzPzc3NTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdCh2YWx1ZXMpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlc1swXSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBjb25jYXRIZXgodmFsdWVzKTtcbiAgICByZXR1cm4gY29uY2F0Qnl0ZXModmFsdWVzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRCeXRlcyh2YWx1ZXMpIHtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBmb3IgKGNvbnN0IGFyciBvZiB2YWx1ZXMpIHtcbiAgICAgICAgbGVuZ3RoICs9IGFyci5sZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChjb25zdCBhcnIgb2YgdmFsdWVzKSB7XG4gICAgICAgIHJlc3VsdC5zZXQoYXJyLCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gYXJyLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRIZXgodmFsdWVzKSB7XG4gICAgcmV0dXJuIGAweCR7dmFsdWVzLnJlZHVjZSgoYWNjLCB4KSA9PiBhY2MgKyB4LnJlcGxhY2UoJzB4JywgJycpLCAnJyl9YDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/concat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/isHex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/isHex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHex: () => (/* binding */ isHex)\n/* harmony export */ });\nfunction isHex(value, { strict = true } = {}) {\n    if (!value)\n        return false;\n    if (typeof value !== 'string')\n        return false;\n    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x');\n}\n//# sourceMappingURL=isHex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvaXNIZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLHdCQUF3QixnQkFBZ0IsSUFBSTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL2lzSGV4LmpzPzYzMWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzSGV4KHZhbHVlLCB7IHN0cmljdCA9IHRydWUgfSA9IHt9KSB7XG4gICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHN0cmljdCA/IC9eMHhbMC05YS1mQS1GXSokLy50ZXN0KHZhbHVlKSA6IHZhbHVlLnN0YXJ0c1dpdGgoJzB4Jyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0hleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/isHex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/pad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/pad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pad: () => (/* binding */ pad),\n/* harmony export */   padBytes: () => (/* binding */ padBytes),\n/* harmony export */   padHex: () => (/* binding */ padHex)\n/* harmony export */ });\n/* harmony import */ var _errors_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors/data.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/data.js\");\n\nfunction pad(hexOrBytes, { dir, size = 32 } = {}) {\n    if (typeof hexOrBytes === 'string')\n        return padHex(hexOrBytes, { dir, size });\n    return padBytes(hexOrBytes, { dir, size });\n}\nfunction padHex(hex_, { dir, size = 32 } = {}) {\n    if (size === null)\n        return hex_;\n    const hex = hex_.replace('0x', '');\n    if (hex.length > size * 2)\n        throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({\n            size: Math.ceil(hex.length / 2),\n            targetSize: size,\n            type: 'hex',\n        });\n    return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}`;\n}\nfunction padBytes(bytes, { dir, size = 32 } = {}) {\n    if (size === null)\n        return bytes;\n    if (bytes.length > size)\n        throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({\n            size: bytes.length,\n            targetSize: size,\n            type: 'bytes',\n        });\n    const paddedBytes = new Uint8Array(size);\n    for (let i = 0; i < size; i++) {\n        const padEnd = dir === 'right';\n        paddedBytes[padEnd ? i : size - i - 1] =\n            bytes[padEnd ? i : bytes.length - i - 1];\n    }\n    return paddedBytes;\n}\n//# sourceMappingURL=pad.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvcGFkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0U7QUFDN0QsMkJBQTJCLGlCQUFpQixJQUFJO0FBQ3ZEO0FBQ0Esb0NBQW9DLFdBQVc7QUFDL0Msa0NBQWtDLFdBQVc7QUFDN0M7QUFDTyx3QkFBd0IsaUJBQWlCLElBQUk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0VBQTJCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxnQkFBZ0IsNERBQTREO0FBQzVFO0FBQ08sMkJBQTJCLGlCQUFpQixJQUFJO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3RUFBMkI7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC94bXRwLWpzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvZGF0YS9wYWQuanM/YTIwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IsIH0gZnJvbSAnLi4vLi4vZXJyb3JzL2RhdGEuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHBhZChoZXhPckJ5dGVzLCB7IGRpciwgc2l6ZSA9IDMyIH0gPSB7fSkge1xuICAgIGlmICh0eXBlb2YgaGV4T3JCeXRlcyA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBwYWRIZXgoaGV4T3JCeXRlcywgeyBkaXIsIHNpemUgfSk7XG4gICAgcmV0dXJuIHBhZEJ5dGVzKGhleE9yQnl0ZXMsIHsgZGlyLCBzaXplIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhZEhleChoZXhfLCB7IGRpciwgc2l6ZSA9IDMyIH0gPSB7fSkge1xuICAgIGlmIChzaXplID09PSBudWxsKVxuICAgICAgICByZXR1cm4gaGV4XztcbiAgICBjb25zdCBoZXggPSBoZXhfLnJlcGxhY2UoJzB4JywgJycpO1xuICAgIGlmIChoZXgubGVuZ3RoID4gc2l6ZSAqIDIpXG4gICAgICAgIHRocm93IG5ldyBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3Ioe1xuICAgICAgICAgICAgc2l6ZTogTWF0aC5jZWlsKGhleC5sZW5ndGggLyAyKSxcbiAgICAgICAgICAgIHRhcmdldFNpemU6IHNpemUsXG4gICAgICAgICAgICB0eXBlOiAnaGV4JyxcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGAweCR7aGV4W2RpciA9PT0gJ3JpZ2h0JyA/ICdwYWRFbmQnIDogJ3BhZFN0YXJ0J10oc2l6ZSAqIDIsICcwJyl9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWRCeXRlcyhieXRlcywgeyBkaXIsIHNpemUgPSAzMiB9ID0ge30pIHtcbiAgICBpZiAoc2l6ZSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIGlmIChieXRlcy5sZW5ndGggPiBzaXplKVxuICAgICAgICB0aHJvdyBuZXcgU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yKHtcbiAgICAgICAgICAgIHNpemU6IGJ5dGVzLmxlbmd0aCxcbiAgICAgICAgICAgIHRhcmdldFNpemU6IHNpemUsXG4gICAgICAgICAgICB0eXBlOiAnYnl0ZXMnLFxuICAgICAgICB9KTtcbiAgICBjb25zdCBwYWRkZWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhZEVuZCA9IGRpciA9PT0gJ3JpZ2h0JztcbiAgICAgICAgcGFkZGVkQnl0ZXNbcGFkRW5kID8gaSA6IHNpemUgLSBpIC0gMV0gPVxuICAgICAgICAgICAgYnl0ZXNbcGFkRW5kID8gaSA6IGJ5dGVzLmxlbmd0aCAtIGkgLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhZGRlZEJ5dGVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/pad.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/size.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/size.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   size: () => (/* binding */ size)\n/* harmony export */ });\n/* harmony import */ var _isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/isHex.js\");\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nfunction size(value) {\n    if ((0,_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(value, { strict: false }))\n        return Math.ceil((value.length - 2) / 2);\n    return value.length;\n}\n//# sourceMappingURL=size.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvc2l6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFFBQVEsZ0RBQUssVUFBVSxlQUFlO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvc2l6ZS5qcz8xNmQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSGV4IH0gZnJvbSAnLi9pc0hleC5qcyc7XG4vKipcbiAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIHNpemUgb2YgdGhlIHZhbHVlIChpbiBieXRlcykuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSAoaGV4IG9yIGJ5dGUgYXJyYXkpIHRvIHJldHJpZXZlIHRoZSBzaXplIG9mLlxuICogQHJldHVybnMgVGhlIHNpemUgb2YgdGhlIHZhbHVlIChpbiBieXRlcykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplKHZhbHVlKSB7XG4gICAgaWYgKGlzSGV4KHZhbHVlLCB7IHN0cmljdDogZmFsc2UgfSkpXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoKHZhbHVlLmxlbmd0aCAtIDIpIC8gMik7XG4gICAgcmV0dXJuIHZhbHVlLmxlbmd0aDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpemUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/size.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/trim.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/trim.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trim: () => (/* binding */ trim)\n/* harmony export */ });\nfunction trim(hexOrBytes, { dir = 'left' } = {}) {\n    let data = typeof hexOrBytes === 'string' ? hexOrBytes.replace('0x', '') : hexOrBytes;\n    let sliceLength = 0;\n    for (let i = 0; i < data.length - 1; i++) {\n        if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0')\n            sliceLength++;\n        else\n            break;\n    }\n    data =\n        dir === 'left'\n            ? data.slice(sliceLength)\n            : data.slice(0, data.length - sliceLength);\n    if (typeof hexOrBytes === 'string') {\n        if (data.length === 1 && dir === 'right')\n            data = `${data}0`;\n        return `0x${data.length % 2 === 1 ? `0${data}` : data}`;\n    }\n    return data;\n}\n//# sourceMappingURL=trim.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2RhdGEvdHJpbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sNEJBQTRCLGVBQWUsSUFBSTtBQUN0RDtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLEtBQUs7QUFDM0Isb0JBQW9CLDRCQUE0QixLQUFLLFNBQVM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC94bXRwLWpzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvZGF0YS90cmltLmpzP2MxOWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRyaW0oaGV4T3JCeXRlcywgeyBkaXIgPSAnbGVmdCcgfSA9IHt9KSB7XG4gICAgbGV0IGRhdGEgPSB0eXBlb2YgaGV4T3JCeXRlcyA9PT0gJ3N0cmluZycgPyBoZXhPckJ5dGVzLnJlcGxhY2UoJzB4JywgJycpIDogaGV4T3JCeXRlcztcbiAgICBsZXQgc2xpY2VMZW5ndGggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgaWYgKGRhdGFbZGlyID09PSAnbGVmdCcgPyBpIDogZGF0YS5sZW5ndGggLSBpIC0gMV0udG9TdHJpbmcoKSA9PT0gJzAnKVxuICAgICAgICAgICAgc2xpY2VMZW5ndGgrKztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRhdGEgPVxuICAgICAgICBkaXIgPT09ICdsZWZ0J1xuICAgICAgICAgICAgPyBkYXRhLnNsaWNlKHNsaWNlTGVuZ3RoKVxuICAgICAgICAgICAgOiBkYXRhLnNsaWNlKDAsIGRhdGEubGVuZ3RoIC0gc2xpY2VMZW5ndGgpO1xuICAgIGlmICh0eXBlb2YgaGV4T3JCeXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAxICYmIGRpciA9PT0gJ3JpZ2h0JylcbiAgICAgICAgICAgIGRhdGEgPSBgJHtkYXRhfTBgO1xuICAgICAgICByZXR1cm4gYDB4JHtkYXRhLmxlbmd0aCAlIDIgPT09IDEgPyBgMCR7ZGF0YX1gIDogZGF0YX1gO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyaW0uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/trim.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/fromHex.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/fromHex.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertSize: () => (/* binding */ assertSize),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   hexToBigInt: () => (/* binding */ hexToBigInt),\n/* harmony export */   hexToBool: () => (/* binding */ hexToBool),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   hexToString: () => (/* binding */ hexToString)\n/* harmony export */ });\n/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors/encoding.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/encoding.js\");\n/* harmony import */ var _data_size_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/size.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/size.js\");\n/* harmony import */ var _data_trim_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/trim.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/trim.js\");\n/* harmony import */ var _toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toBytes.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n\n\n\n\nfunction assertSize(hexOrBytes, { size }) {\n    if ((0,_data_size_js__WEBPACK_IMPORTED_MODULE_0__.size)(hexOrBytes) > size)\n        throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__.SizeOverflowError({\n            givenSize: (0,_data_size_js__WEBPACK_IMPORTED_MODULE_0__.size)(hexOrBytes),\n            maxSize: size,\n        });\n}\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */\nfunction fromHex(hex, toOrOpts) {\n    const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts;\n    const to = opts.to;\n    if (to === 'number')\n        return hexToNumber(hex, opts);\n    if (to === 'bigint')\n        return hexToBigInt(hex, opts);\n    if (to === 'string')\n        return hexToString(hex, opts);\n    if (to === 'boolean')\n        return hexToBool(hex, opts);\n    return (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(hex, opts);\n}\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */\nfunction hexToBigInt(hex, opts = {}) {\n    const { signed } = opts;\n    if (opts.size)\n        assertSize(hex, { size: opts.size });\n    const value = BigInt(hex);\n    if (!signed)\n        return value;\n    const size = (hex.length - 2) / 2;\n    const max = (1n << (BigInt(size) * 8n - 1n)) - 1n;\n    if (value <= max)\n        return value;\n    return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n;\n}\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */\nfunction hexToBool(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        assertSize(hex, { size: opts.size });\n        hex = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex);\n    }\n    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex) === '0x00')\n        return false;\n    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex) === '0x01')\n        return true;\n    throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__.InvalidHexBooleanError(hex);\n}\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */\nfunction hexToNumber(hex, opts = {}) {\n    return Number(hexToBigInt(hex, opts));\n}\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */\nfunction hexToString(hex, opts = {}) {\n    let bytes = (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(hex);\n    if (opts.size) {\n        assertSize(bytes, { size: opts.size });\n        bytes = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(bytes, { dir: 'right' });\n    }\n    return new TextDecoder().decode(bytes);\n}\n//# sourceMappingURL=fromHex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2VuY29kaW5nL2Zyb21IZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFzRjtBQUN0QztBQUNUO0FBQ0c7QUFDbkMsa0NBQWtDLE1BQU07QUFDL0MsUUFBUSxtREFBSztBQUNiLGtCQUFrQixrRUFBaUI7QUFDbkMsdUJBQXVCLG1EQUFLO0FBQzVCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNPO0FBQ1Asa0RBQWtELGVBQWU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1REFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCLHVDQUF1QyxjQUFjO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQixvR0FBb0csVUFBVTtBQUM5RztBQUNBO0FBQ08sbUNBQW1DO0FBQzFDLFlBQVksU0FBUztBQUNyQjtBQUNBLDBCQUEwQixpQkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsNEJBQTRCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFlBQVk7QUFDeEIsa0dBQWtHLFVBQVU7QUFDNUc7QUFDQTtBQUNPLGtDQUFrQztBQUN6QztBQUNBO0FBQ0EsMEJBQTBCLGlCQUFpQjtBQUMzQyxjQUFjLG1EQUFJO0FBQ2xCO0FBQ0EsUUFBUSxtREFBSTtBQUNaO0FBQ0EsUUFBUSxtREFBSTtBQUNaO0FBQ0EsY0FBYyx1RUFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQixvR0FBb0csVUFBVTtBQUM5RztBQUNBO0FBQ08sbUNBQW1DO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDTyxtQ0FBbUM7QUFDMUMsZ0JBQWdCLHVEQUFVO0FBQzFCO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QyxnQkFBZ0IsbURBQUksVUFBVSxjQUFjO0FBQzVDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2VuY29kaW5nL2Zyb21IZXguanM/MzkxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnZhbGlkSGV4Qm9vbGVhbkVycm9yLCBTaXplT3ZlcmZsb3dFcnJvciwgfSBmcm9tICcuLi8uLi9lcnJvcnMvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgc2l6ZSBhcyBzaXplXyB9IGZyb20gJy4uL2RhdGEvc2l6ZS5qcyc7XG5pbXBvcnQgeyB0cmltIH0gZnJvbSAnLi4vZGF0YS90cmltLmpzJztcbmltcG9ydCB7IGhleFRvQnl0ZXMgfSBmcm9tICcuL3RvQnl0ZXMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFNpemUoaGV4T3JCeXRlcywgeyBzaXplIH0pIHtcbiAgICBpZiAoc2l6ZV8oaGV4T3JCeXRlcykgPiBzaXplKVxuICAgICAgICB0aHJvdyBuZXcgU2l6ZU92ZXJmbG93RXJyb3Ioe1xuICAgICAgICAgICAgZ2l2ZW5TaXplOiBzaXplXyhoZXhPckJ5dGVzKSxcbiAgICAgICAgICAgIG1heFNpemU6IHNpemUsXG4gICAgICAgIH0pO1xufVxuLyoqXG4gKiBEZWNvZGVzIGEgaGV4IHN0cmluZyBpbnRvIGEgc3RyaW5nLCBudW1iZXIsIGJpZ2ludCwgYm9vbGVhbiwgb3IgYnl0ZSBhcnJheS5cbiAqXG4gKiAtIERvY3M6IGh0dHBzOi8vdmllbS5zaC9kb2NzL3V0aWxpdGllcy9mcm9tSGV4XG4gKiAtIEV4YW1wbGU6IGh0dHBzOi8vdmllbS5zaC9kb2NzL3V0aWxpdGllcy9mcm9tSGV4I3VzYWdlXG4gKlxuICogQHBhcmFtIGhleCBIZXggc3RyaW5nIHRvIGRlY29kZS5cbiAqIEBwYXJhbSB0b09yT3B0cyBUeXBlIHRvIGNvbnZlcnQgdG8gb3Igb3B0aW9ucy5cbiAqIEByZXR1cm5zIERlY29kZWQgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGZyb21IZXggfSBmcm9tICd2aWVtJ1xuICogY29uc3QgZGF0YSA9IGZyb21IZXgoJzB4MWE0JywgJ251bWJlcicpXG4gKiAvLyA0MjBcbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgZnJvbUhleCB9IGZyb20gJ3ZpZW0nXG4gKiBjb25zdCBkYXRhID0gZnJvbUhleCgnMHg0ODY1NmM2YzZmMjA1NzZmNzI2YzY0MjEnLCAnc3RyaW5nJylcbiAqIC8vICdIZWxsbyB3b3JsZCdcbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgZnJvbUhleCB9IGZyb20gJ3ZpZW0nXG4gKiBjb25zdCBkYXRhID0gZnJvbUhleCgnMHg0ODY1NmM2YzZmMjA1NzZmNzI2YzY0MjEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJywge1xuICogICBzaXplOiAzMixcbiAqICAgdG86ICdzdHJpbmcnXG4gKiB9KVxuICogLy8gJ0hlbGxvIHdvcmxkJ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUhleChoZXgsIHRvT3JPcHRzKSB7XG4gICAgY29uc3Qgb3B0cyA9IHR5cGVvZiB0b09yT3B0cyA9PT0gJ3N0cmluZycgPyB7IHRvOiB0b09yT3B0cyB9IDogdG9Pck9wdHM7XG4gICAgY29uc3QgdG8gPSBvcHRzLnRvO1xuICAgIGlmICh0byA9PT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiBoZXhUb051bWJlcihoZXgsIG9wdHMpO1xuICAgIGlmICh0byA9PT0gJ2JpZ2ludCcpXG4gICAgICAgIHJldHVybiBoZXhUb0JpZ0ludChoZXgsIG9wdHMpO1xuICAgIGlmICh0byA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBoZXhUb1N0cmluZyhoZXgsIG9wdHMpO1xuICAgIGlmICh0byA9PT0gJ2Jvb2xlYW4nKVxuICAgICAgICByZXR1cm4gaGV4VG9Cb29sKGhleCwgb3B0cyk7XG4gICAgcmV0dXJuIGhleFRvQnl0ZXMoaGV4LCBvcHRzKTtcbn1cbi8qKlxuICogRGVjb2RlcyBhIGhleCB2YWx1ZSBpbnRvIGEgYmlnaW50LlxuICpcbiAqIC0gRG9jczogaHR0cHM6Ly92aWVtLnNoL2RvY3MvdXRpbGl0aWVzL2Zyb21IZXgjaGV4dG9iaWdpbnRcbiAqXG4gKiBAcGFyYW0gaGV4IEhleCB2YWx1ZSB0byBkZWNvZGUuXG4gKiBAcGFyYW0gb3B0cyBPcHRpb25zLlxuICogQHJldHVybnMgQmlnSW50IHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBoZXhUb0JpZ0ludCB9IGZyb20gJ3ZpZW0nXG4gKiBjb25zdCBkYXRhID0gaGV4VG9CaWdJbnQoJzB4MWE0JywgeyBzaWduZWQ6IHRydWUgfSlcbiAqIC8vIDQyMG5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgaGV4VG9CaWdJbnQgfSBmcm9tICd2aWVtJ1xuICogY29uc3QgZGF0YSA9IGhleFRvQmlnSW50KCcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxYTQnLCB7IHNpemU6IDMyIH0pXG4gKiAvLyA0MjBuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb0JpZ0ludChoZXgsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHsgc2lnbmVkIH0gPSBvcHRzO1xuICAgIGlmIChvcHRzLnNpemUpXG4gICAgICAgIGFzc2VydFNpemUoaGV4LCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgICBjb25zdCB2YWx1ZSA9IEJpZ0ludChoZXgpO1xuICAgIGlmICghc2lnbmVkKVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgY29uc3Qgc2l6ZSA9IChoZXgubGVuZ3RoIC0gMikgLyAyO1xuICAgIGNvbnN0IG1heCA9ICgxbiA8PCAoQmlnSW50KHNpemUpICogOG4gLSAxbikpIC0gMW47XG4gICAgaWYgKHZhbHVlIDw9IG1heClcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZSAtIEJpZ0ludChgMHgkeydmJy5wYWRTdGFydChzaXplICogMiwgJ2YnKX1gKSAtIDFuO1xufVxuLyoqXG4gKiBEZWNvZGVzIGEgaGV4IHZhbHVlIGludG8gYSBib29sZWFuLlxuICpcbiAqIC0gRG9jczogaHR0cHM6Ly92aWVtLnNoL2RvY3MvdXRpbGl0aWVzL2Zyb21IZXgjaGV4dG9ib29sXG4gKlxuICogQHBhcmFtIGhleCBIZXggdmFsdWUgdG8gZGVjb2RlLlxuICogQHBhcmFtIG9wdHMgT3B0aW9ucy5cbiAqIEByZXR1cm5zIEJvb2xlYW4gdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGhleFRvQm9vbCB9IGZyb20gJ3ZpZW0nXG4gKiBjb25zdCBkYXRhID0gaGV4VG9Cb29sKCcweDAxJylcbiAqIC8vIHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgaGV4VG9Cb29sIH0gZnJvbSAndmllbSdcbiAqIGNvbnN0IGRhdGEgPSBoZXhUb0Jvb2woJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsIHsgc2l6ZTogMzIgfSlcbiAqIC8vIHRydWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhleFRvQm9vbChoZXhfLCBvcHRzID0ge30pIHtcbiAgICBsZXQgaGV4ID0gaGV4XztcbiAgICBpZiAob3B0cy5zaXplKSB7XG4gICAgICAgIGFzc2VydFNpemUoaGV4LCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgICAgICAgaGV4ID0gdHJpbShoZXgpO1xuICAgIH1cbiAgICBpZiAodHJpbShoZXgpID09PSAnMHgwMCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHJpbShoZXgpID09PSAnMHgwMScpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHRocm93IG5ldyBJbnZhbGlkSGV4Qm9vbGVhbkVycm9yKGhleCk7XG59XG4vKipcbiAqIERlY29kZXMgYSBoZXggc3RyaW5nIGludG8gYSBudW1iZXIuXG4gKlxuICogLSBEb2NzOiBodHRwczovL3ZpZW0uc2gvZG9jcy91dGlsaXRpZXMvZnJvbUhleCNoZXh0b251bWJlclxuICpcbiAqIEBwYXJhbSBoZXggSGV4IHZhbHVlIHRvIGRlY29kZS5cbiAqIEBwYXJhbSBvcHRzIE9wdGlvbnMuXG4gKiBAcmV0dXJucyBOdW1iZXIgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGhleFRvTnVtYmVyIH0gZnJvbSAndmllbSdcbiAqIGNvbnN0IGRhdGEgPSBoZXhUb051bWJlcignMHgxYTQnKVxuICogLy8gNDIwXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGhleFRvTnVtYmVyIH0gZnJvbSAndmllbSdcbiAqIGNvbnN0IGRhdGEgPSBoZXhUb0JpZ0ludCgnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWE0JywgeyBzaXplOiAzMiB9KVxuICogLy8gNDIwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb051bWJlcihoZXgsIG9wdHMgPSB7fSkge1xuICAgIHJldHVybiBOdW1iZXIoaGV4VG9CaWdJbnQoaGV4LCBvcHRzKSk7XG59XG4vKipcbiAqIERlY29kZXMgYSBoZXggdmFsdWUgaW50byBhIFVURi04IHN0cmluZy5cbiAqXG4gKiAtIERvY3M6IGh0dHBzOi8vdmllbS5zaC9kb2NzL3V0aWxpdGllcy9mcm9tSGV4I2hleHRvc3RyaW5nXG4gKlxuICogQHBhcmFtIGhleCBIZXggdmFsdWUgdG8gZGVjb2RlLlxuICogQHBhcmFtIG9wdHMgT3B0aW9ucy5cbiAqIEByZXR1cm5zIFN0cmluZyB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgaGV4VG9TdHJpbmcgfSBmcm9tICd2aWVtJ1xuICogY29uc3QgZGF0YSA9IGhleFRvU3RyaW5nKCcweDQ4NjU2YzZjNmYyMDU3NmY3MjZjNjQyMScpXG4gKiAvLyAnSGVsbG8gd29ybGQhJ1xuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBoZXhUb1N0cmluZyB9IGZyb20gJ3ZpZW0nXG4gKiBjb25zdCBkYXRhID0gaGV4VG9TdHJpbmcoJzB4NDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NDIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsIHtcbiAqICBzaXplOiAzMixcbiAqIH0pXG4gKiAvLyAnSGVsbG8gd29ybGQnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1N0cmluZyhoZXgsIG9wdHMgPSB7fSkge1xuICAgIGxldCBieXRlcyA9IGhleFRvQnl0ZXMoaGV4KTtcbiAgICBpZiAob3B0cy5zaXplKSB7XG4gICAgICAgIGFzc2VydFNpemUoYnl0ZXMsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICAgICAgICBieXRlcyA9IHRyaW0oYnl0ZXMsIHsgZGlyOiAncmlnaHQnIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGJ5dGVzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21IZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/fromHex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toBytes.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toBytes.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boolToBytes: () => (/* binding */ boolToBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   numberToBytes: () => (/* binding */ numberToBytes),\n/* harmony export */   stringToBytes: () => (/* binding */ stringToBytes),\n/* harmony export */   toBytes: () => (/* binding */ toBytes)\n/* harmony export */ });\n/* harmony import */ var _errors_base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/base.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/base.js\");\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/isHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/pad.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var _toHex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n\n\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nfunction toBytes(value, opts = {}) {\n    if (typeof value === 'number' || typeof value === 'bigint')\n        return numberToBytes(value, opts);\n    if (typeof value === 'boolean')\n        return boolToBytes(value, opts);\n    if ((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(value))\n        return hexToBytes(value, opts);\n    return stringToBytes(value, opts);\n}\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nfunction boolToBytes(value, opts = {}) {\n    const bytes = new Uint8Array(1);\n    bytes[0] = Number(value);\n    if (typeof opts.size === 'number') {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(bytes, { size: opts.size });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, { size: opts.size });\n    }\n    return bytes;\n}\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n    zero: 48,\n    nine: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102,\n};\nfunction charCodeToBase16(char) {\n    if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n        return char - charCodeMap.zero;\n    if (char >= charCodeMap.A && char <= charCodeMap.F)\n        return char - (charCodeMap.A - 10);\n    if (char >= charCodeMap.a && char <= charCodeMap.f)\n        return char - (charCodeMap.a - 10);\n    return undefined;\n}\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nfunction hexToBytes(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(hex, { size: opts.size });\n        hex = (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(hex, { dir: 'right', size: opts.size });\n    }\n    let hexString = hex.slice(2);\n    if (hexString.length % 2)\n        hexString = `0${hexString}`;\n    const length = hexString.length / 2;\n    const bytes = new Uint8Array(length);\n    for (let index = 0, j = 0; index < length; index++) {\n        const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));\n        const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));\n        if (nibbleLeft === undefined || nibbleRight === undefined) {\n            throw new _errors_base_js__WEBPACK_IMPORTED_MODULE_3__.BaseError(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\n        }\n        bytes[index] = nibbleLeft * 16 + nibbleRight;\n    }\n    return bytes;\n}\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nfunction numberToBytes(value, opts) {\n    const hex = (0,_toHex_js__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(value, opts);\n    return hexToBytes(hex);\n}\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nfunction stringToBytes(value, opts = {}) {\n    const bytes = encoder.encode(value);\n    if (typeof opts.size === 'number') {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(bytes, { size: opts.size });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, { dir: 'right', size: opts.size });\n    }\n    return bytes;\n}\n//# sourceMappingURL=toBytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toBytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toHex.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toHex.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boolToHex: () => (/* binding */ boolToHex),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   numberToHex: () => (/* binding */ numberToHex),\n/* harmony export */   stringToHex: () => (/* binding */ stringToHex),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors/encoding.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/errors/encoding.js\");\n/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/pad.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n\n\n\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */\nfunction toHex(value, opts = {}) {\n    if (typeof value === 'number' || typeof value === 'bigint')\n        return numberToHex(value, opts);\n    if (typeof value === 'string') {\n        return stringToHex(value, opts);\n    }\n    if (typeof value === 'boolean')\n        return boolToHex(value, opts);\n    return bytesToHex(value, opts);\n}\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */\nfunction boolToHex(value, opts = {}) {\n    const hex = `0x${Number(value)}`;\n    if (typeof opts.size === 'number') {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_0__.assertSize)(hex, { size: opts.size });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, { size: opts.size });\n    }\n    return hex;\n}\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nfunction bytesToHex(value, opts = {}) {\n    let string = '';\n    for (let i = 0; i < value.length; i++) {\n        string += hexes[value[i]];\n    }\n    const hex = `0x${string}`;\n    if (typeof opts.size === 'number') {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_0__.assertSize)(hex, { size: opts.size });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, { dir: 'right', size: opts.size });\n    }\n    return hex;\n}\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */\nfunction numberToHex(value_, opts = {}) {\n    const { signed, size } = opts;\n    const value = BigInt(value_);\n    let maxValue;\n    if (size) {\n        if (signed)\n            maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n;\n        else\n            maxValue = 2n ** (BigInt(size) * 8n) - 1n;\n    }\n    else if (typeof value_ === 'number') {\n        maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n    }\n    const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0;\n    if ((maxValue && value > maxValue) || value < minValue) {\n        const suffix = typeof value_ === 'bigint' ? 'n' : '';\n        throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_2__.IntegerOutOfRangeError({\n            max: maxValue ? `${maxValue}${suffix}` : undefined,\n            min: `${minValue}${suffix}`,\n            signed,\n            size,\n            value: `${value_}${suffix}`,\n        });\n    }\n    const hex = `0x${(signed && value < 0\n        ? (1n << BigInt(size * 8)) + BigInt(value)\n        : value).toString(16)}`;\n    if (size)\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, { size });\n    return hex;\n}\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nfunction stringToHex(value_, opts = {}) {\n    const value = encoder.encode(value_);\n    return bytesToHex(value, opts);\n}\n//# sourceMappingURL=toHex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toHex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/hash/keccak256.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/hash/keccak256.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: () => (/* binding */ keccak256)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/isHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/toBytes.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encoding/toHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n\nfunction keccak256(value, to_) {\n    const to = to_ || 'hex';\n    const bytes = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256)((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_1__.isHex)(value, { strict: false }) ? (0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value) : value);\n    if (to === 'bytes')\n        return bytes;\n    return (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.toHex)(bytes);\n}\n//# sourceMappingURL=keccak256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2hhc2gva2VjY2FrMjU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWdEO0FBQ1A7QUFDUTtBQUNKO0FBQ3RDO0FBQ1A7QUFDQSxrQkFBa0IsOERBQVUsQ0FBQyxxREFBSyxVQUFVLGVBQWUsSUFBSSw2REFBTztBQUN0RTtBQUNBO0FBQ0EsV0FBVyx5REFBSztBQUNoQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2hhc2gva2VjY2FrMjU2LmpzPzAyMzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2VjY2FrXzI1NiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhMyc7XG5pbXBvcnQgeyBpc0hleCB9IGZyb20gJy4uL2RhdGEvaXNIZXguanMnO1xuaW1wb3J0IHsgdG9CeXRlcyB9IGZyb20gJy4uL2VuY29kaW5nL3RvQnl0ZXMuanMnO1xuaW1wb3J0IHsgdG9IZXggfSBmcm9tICcuLi9lbmNvZGluZy90b0hleC5qcyc7XG5leHBvcnQgZnVuY3Rpb24ga2VjY2FrMjU2KHZhbHVlLCB0b18pIHtcbiAgICBjb25zdCB0byA9IHRvXyB8fCAnaGV4JztcbiAgICBjb25zdCBieXRlcyA9IGtlY2Nha18yNTYoaXNIZXgodmFsdWUsIHsgc3RyaWN0OiBmYWxzZSB9KSA/IHRvQnl0ZXModmFsdWUpIDogdmFsdWUpO1xuICAgIGlmICh0byA9PT0gJ2J5dGVzJylcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIHJldHVybiB0b0hleChieXRlcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWNjYWsyNTYuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/hash/keccak256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/lru.js":
/*!************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/lru.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LruMap: () => (/* binding */ LruMap)\n/* harmony export */ });\n/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nclass LruMap extends Map {\n    constructor(size) {\n        super();\n        Object.defineProperty(this, \"maxSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxSize = size;\n    }\n    set(key, value) {\n        super.set(key, value);\n        if (this.maxSize && this.size > this.maxSize)\n            this.delete(this.keys().next().value);\n        return this;\n    }\n}\n//# sourceMappingURL=lru.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2xydS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS1jb21wb25lbnRzLXFzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AeG10cC94bXRwLWpzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvbHJ1LmpzP2VlOTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYXAgd2l0aCBhIExSVSAoTGVhc3QgcmVjZW50bHkgdXNlZCkgcG9saWN5LlxuICpcbiAqIEBsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhY2hlX3JlcGxhY2VtZW50X3BvbGljaWVzI0xSVVxuICovXG5leHBvcnQgY2xhc3MgTHJ1TWFwIGV4dGVuZHMgTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihzaXplKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1heFNpemVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tYXhTaXplID0gc2l6ZTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5tYXhTaXplICYmIHRoaXMuc2l6ZSA+IHRoaXMubWF4U2l6ZSlcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlKHRoaXMua2V5cygpLm5leHQoKS52YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxydS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/lru.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/hashMessage.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/hashMessage.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashMessage: () => (/* binding */ hashMessage)\n/* harmony export */ });\n/* harmony import */ var _constants_strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/strings.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/constants/strings.js\");\n/* harmony import */ var _data_concat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/concat.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/concat.js\");\n/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding/toBytes.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var _hash_keccak256_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hash/keccak256.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/hash/keccak256.js\");\n\n\n\n\nfunction hashMessage(message, to_) {\n    const messageBytes = (() => {\n        if (typeof message === 'string')\n            return (0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_0__.stringToBytes)(message);\n        if (message.raw instanceof Uint8Array)\n            return message.raw;\n        return (0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(message.raw);\n    })();\n    const prefixBytes = (0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_0__.stringToBytes)(`${_constants_strings_js__WEBPACK_IMPORTED_MODULE_1__.presignMessagePrefix}${messageBytes.length}`);\n    return (0,_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)((0,_data_concat_js__WEBPACK_IMPORTED_MODULE_3__.concat)([prefixBytes, messageBytes]), to_);\n}\n//# sourceMappingURL=hashMessage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9oYXNoTWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFrRTtBQUN2QjtBQUNzQjtBQUNoQjtBQUMxQztBQUNQO0FBQ0E7QUFDQSxtQkFBbUIsbUVBQWE7QUFDaEM7QUFDQTtBQUNBLGVBQWUsNkRBQU87QUFDdEIsS0FBSztBQUNMLHdCQUF3QixtRUFBYSxJQUFJLHVFQUFvQixDQUFDLEVBQUUsb0JBQW9CO0FBQ3BGLFdBQVcsNkRBQVMsQ0FBQyx1REFBTTtBQUMzQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9oYXNoTWVzc2FnZS5qcz8xZjBjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByZXNpZ25NZXNzYWdlUHJlZml4IH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3N0cmluZ3MuanMnO1xuaW1wb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vZGF0YS9jb25jYXQuanMnO1xuaW1wb3J0IHsgc3RyaW5nVG9CeXRlcywgdG9CeXRlcywgfSBmcm9tICcuLi9lbmNvZGluZy90b0J5dGVzLmpzJztcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gJy4uL2hhc2gva2VjY2FrMjU2LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNoTWVzc2FnZShtZXNzYWdlLCB0b18pIHtcbiAgICBjb25zdCBtZXNzYWdlQnl0ZXMgPSAoKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1RvQnl0ZXMobWVzc2FnZSk7XG4gICAgICAgIGlmIChtZXNzYWdlLnJhdyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5yYXc7XG4gICAgICAgIHJldHVybiB0b0J5dGVzKG1lc3NhZ2UucmF3KTtcbiAgICB9KSgpO1xuICAgIGNvbnN0IHByZWZpeEJ5dGVzID0gc3RyaW5nVG9CeXRlcyhgJHtwcmVzaWduTWVzc2FnZVByZWZpeH0ke21lc3NhZ2VCeXRlcy5sZW5ndGh9YCk7XG4gICAgcmV0dXJuIGtlY2NhazI1Nihjb25jYXQoW3ByZWZpeEJ5dGVzLCBtZXNzYWdlQnl0ZXNdKSwgdG9fKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2hNZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/hashMessage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/hexToSignature.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/hexToSignature.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hexToSignature: () => (/* binding */ hexToSignature)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _utils_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/encoding/toHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n/**\n * @description Parses a hex formatted signature into a structured signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * hexToSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', s: '0x...', v: 28n }\n */\nfunction hexToSignature(signatureHex) {\n    const { r, s } = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.Signature.fromCompact(signatureHex.slice(2, 130));\n    const v = BigInt(`0x${signatureHex.slice(130)}`);\n    return { r: (0,_utils_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.numberToHex)(r, { size: 32 }), s: (0,_utils_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.numberToHex)(s, { size: 32 }), v };\n}\n//# sourceMappingURL=hexToSignature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9oZXhUb1NpZ25hdHVyZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0Q7QUFDUztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ087QUFDUCxZQUFZLE9BQU8sRUFBRSw4REFBUztBQUM5QiwwQkFBMEIsd0JBQXdCO0FBQ2xELGFBQWEsR0FBRyxxRUFBVyxNQUFNLFVBQVUsTUFBTSxxRUFBVyxNQUFNLFVBQVU7QUFDNUU7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9zaWduYXR1cmUvaGV4VG9TaWduYXR1cmUuanM/NTRlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZWNwMjU2azEgfSBmcm9tICdAbm9ibGUvY3VydmVzL3NlY3AyNTZrMSc7XG5pbXBvcnQgeyBudW1iZXJUb0hleCwgfSBmcm9tICcuLi8uLi91dGlscy9lbmNvZGluZy90b0hleC5qcyc7XG4vKipcbiAqIEBkZXNjcmlwdGlvbiBQYXJzZXMgYSBoZXggZm9ybWF0dGVkIHNpZ25hdHVyZSBpbnRvIGEgc3RydWN0dXJlZCBzaWduYXR1cmUuXG4gKlxuICogQHBhcmFtIHNpZ25hdHVyZUhleCBTaWduYXR1cmUgaW4gaGV4IGZvcm1hdC5cbiAqIEByZXR1cm5zIFRoZSBzdHJ1Y3R1cmVkIHNpZ25hdHVyZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaGV4VG9TaWduYXR1cmUoJzB4NmUxMDBhMzUyZWM2YWQxYjcwODAyMjkwZTE4YWVlZDE5MDcwNDk3MzU3MGYzYjhlZDQyY2I5ODA4ZTJlYTZiZjRhOTBhMjI5YTI0NDQ5NWI0MTg5MDk4NzgwNmZjYmQyZDVkMjNmYzBkYmU1ZjUyNTZjMjYxM2MwMzlkNzZkYjgxYycpXG4gKiAvLyB7IHI6ICcweC4uLicsIHM6ICcweC4uLicsIHY6IDI4biB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1NpZ25hdHVyZShzaWduYXR1cmVIZXgpIHtcbiAgICBjb25zdCB7IHIsIHMgfSA9IHNlY3AyNTZrMS5TaWduYXR1cmUuZnJvbUNvbXBhY3Qoc2lnbmF0dXJlSGV4LnNsaWNlKDIsIDEzMCkpO1xuICAgIGNvbnN0IHYgPSBCaWdJbnQoYDB4JHtzaWduYXR1cmVIZXguc2xpY2UoMTMwKX1gKTtcbiAgICByZXR1cm4geyByOiBudW1iZXJUb0hleChyLCB7IHNpemU6IDMyIH0pLCBzOiBudW1iZXJUb0hleChzLCB7IHNpemU6IDMyIH0pLCB2IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZXhUb1NpZ25hdHVyZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/hexToSignature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverAddress.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverAddress.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recoverAddress: () => (/* binding */ recoverAddress)\n/* harmony export */ });\n/* harmony import */ var _accounts_utils_publicKeyToAddress_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../accounts/utils/publicKeyToAddress.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js\");\n/* harmony import */ var _recoverPublicKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recoverPublicKey.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverPublicKey.js\");\n\n\nasync function recoverAddress({ hash, signature, }) {\n    return (0,_accounts_utils_publicKeyToAddress_js__WEBPACK_IMPORTED_MODULE_0__.publicKeyToAddress)(await (0,_recoverPublicKey_js__WEBPACK_IMPORTED_MODULE_1__.recoverPublicKey)({ hash: hash, signature }));\n}\n//# sourceMappingURL=recoverAddress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9yZWNvdmVyQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Y7QUFDdkI7QUFDbEQsZ0NBQWdDLGtCQUFrQjtBQUN6RCxXQUFXLHlGQUFrQixPQUFPLHNFQUFnQixHQUFHLHVCQUF1QjtBQUM5RTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9yZWNvdmVyQWRkcmVzcy5qcz83Zjk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHB1YmxpY0tleVRvQWRkcmVzcyB9IGZyb20gJy4uLy4uL2FjY291bnRzL3V0aWxzL3B1YmxpY0tleVRvQWRkcmVzcy5qcyc7XG5pbXBvcnQgeyByZWNvdmVyUHVibGljS2V5IH0gZnJvbSAnLi9yZWNvdmVyUHVibGljS2V5LmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWNvdmVyQWRkcmVzcyh7IGhhc2gsIHNpZ25hdHVyZSwgfSkge1xuICAgIHJldHVybiBwdWJsaWNLZXlUb0FkZHJlc3MoYXdhaXQgcmVjb3ZlclB1YmxpY0tleSh7IGhhc2g6IGhhc2gsIHNpZ25hdHVyZSB9KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWNvdmVyQWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverMessageAddress.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverMessageAddress.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recoverMessageAddress: () => (/* binding */ recoverMessageAddress)\n/* harmony export */ });\n/* harmony import */ var _hashMessage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hashMessage.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/hashMessage.js\");\n/* harmony import */ var _recoverAddress_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./recoverAddress.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverAddress.js\");\n\n\nasync function recoverMessageAddress({ message, signature, }) {\n    return (0,_recoverAddress_js__WEBPACK_IMPORTED_MODULE_0__.recoverAddress)({ hash: (0,_hashMessage_js__WEBPACK_IMPORTED_MODULE_1__.hashMessage)(message), signature });\n}\n//# sourceMappingURL=recoverMessageAddress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9yZWNvdmVyTWVzc2FnZUFkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ087QUFDL0MsdUNBQXVDLHFCQUFxQjtBQUNuRSxXQUFXLGtFQUFjLEdBQUcsTUFBTSw0REFBVyxzQkFBc0I7QUFDbkU7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9zaWduYXR1cmUvcmVjb3Zlck1lc3NhZ2VBZGRyZXNzLmpzP2EzNzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzaE1lc3NhZ2UgfSBmcm9tICcuL2hhc2hNZXNzYWdlLmpzJztcbmltcG9ydCB7IHJlY292ZXJBZGRyZXNzLCB9IGZyb20gJy4vcmVjb3ZlckFkZHJlc3MuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlY292ZXJNZXNzYWdlQWRkcmVzcyh7IG1lc3NhZ2UsIHNpZ25hdHVyZSwgfSkge1xuICAgIHJldHVybiByZWNvdmVyQWRkcmVzcyh7IGhhc2g6IGhhc2hNZXNzYWdlKG1lc3NhZ2UpLCBzaWduYXR1cmUgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWNvdmVyTWVzc2FnZUFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverMessageAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverPublicKey.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverPublicKey.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recoverPublicKey: () => (/* binding */ recoverPublicKey)\n/* harmony export */ });\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/isHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/fromHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoding/toHex.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\nasync function recoverPublicKey({ hash, signature, }) {\n    const signatureHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(signature) ? signature : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(signature);\n    const hashHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(hash) ? hash : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(hash);\n    // Derive v = recoveryId + 27 from end of the signature (27 is added when signing the message)\n    // The recoveryId represents the y-coordinate on the secp256k1 elliptic curve and can have a value [0, 1].\n    let v = (0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToNumber)(`0x${signatureHex.slice(130)}`);\n    if (v === 0 || v === 1)\n        v += 27;\n    const { secp256k1 } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/@noble/curves/esm/secp256k1.js\"));\n    const publicKey = secp256k1.Signature.fromCompact(signatureHex.substring(2, 130))\n        .addRecoveryBit(v - 27)\n        .recoverPublicKey(hashHex.substring(2))\n        .toHex(false);\n    return `0x${publicKey}`;\n}\n//# sourceMappingURL=recoverPublicKey.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9yZWNvdmVyUHVibGljS2V5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDWTtBQUNSO0FBQ3RDLGtDQUFrQyxrQkFBa0I7QUFDM0QseUJBQXlCLHFEQUFLLDBCQUEwQix5REFBSztBQUM3RCxvQkFBb0IscURBQUssZ0JBQWdCLHlEQUFLO0FBQzlDO0FBQ0E7QUFDQSxZQUFZLGlFQUFXLE1BQU0sd0JBQXdCO0FBQ3JEO0FBQ0E7QUFDQSxZQUFZLFlBQVksUUFBUSxxTUFBaUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWktY29tcG9uZW50cy1xcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9yZWNvdmVyUHVibGljS2V5LmpzP2VlOGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIZXggfSBmcm9tICcuLi9kYXRhL2lzSGV4LmpzJztcbmltcG9ydCB7IGhleFRvTnVtYmVyIH0gZnJvbSAnLi4vZW5jb2RpbmcvZnJvbUhleC5qcyc7XG5pbXBvcnQgeyB0b0hleCB9IGZyb20gJy4uL2VuY29kaW5nL3RvSGV4LmpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWNvdmVyUHVibGljS2V5KHsgaGFzaCwgc2lnbmF0dXJlLCB9KSB7XG4gICAgY29uc3Qgc2lnbmF0dXJlSGV4ID0gaXNIZXgoc2lnbmF0dXJlKSA/IHNpZ25hdHVyZSA6IHRvSGV4KHNpZ25hdHVyZSk7XG4gICAgY29uc3QgaGFzaEhleCA9IGlzSGV4KGhhc2gpID8gaGFzaCA6IHRvSGV4KGhhc2gpO1xuICAgIC8vIERlcml2ZSB2ID0gcmVjb3ZlcnlJZCArIDI3IGZyb20gZW5kIG9mIHRoZSBzaWduYXR1cmUgKDI3IGlzIGFkZGVkIHdoZW4gc2lnbmluZyB0aGUgbWVzc2FnZSlcbiAgICAvLyBUaGUgcmVjb3ZlcnlJZCByZXByZXNlbnRzIHRoZSB5LWNvb3JkaW5hdGUgb24gdGhlIHNlY3AyNTZrMSBlbGxpcHRpYyBjdXJ2ZSBhbmQgY2FuIGhhdmUgYSB2YWx1ZSBbMCwgMV0uXG4gICAgbGV0IHYgPSBoZXhUb051bWJlcihgMHgke3NpZ25hdHVyZUhleC5zbGljZSgxMzApfWApO1xuICAgIGlmICh2ID09PSAwIHx8IHYgPT09IDEpXG4gICAgICAgIHYgKz0gMjc7XG4gICAgY29uc3QgeyBzZWNwMjU2azEgfSA9IGF3YWl0IGltcG9ydCgnQG5vYmxlL2N1cnZlcy9zZWNwMjU2azEnKTtcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBzZWNwMjU2azEuU2lnbmF0dXJlLmZyb21Db21wYWN0KHNpZ25hdHVyZUhleC5zdWJzdHJpbmcoMiwgMTMwKSlcbiAgICAgICAgLmFkZFJlY292ZXJ5Qml0KHYgLSAyNylcbiAgICAgICAgLnJlY292ZXJQdWJsaWNLZXkoaGFzaEhleC5zdWJzdHJpbmcoMikpXG4gICAgICAgIC50b0hleChmYWxzZSk7XG4gICAgcmV0dXJuIGAweCR7cHVibGljS2V5fWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWNvdmVyUHVibGljS2V5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverPublicKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/verifyMessage.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/verifyMessage.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   verifyMessage: () => (/* binding */ verifyMessage)\n/* harmony export */ });\n/* harmony import */ var _address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/getAddress.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var _address_isAddressEqual_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../address/isAddressEqual.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/address/isAddressEqual.js\");\n/* harmony import */ var _recoverMessageAddress_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./recoverMessageAddress.js */ \"(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/recoverMessageAddress.js\");\n\n\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyMessage` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyMessage}\n *\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nasync function verifyMessage({ address, message, signature, }) {\n    return (0,_address_isAddressEqual_js__WEBPACK_IMPORTED_MODULE_0__.isAddressEqual)((0,_address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(address), await (0,_recoverMessageAddress_js__WEBPACK_IMPORTED_MODULE_2__.recoverMessageAddress)({ message, signature }));\n}\n//# sourceMappingURL=verifyMessage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhtdHAveG10cC1qcy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS92ZXJpZnlNZXNzYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0Q7QUFDUztBQUNLO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0Esd0JBQXdCO0FBQ3hCLG9EQUFvRDtBQUNwRDtBQUNPLCtCQUErQiw4QkFBOEI7QUFDcEUsV0FBVywwRUFBYyxDQUFDLGtFQUFVLGlCQUFpQixnRkFBcUIsR0FBRyxvQkFBb0I7QUFDakc7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLWNvbXBvbmVudHMtcXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B4bXRwL3htdHAtanMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9zaWduYXR1cmUvdmVyaWZ5TWVzc2FnZS5qcz8xZjI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tICcuLi9hZGRyZXNzL2dldEFkZHJlc3MuanMnO1xuaW1wb3J0IHsgaXNBZGRyZXNzRXF1YWwsIH0gZnJvbSAnLi4vYWRkcmVzcy9pc0FkZHJlc3NFcXVhbC5qcyc7XG5pbXBvcnQgeyByZWNvdmVyTWVzc2FnZUFkZHJlc3MsIH0gZnJvbSAnLi9yZWNvdmVyTWVzc2FnZUFkZHJlc3MuanMnO1xuLyoqXG4gKiBWZXJpZnkgdGhhdCBhIG1lc3NhZ2Ugd2FzIHNpZ25lZCBieSB0aGUgcHJvdmlkZWQgYWRkcmVzcy5cbiAqXG4gKiBOb3RlOiAgT25seSBzdXBwb3J0cyBFeHRlcm5hbGx5IE93bmVkIEFjY291bnRzLiBEb2VzIG5vdCBzdXBwb3J0IENvbnRyYWN0IEFjY291bnRzLlxuICogICAgICAgIEl0IGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgYHB1YmxpY0NsaWVudC52ZXJpZnlNZXNzYWdlYCBpbnN0ZWFkIHRvIGVuc3VyZVxuICogICAgICAgIHdhbGxldCBpbnRlcm9wZXJhYmlsaXR5LlxuICpcbiAqIC0gRG9jcyB7QGxpbmsgaHR0cHM6Ly92aWVtLnNoL2RvY3MvdXRpbGl0aWVzL3ZlcmlmeU1lc3NhZ2V9XG4gKlxuICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgVmVyaWZ5TWVzc2FnZVBhcmFtZXRlcnN9XG4gKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0aGUgc2lnbmF0dXJlIGlzIHZhbGlkLiB7QGxpbmsgVmVyaWZ5TWVzc2FnZVJldHVyblR5cGV9XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlNZXNzYWdlKHsgYWRkcmVzcywgbWVzc2FnZSwgc2lnbmF0dXJlLCB9KSB7XG4gICAgcmV0dXJuIGlzQWRkcmVzc0VxdWFsKGdldEFkZHJlc3MoYWRkcmVzcyksIGF3YWl0IHJlY292ZXJNZXNzYWdlQWRkcmVzcyh7IG1lc3NhZ2UsIHNpZ25hdHVyZSB9KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJpZnlNZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xmtp/xmtp-js/node_modules/viem/_esm/utils/signature/verifyMessage.js\n");

/***/ })

};
;